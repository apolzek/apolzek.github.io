<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>apolzek</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2024-07-24T10:54:09+00:00</updated>
 <id></id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Sistemas Observáveis - Parte 1</title>
   <link href="/2025/09/12/sistemas-observaveis-parte-1.html"/>
   <updated>2025-09-12T00:00:00+00:00</updated>
   <id>/2025/09/12/sistemas-observaveis-parte-1</id>
   <content type="html">&lt;p&gt;Antes de iniciar, responda as seguintes questões mentalmente:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) É necessário ter monitoramento previamente para alcançar a observabilidade?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Os dados relacionados ao negócio também fazem parte da observabilidade?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Quais questões podem ser respondidas ao se atingir o estágio de observabilidade em um sistema?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando falamos de “observabilidade”, é comum logo pensarmos em uma série de ferramentas e dashboards atraentes. Associamos também esse conceito aos seus pilares, que são: logs, traces e métricas. Mas o que isso realmente significa? Na minha concepção, observabilidade é a capacidade de compreender o funcionamento de um sistema em um determinado momento, sem a necessidade de grandes esforços mentais. Isso requer uma visão abrangente e profunda não apenas dos componentes principais, mas também de suas dependências. Nos últimos anos, temos visto um crescimento exponencial em tamanho e complexidade dos sistemas, o que tem impulsionado a indústria a desenvolver ferramentas avançadas para esse contexto. O que você lerá a seguir é a opinião de alguém que já enfrentou os desafios de suportar produtos críticos operando 24/7, utilizando as mais diversas soluções de observabilidade.&lt;/p&gt;

&lt;p&gt;Inicialmente tenha em mente que o conceito de observabilidade vai além de ter boas métricas e ferramentas configuradas. Envolve ajudar o observador a entender o que o sistema deveria fazer e se ele de fato está fazendo. Por ser complexo, pode ser abordado de diferentes formas dentro das empresas. O mais comum é trabalhar por níveis, onde o topo da pirâmide se concentra em ver um panorama geral com informações mais ligadas ao negócio. À medida que se desce na pirâmide, tem-se mais dados técnicos e a visão tende a se granularizar. Esse tipo de abordagem ajuda a manter diferentes times focados em analisar aquilo que é de seu domínio técnico (aplicação, rede, banco de dados, etc.). Essa é uma das maneiras de escalar times no ambiente organizacional com varias pessoas envolvidas em várias frentes. Um dos maiores desafios aqui é fornecer uma plataforma uniforme que atenda aos mais variados times de Engenharia.&lt;/p&gt;

&lt;p&gt;Novamente, se proponha a responder mais um questionamento: &lt;strong&gt;Por que alguém decidiu investir tanto para ter visibilidade de um sistema?&lt;/strong&gt; A primeira resposta que me vem à mente é: porque esse sistema é importante. E aqui não me entenda mal, o sistema pode ser importante tanto por sua capacidade de gerar receita quanto por seu valor ideológico; isso não importa. O que importa é que todos nós estamos empenhados em garantir uma boa experiência para o usuário final. Em determinados momentos, isso pode ser mais valioso do que o próprio dinheiro. Assim, investimos recursos porque sabemos que os erros inevitavelmente ocorrerão e queremos estar preparados de diversas formas para minimizá-los ou corrigi-los rapidamente. Como usuários finais, somos extremamente exigentes.&lt;/p&gt;

&lt;p&gt;Sistemas computacionais tendem a ser complexos por natureza, pois são construídos sobre uma pilha de abstrações que presumimos estar funcionando corretamente. Se você é um programador, engenheiro de software ou algo do tipo, sabe que existe várias formas de se construir a mesma coisa. Além disso, há as dependências, como sistemas de banco de dados, sistemas de mensageria, caches e outros. Temos também a parte de comunicação, que pode envolver redes de computadores usando diferentes protocolos(pilhas). Nosso objetivo então é ter detalhes sobre todas as partes. Isso permite que saiamos do campo da especulação e entremos no do determinismo. Aqui, o futuro é considerado fixo e definido com base no estado atual e nas leis naturais que governam o universo. Na prática significa que se o throughput de uma API está aumentando, mais chamadas laterais podem acontecer, resultando em um alto consumo de banda e maior uso do banco de dados. Nesse sentido, é importante lembrar que se o sistema foi mal desenhado ou se seus subsistemas carregam débitos técnicos a observabilidade vai te ajudar a identificar esses problemas rapidamente.&lt;/p&gt;

&lt;p&gt;⚠️ Quem avisa amigo é. Cuidado para não tratar apenas um problema que é reflexo de um problema maior. O efeito cascata é comum em arquiteturas complexas e encontrar a causa raiz costuma  ser difícil! Vamos seguido..&lt;/p&gt;

&lt;p&gt;Normalmente o que consguimos ter dos sistemas são logs, traces, métricas e eventos. Existem várias ferramentas no mercado para lidar com isso tais como: Prometheus, Grafana, Elasticsearch, Logstash, Kibana, Splunk, New Relic, Datadog, Jaeger, Zipkin, Dynatrace, Honeycomb, AppDynamics, Sentry, Fluentd, Nagios, Zabbix, VictoriaMetrics, Thanos, OpenTelemetry e Graylog. Essa lista é apenas uma pequena amostra, pois há muitas outras ferramentas disponíveis. Quero destacar três das ferramentas supracitadas e fazer uma breve tangente: &lt;strong&gt;Dynatrace, New Relic e Datadog&lt;/strong&gt;. Em todos os lugares em que trabalhei, pelo menos uma dessas três empresas estava presente. O mais intrigante é que todas elas enfrentaram o mesmo problema: &lt;strong&gt;custo em ascensão acelerado(custo por mês)&lt;/strong&gt;. Contudo, meu objetivo aqui não é critica-las nem mesmo suas soluções de mercado, mas, em aprender com os seus modelos de negócios e no que eles implicam.&lt;/p&gt;

&lt;p&gt;Essas empresas normalmente enfrentam três desafios principais. O primeiro está relacionado à própria observabilidade, ou seja, como extrair dados relevantes de sistemas complexos da forma mais abstrata possível para seus clientes. O segundo é como fornecer visualizações rápidas, elegantes e confiáveis, lembrando que cada cliente terá necessidades específicas. O terceiro desafio está relacionado ao modelo de negócio mencionado anteriormente e diz respeito a como essas empresas lidam com a &lt;strong&gt;grande quantidade de dados&lt;/strong&gt; extraídos. A verdade é que crescer é um processo natural e, se você não tiver um bom planejamento, vai precisar de uma boa quantia de dinheiro. Seja porque sua volumetria aumentou, novos sistemas surgiram ou sua configuração de verbosidade não está das melhores. No final, esteja preparado para pagar o preço. Dentre as perguntas que você se propôs a responder até agora, aqui entra a primeira diretamente relacionada a uma grande decisão de um projeto de observabilidade: &lt;strong&gt;pagar mais caro e delegar ou tentar economizar abraçando a complexidade técnica?&lt;/strong&gt; Eu não posso responder essa pergunta e você sabe muito bem disso.&lt;/p&gt;

&lt;p&gt;Saindo do assunto dinheiro, um movimento que tenho percebido nos últimos anos é a atenção à observabilidade logo no início dos projetos, assim como aconteceu com segurança após décadas de perdas financeiras e vazamentos de dados. As pessoas sabem que precisam ter visibilidade de seus sistemas no dia um(bem como eles precisam estar seguros) e hoje grandes projetos de software (open source ou não) normalmente possuem bons logs e boas métricas(&lt;em&gt;/metrics&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;A pessoa responsável por buscar observabilidade geralmente começa pesquisando as opções disponíveis para a stack utilizada no projeto ou na empresa. Inicialmente, encontra soluções robustas, porém pagas. Em seguida, inevitavelmente descobre soluções maduras de mercado, como Prometheus, Grafana e OpenTelemetry. Normalmente, a escolha é feita rapidamente, mas existem muitas questões importantes que também devem ser respondidas. Se essas questões forem ignoradas, é apenas uma questão de tempo até que surjam problemas.&lt;/p&gt;

&lt;p&gt;Definir padrões, fazer previsões de armazenamento, selecionar e manter ferramentas, estabelecer métricas relevantes, configurar rastreamento distribuído, compreender as dependências do sistema, lidar com sistemas assíncronos e diferentes tecnologias são apenas a ponta do iceberg dos desafios que estão por vir.&lt;/p&gt;

&lt;p&gt;Vamos refletir. Talvez a parte &lt;strong&gt;core&lt;/strong&gt; do seu sistema esteja funcionando normalmente, mas o serviço de autenticação esteja fora do ar. Seus usuários não conseguem fazer login. Isso é suficiente para colocar seu SLA em risco a cada minuto de indisponibilidade. Nesse caso, você deve esperar que algum alarme seja disparado. Caso contrário, dependerá da boa vontade de um engenheiro de confiabilidade abrir o dashboard ou, pior ainda, de uma onda de reclamações no seu canal de atendimento.&lt;/p&gt;

&lt;p&gt;O cenário hipotético acima ressalta a importância fundamental de um engenheiro competente. As mentes hábeis selecionarão as ferramentas adequadas, que se assemelham a uma terra fértil para o plantio. Estas auxiliarão na geração, captura e armazenamento de dados sobre os sistemas. Posteriormente, o mesmo engenheiro hábil os correlacionará de modo a representarem aspectos significativos do negócio. A agregação desses dados, apresentada de forma simplificada, proporciona uma visão compreensível mesmo para aqueles que não compartilham da mesma visão holística. Em síntese, alguém pensará de antemão para que os subsequentes não precisem fazê-lo. Trata-se de um projeto de melhoria contínua que jamais se encerra. O reflexo disso é ter dados bons o suficiente para montar alarmes eficazes que vão ajudar a responder a incidentes de maneira rápida. Repita esse fluxo várias vezes, pois observabilidade está mais para um processo contínuo do que um estado final.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>😭 Por que não alarmou ?</title>
   <link href="/2024/07/09/por-que-nao-alarmou.html"/>
   <updated>2024-07-09T00:00:00+00:00</updated>
   <id>/2024/07/09/por-que-nao-alarmou</id>
   <content type="html">&lt;p&gt;Já aconteceu de você configurar um alarme e ele não funcionar como esperado ? Seu SLA estava sendo comprometido sem que você soubesse ? Isso aconteceu comigo e me trouxe algumas lições importantes que gostaria de compartilhar.&lt;/p&gt;

&lt;h2 id=&quot;feijão-com-arroz&quot;&gt;Feijão com arroz&lt;/h2&gt;

&lt;p&gt;Antes de pensar em alertas eficazes, é essencial ter um sistema de monitoramento robusto que colete boas métricas em intervalos apropriados, levando em consideração a criticidade do contexto analisado. Mas o que são exatamente “&lt;strong&gt;boas métricas&lt;/strong&gt;”? Em geral, são métricas relevantes, contextualizadas, consistentes, confiáveis e bem categorizadas.&lt;/p&gt;

&lt;p&gt;Partindo do pressuposto de que você já tem tudo isso, é hora de configurar os alarmes. Você pode usar ferramentas populares para essa tarefa, como o Alertmanager e o Grafana. Elas funcionam de maneira similar e os ingredientes são os mesmos: um nome para o alerta, uma métrica, um limite (threshold), um canal de notificação e informações adicionais, como descrição e nível de criticidade. Embora o processo seja relativamente simples, configurar um alarme pode exigir atenção a detalhes importantes, como ajustar corretamente o threshold em relação aos seus pontos de dados(data points) ou agrupar alarmes correlacionados, já que certos problemas podem desencadear uma cascata de subproblemas, resultando em múltiplos alertas durante um incidente. “O TOQUE DO CELULAR CHEGA A DAR ARREPIO”&lt;/p&gt;

&lt;h2 id=&quot;quantidade-x-qualidade&quot;&gt;Quantidade x Qualidade&lt;/h2&gt;

&lt;p&gt;O conceito de ‘code coverage’ ou cobertura de código, que mede a extensão em que o código-fonte de um programa é testado, pode ser aplicado à criação de alarmes, resultando no que podemos chamar de ‘alarm coverage’. A ideia é mapear possíveis problemas e classificá-los de acordo com seu impacto. Uma abordagem top-down pode ser útil nesse processo. Ao contrário do que muitos pensam, ter uma grande quantidade de alarmes não significa ter um monitoramento abrangente. Na verdade, ser efetivo é ter alarmes suficientes para cobrir pontos críticos do seu sistema com limiares sensatos para cada objeto monitorado. Lembre-se de que trabalhar com observabilidade é um processo de melhoria contínua, e não um estado final. Sempre há necessidade de revisão, pois o sistema está em constante mudança e o nível de carga que você recebe tende a variar ao longo do tempo.&lt;/p&gt;

&lt;h2 id=&quot;p95-p50--média&quot;&gt;P95, P50 &amp;gt; Média&lt;/h2&gt;

&lt;p&gt;Em sistemas de monitoramento e métricas, a análise de desempenho é crucial para garantir a eficiência e a confiabilidade. Percentis como P50 (percentil 50) e P95 (percentil 95) são ferramentas valiosas nesse contexto, pois oferecem uma visão detalhada do comportamento dos dados e ajudam a identificar problemas de desempenho que podem não ser evidentes com métricas básicas como a média. Enquanto o P50 oferece uma visão sobre o desempenho central, o P95 foca na variabilidade e nos casos mais extremos. Juntas, essas métricas proporcionam uma compreensão mais completa do desempenho do sistema.&lt;/p&gt;

&lt;h2 id=&quot;threshold-e-tempo-de-coleta&quot;&gt;Threshold e Tempo de Coleta&lt;/h2&gt;

&lt;p&gt;Dois aspectos críticos na configuração de alarmes são o threshold (limite de alarme) e o tempo de coleta. Compreender e ajustar adequadamente esses parâmetros pode fazer a diferença entre um sistema bem monitorado e um que gera muitos falsos positivos ou, pior, não detecta problemas críticos a tempo. O threshold é o valor de referência que, quando atingido ou ultrapassado, aciona um alarme. A escolha do threshold é fundamental, pois define quando o sistema deve alertar os administradores sobre uma possível anomalia ou falha. O tempo de coleta refere-se ao intervalo de tempo usado para coletar e analisar métricas antes de acionar um alarme. Esse intervalo pode variar de segundos a minutos, dependendo da criticidade da métrica e do comportamento do sistema.&lt;/p&gt;

&lt;h2 id=&quot;monitoramento-proativo&quot;&gt;Monitoramento Proativo&lt;/h2&gt;

&lt;h2 id=&quot;documentação-e-procedimentos&quot;&gt;Documentação e Procedimentos&lt;/h2&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app_request_latency_seconds_bucket {__name__=&quot;app_request_latency_seconds_bucket&quot;, endpoint=&quot;/&quot;, instance=&quot;flask-app:5000&quot;, job=&quot;app_exporter&quot;, le=&quot;1.0&quot;, method=&quot;GET&quot;}
117
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2024-07-09 16:28:08&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app_request_latency_seconds_bucket {__name__=&quot;app_request_latency_seconds_bucket&quot;, endpoint=&quot;/&quot;, instance=&quot;flask-app:5000&quot;, job=&quot;app_exporter&quot;, le=&quot;1.0&quot;, method=&quot;GET&quot;}
318
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Dicionário do SRE</title>
   <link href="/2024/07/08/dicionario-do-sre.html"/>
   <updated>2024-07-08T00:00:00+00:00</updated>
   <id>/2024/07/08/dicionario-do-sre</id>
   <content type="html">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Termo&lt;/th&gt;
      &lt;th&gt;Definição&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;API&lt;/td&gt;
      &lt;td&gt;Interface de Programação de Aplicações. Um conjunto de rotinas e padrões para utilização de funcionalidades por aplicativos externos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A/B Testing&lt;/td&gt;
      &lt;td&gt;Teste A/B. Método estatístico para comparar duas versões de um aplicativo ou página web para determinar qual é mais eficaz.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Basic Authentication&lt;/td&gt;
      &lt;td&gt;Autenticação Básica. Método simples de autenticação HTTP usando usuário e senha codificados em base64.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clean Code&lt;/td&gt;
      &lt;td&gt;Código Limpo. Princípios e práticas para escrever código legível, modular e de fácil manutenção.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cookie&lt;/td&gt;
      &lt;td&gt;Pequeno arquivo enviado pelo servidor e armazenado localmente no navegador, usado para gerenciar sessões e autenticação.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CQRS&lt;/td&gt;
      &lt;td&gt;Command Query Responsibility Segregation. Padrão de design que separa a leitura e escrita de dados em diferentes modelos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dependency Injection&lt;/td&gt;
      &lt;td&gt;Injeção de Dependência. Padrão de design que permite passar dependências para um objeto em tempo de execução, melhorando a modularidade e testabilidade do código.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Docker&lt;/td&gt;
      &lt;td&gt;Plataforma para desenvolver, enviar e executar aplicativos em containers. Facilita o empacotamento de uma aplicação e suas dependências em um único objeto.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DRY&lt;/td&gt;
      &lt;td&gt;Don’t Repeat Yourself. Princípio de desenvolvimento para reduzir duplicação de código através de abstração e reutilização.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Event Sourcing&lt;/td&gt;
      &lt;td&gt;Padrão de arquitetura onde o estado de um sistema é determinado por uma sequência de eventos registrados, permitindo reconstruir o estado atual a partir do histórico de eventos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GraphQL&lt;/td&gt;
      &lt;td&gt;Linguagem de consulta e runtime para APIs. Permite aos clientes definir a estrutura de dados que precisam, facilitando consultas eficientes e flexíveis.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Idempotency&lt;/td&gt;
      &lt;td&gt;Idempotência. Propriedade de operações que podem ser aplicadas múltiplas vezes sem alterar o resultado além da primeira aplicação.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JWT&lt;/td&gt;
      &lt;td&gt;JSON Web Token. Formato compacto para transmitir informações entre partes como um objeto JSON. Usado para autenticação em APIs.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kubernetes&lt;/td&gt;
      &lt;td&gt;Sistema open-source para automatizar a implantação, o dimensionamento e a gestão de aplicativos em containers.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microservices&lt;/td&gt;
      &lt;td&gt;Microserviços. Arquitetura de software que organiza uma aplicação como um conjunto de serviços independentes, cada um focado em uma tarefa específica.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ORM&lt;/td&gt;
      &lt;td&gt;Object-Relational Mapping. Técnica de programação que mapeia objetos de um sistema orientado a objetos para representações de dados relacionais.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Round Robin&lt;/td&gt;
      &lt;td&gt;Método de balanceamento de carga que distribui requisições igualmente entre os servidores disponíveis, sem considerar o estado anterior.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Session&lt;/td&gt;
      &lt;td&gt;Sessão. Manutenção de estado entre requisições de um usuário em uma aplicação web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOLID&lt;/td&gt;
      &lt;td&gt;Princípios de design de software que promovem um código mais limpo, flexível e fácil de manter: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation e Dependency Inversion.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TDD&lt;/td&gt;
      &lt;td&gt;Test-Driven Development. Método de desenvolvimento de software onde testes automatizados são escritos antes do código de produção.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Token&lt;/td&gt;
      &lt;td&gt;Token. Pequeno pacote de dados que serve como um identificador único e seguro para autenticação e autorização.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;URL&lt;/td&gt;
      &lt;td&gt;Uniform Resource Locator. Endereço que define o local de um recurso na web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;URI&lt;/td&gt;
      &lt;td&gt;Uniform Resource Identifier. Identificador único que define o local de um recurso na web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WebSockets&lt;/td&gt;
      &lt;td&gt;Protocolo de comunicação bidirecional, full-duplex, entre um cliente e um servidor web, adequado para aplicações que requerem comunicação em tempo real.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>SRE Tips and Tricks</title>
   <link href="/2024/07/01/sre-tips-and-tricks.html"/>
   <updated>2024-07-01T00:00:00+00:00</updated>
   <id>/2024/07/01/sre-tips-and-tricks</id>
   <content type="html">&lt;h2 id=&quot;1---use-um-gerenciador-de-versões-multiple-runtime-version-manager&quot;&gt;1 - Use um Gerenciador de versões (Multiple Runtime Version Manager)&lt;/h2&gt;

&lt;p&gt;É natural precisarmos de mais de uma versão de uma ferramenta ou de uma linguagem de programação. Use um gerenciador de versões para fazer isso. Essa é pra você que, num dia, está rodando um projeto em Java 11 e, no outro, precisa de Java 22. Ou para aquele SRE que precisa alternar entre versões de Terraform e fica usando tfenv. Isso pode te ajudar nos estudos, no trabalho e também a deixar de lado aquela preguiça de ter que instalar coisas para testar um projeto ou ferramenta aleatória do GitHub. Desse jeito, fica easy e, se você faz tudo certinho, não quebra seu Linux &lt;em&gt;#confia&lt;/em&gt;. Abaixo estão boas alternativas com alguns exemplos de como fazer isso:&lt;/p&gt;

&lt;h4 id=&quot;asdf&quot;&gt;asdf&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;asdf&lt;/strong&gt;: https://asdf-vm.com/&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
asdf plugin add java
asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;java graalvm-22.3.0+java19
asdf global java graalvm-22.3.0+java19
&lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.tool-versions
java &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mise&quot;&gt;mise&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;mise&lt;/strong&gt;: https://mise.jdx.dev/&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mise use &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; ruby@3.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2---alias&quot;&gt;2 - Alias&lt;/h2&gt;

&lt;p&gt;Essa dica pode te fazer economizar um bom tempo. Alias são apelidos para outros comandos, que normalmente são grandes e/ou complexos.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ls --color=auto&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias grep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;grep --color=auto&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;docker_killall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;docker rm -f $(docker ps -aq)&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MONITOR_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;xrandr --output HDMI-1 --mode 1920x1080 --primary --left-of eDP-1 --output eDP-1 --auto&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MONITOR_JUST_HDMI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;xrandr --output HDMI-1 --mode 1920x1080 --primary --output eDP-1 --off&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MONITOR_JUST_NOTEBOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;xrandr --output HDMI-1 --off --output eDP-1 --auto&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MONITOR_NOTEBOOK_BRILHANTE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;xrandr --output eDP-1 --brightness 1.2&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEYBOARD_LOCAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;setxkbmap -model thinkpad -layout br -variant abnt2&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;clip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;xclip -selection clipboard&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WIFIPASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;echo \# cat /etc/NetworkManager/system-connections/*&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3---use-docker-kind-docker-compose-local-stack-sem-medooo-de-ser-feliz&quot;&gt;3 - Use docker, kind, docker compose, local stack SEM MEDOOO de ser feliz&lt;/h2&gt;

&lt;p&gt;Crie ambientes isolados pra realizar seus testes usando containers. Seja com docker ou podman, crie manifestos completos montando ambientes que você precisa. Dessa forma você protege seu ambiente local, além disso consegue setar diferentes versões, consegue testar aquivos de configuração e também limitar utilização de recursos computacionais.&lt;/p&gt;

&lt;h2 id=&quot;4---saiba-fazer-a-mesma-coisa-de-diferentes-formas&quot;&gt;4 - Saiba fazer a mesma coisa de diferentes formas&lt;/h2&gt;

&lt;p&gt;Yeeep, normalmente existem várias maneiras de se fazer a mesma coisa. Para uns ter um PADRÃO é tudo e eu concordo, mas não é nesse sentido que essa dica quer dizer. Eu estou falando de conseguir dansar qualquer ritmo de dança. Suponha que você precisa criar um servidor http local e você só sabe fazer usando python.. então você acaba dependendo do python. Tenha em mente que normalmente dá pra fazer de forma diferente e sabendo disso você consegue atuar em situações adversas.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mise use -g ruby@3.2
gem install webrick
ruby -run -ehttpd . -p8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tip-6-redes-de-computadores-tente-aprender-isso-em-profundidade-não-apenas-superficialmente&quot;&gt;Tip 6: Redes de Computadores, tente aprender isso em profundidade, não apenas superficialmente&lt;/h2&gt;
</content>
 </entry>
 

</feed>
