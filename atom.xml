<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>apolzek</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2024-07-09T23:09:23+00:00</updated>
 <id></id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>üö® Meu alerta √© eficaz ?</title>
   <link href="/2024/09/09/meu-alerta-e-eficaz.html"/>
   <updated>2024-09-09T00:00:00+00:00</updated>
   <id>/2024/09/09/meu-alerta-e-eficaz</id>
   <content type="html">&lt;p&gt;Eu n√£o quero te iludir, talvez voc√™ saia daqui com mais d√∫vidas do que respostas.. faz parte&lt;/p&gt;

&lt;p&gt;Vamos raciocinar.. atrav√©s de m√©tricas conseguimos ter de maneira quantificada como as coisas est√£o. Coisas podem um banco de dados, um aplica√ß√£o, uma rede de computares ou at√© uma geladeira. Antes de prosseguir √© v√°lido refor√ßar algo, alguns sistemas j√° possuem m√©tricas nativamente, outros possuem exporters(programas especializados) que conseguem extrair isso pra voc√™. Um terceiro caso √© voc√™ mesmo criar suas m√©tricas atrav√©s de instrumenta√ß√£o de c√≥digo ou t√©cnica similar. O ponto aqui √©, para criar bons alarmes voc√™ precisa de boas m√©tricas. Sem isso fica invi√°vel seguir. Assim como testes unit√°rios dos software imagine que as m√©tricas tem um coverage, ou seja, elas cobrem uma porcentagem(%) da superf√≠cie que voc√™ deseja monitorar. Mas at√© aqui tudo bem, sei que suas m√©tricas s√£o boas e suficientes.&lt;/p&gt;

&lt;p&gt;Com as m√©tricas em m√£o, voc√™ precisa montar seus alertas e aqui vem o primeiro grande desafio. Se voc√™ est√° usando prometheus ter√° que lidar com promql, se usa NewRelic ter√° que lidar com nrql e por ai vai. N√£o adianta se esconder, encare esse desfio de frente.&lt;/p&gt;

&lt;p&gt;$__rate_interval&lt;/p&gt;

&lt;p&gt;2024-07-09 16:11:08&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app_request_latency_seconds_bucket {__name__=&quot;app_request_latency_seconds_bucket&quot;, endpoint=&quot;/&quot;, instance=&quot;flask-app:5000&quot;, job=&quot;app_exporter&quot;, le=&quot;1.0&quot;, method=&quot;GET&quot;}
117
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2024-07-09 16:28:08&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app_request_latency_seconds_bucket {__name__=&quot;app_request_latency_seconds_bucket&quot;, endpoint=&quot;/&quot;, instance=&quot;flask-app:5000&quot;, job=&quot;app_exporter&quot;, le=&quot;1.0&quot;, method=&quot;GET&quot;}
318
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vamos fazer 318 - 117 / 1020 = 0,197058824&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SRE Tips and Tricks</title>
   <link href="/2024/08/11/sre-tips-and-tricks.html"/>
   <updated>2024-08-11T00:00:00+00:00</updated>
   <id>/2024/08/11/sre-tips-and-tricks</id>
   <content type="html">&lt;p&gt;asdf ou mise https://github.com/connorads/mise&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;alias&lt;/p&gt;

&lt;h1 id=&quot;alias-monitor&quot;&gt;Alias monitor&lt;/h1&gt;
&lt;p&gt;alias MONITOR_ALL=‚Äôxrandr ‚Äìoutput HDMI-1 ‚Äìmode 1920x1080 ‚Äìprimary ‚Äìleft-of eDP-1 ‚Äìoutput eDP-1 ‚Äìauto‚Äô
alias MONITOR_JUST_HDMI=‚Äôxrandr ‚Äìoutput HDMI-1 ‚Äìmode 1920x1080 ‚Äìprimary ‚Äìoutput eDP-1 ‚Äìoff‚Äô
alias MONITOR_JUST_NOTEBOOK=‚Äôxrandr ‚Äìoutput HDMI-1 ‚Äìoff ‚Äìoutput eDP-1 ‚Äìauto‚Äô
alias KEYBOARD_LOCAL=‚Äôsetxkbmap -model thinkpad -layout br -variant abnt2‚Äô
alias MONITOR_NOTEBOOK_BRILHANTE=‚Äôxrandr ‚Äìoutput eDP-1 ‚Äìbrightness 1.2‚Äô
alias clip=‚Äôxclip -selection clipboard‚Äô
alias docker_killall=‚Äôdocker rm -f $(docker ps -aq)‚Äô&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ferramentas&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;docker&lt;/li&gt;
  &lt;li&gt;kind&lt;/li&gt;
  &lt;li&gt;nix os&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Sistemas Observ√°veis - Parte 1</title>
   <link href="/2024/07/12/sistemas-observaveis-parte-1.html"/>
   <updated>2024-07-12T00:00:00+00:00</updated>
   <id>/2024/07/12/sistemas-observaveis-parte-1</id>
   <content type="html">&lt;p&gt;Antes de iniciar, responda as seguintes quest√µes mentalmente:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) √â necess√°rio ter monitoramento previamente para alcan√ßar a observabilidade?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Os dados relacionados ao neg√≥cio tamb√©m fazem parte da observabilidade?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Quais quest√µes podem ser respondidas ao se atingir o est√°gio de observabilidade em um sistema?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quando falamos de ‚Äúobservabilidade‚Äù, √© comum logo pensarmos em uma s√©rie de ferramentas e dashboards atraentes. Associamos tamb√©m esse conceito aos seus pilares, que s√£o: logs, traces e m√©tricas. Mas o que isso realmente significa? Na minha concep√ß√£o, observabilidade √© a capacidade de compreender o funcionamento de um sistema em um determinado momento, sem a necessidade de grandes esfor√ßos mentais. Isso requer uma vis√£o abrangente e profunda n√£o apenas dos componentes principais, mas tamb√©m de suas depend√™ncias. Nos √∫ltimos anos, temos visto um crescimento exponencial em tamanho e complexidade dos sistemas, o que tem impulsionado a ind√∫stria a desenvolver ferramentas avan√ßadas para esse contexto. O que voc√™ ler√° a seguir √© a opini√£o de algu√©m que j√° enfrentou os desafios de suportar produtos cr√≠ticos operando 24/7, utilizando as mais diversas solu√ß√µes de observabilidade.&lt;/p&gt;

&lt;p&gt;Inicialmente tenha em mente que o conceito de observabilidade vai al√©m de ter boas m√©tricas e ferramentas configuradas. Envolve ajudar o observador a entender o que o sistema deveria fazer e se ele de fato est√° fazendo. Por ser complexo, pode ser abordado de diferentes formas dentro das empresas. O mais comum √© trabalhar por n√≠veis, onde o topo da pir√¢mide se concentra em ver um panorama geral com informa√ß√µes mais ligadas ao neg√≥cio. √Ä medida que se desce na pir√¢mide, tem-se mais dados t√©cnicos e a vis√£o tende a se granularizar. Esse tipo de abordagem ajuda a manter diferentes times focados em analisar aquilo que √© de seu dom√≠nio t√©cnico (aplica√ß√£o, rede, banco de dados, etc.). Essa √© uma das maneiras de escalar times no ambiente organizacional com varias pessoas envolvidas em v√°rias frentes. Um dos maiores desafios aqui √© fornecer uma plataforma uniforme que atenda aos mais variados times de Engenharia.&lt;/p&gt;

&lt;p&gt;Novamente, se proponha a responder mais um questionamento: &lt;strong&gt;Por que algu√©m decidiu investir tanto para ter visibilidade de um sistema?&lt;/strong&gt; A primeira resposta que me vem √† mente √©: porque esse sistema √© importante. E aqui n√£o me entenda mal, o sistema pode ser importante tanto por sua capacidade de gerar receita quanto por seu valor ideol√≥gico; isso n√£o importa. O que importa √© que todos n√≥s estamos empenhados em garantir uma boa experi√™ncia para o usu√°rio final. Em determinados momentos, isso pode ser mais valioso do que o pr√≥prio dinheiro. Assim, investimos recursos porque sabemos que os erros inevitavelmente ocorrer√£o e queremos estar preparados de diversas formas para minimiz√°-los ou corrigi-los rapidamente. Como usu√°rios finais, somos extremamente exigentes.&lt;/p&gt;

&lt;p&gt;Sistemas computacionais tendem a ser complexos por natureza, pois s√£o constru√≠dos sobre uma pilha de abstra√ß√µes que presumimos estar funcionando corretamente. Se voc√™ √© um programador, engenheiro de software ou algo do tipo, sabe que existe v√°rias formas de se construir a mesma coisa. Al√©m disso, h√° as depend√™ncias, como sistemas de banco de dados, sistemas de mensageria, caches e outros. Temos tamb√©m a parte de comunica√ß√£o, que pode envolver redes de computadores usando diferentes protocolos(pilhas). Nosso objetivo ent√£o √© ter detalhes sobre todas as partes. Isso permite que saiamos do campo da especula√ß√£o e entremos no do determinismo. Aqui, o futuro √© considerado fixo e definido com base no estado atual e nas leis naturais que governam o universo. Na pr√°tica significa que se o throughput de uma API est√° aumentando, mais chamadas laterais podem acontecer, resultando em um alto consumo de banda e maior uso do banco de dados. Nesse sentido, √© importante lembrar que se o sistema foi mal desenhado ou se seus subsistemas carregam d√©bitos t√©cnicos a observabilidade vai te ajudar a identificar esses problemas rapidamente.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Quem avisa amigo √©. Cuidado para n√£o tratar apenas um problema que √© reflexo de um problema maior. O efeito cascata √© comum em arquiteturas complexas e encontrar a causa raiz costuma  ser dif√≠cil! Vamos seguido..&lt;/p&gt;

&lt;p&gt;Normalmente o que consguimos ter dos sistemas s√£o logs, traces, m√©tricas e eventos. Existem v√°rias ferramentas no mercado para lidar com isso tais como: Prometheus, Grafana, Elasticsearch, Logstash, Kibana, Splunk, New Relic, Datadog, Jaeger, Zipkin, Dynatrace, Honeycomb, AppDynamics, Sentry, Fluentd, Nagios, Zabbix, VictoriaMetrics, Thanos, OpenTelemetry e Graylog. Essa lista √© apenas uma pequena amostra, pois h√° muitas outras ferramentas dispon√≠veis. Quero destacar tr√™s das ferramentas supracitadas e fazer uma breve tangente: &lt;strong&gt;Dynatrace, New Relic e Datadog&lt;/strong&gt;. Em todos os lugares em que trabalhei, pelo menos uma dessas tr√™s empresas estava presente. O mais intrigante √© que todas elas enfrentaram o mesmo problema: &lt;strong&gt;custo em ascens√£o acelerado(custo por m√™s)&lt;/strong&gt;. Contudo, meu objetivo aqui n√£o √© critica-las nem mesmo suas solu√ß√µes de mercado, mas, em aprender com os seus modelos de neg√≥cios e no que eles implicam.&lt;/p&gt;

&lt;p&gt;Essas empresas normalmente enfrentam tr√™s desafios principais. O primeiro est√° relacionado √† pr√≥pria observabilidade, ou seja, como extrair dados relevantes de sistemas complexos da forma mais abstrata poss√≠vel para seus clientes. O segundo √© como fornecer visualiza√ß√µes r√°pidas, elegantes e confi√°veis, lembrando que cada cliente ter√° necessidades espec√≠ficas. O terceiro desafio est√° relacionado ao modelo de neg√≥cio mencionado anteriormente e diz respeito a como essas empresas lidam com a &lt;strong&gt;grande quantidade de dados&lt;/strong&gt; extra√≠dos. A verdade √© que crescer √© um processo natural e, se voc√™ n√£o tiver um bom planejamento, vai precisar de uma boa quantia de dinheiro. Seja porque sua volumetria aumentou, novos sistemas surgiram ou sua configura√ß√£o de verbosidade n√£o est√° das melhores. No final, esteja preparado para pagar o pre√ßo. Dentre as perguntas que voc√™ se prop√¥s a responder at√© agora, aqui entra a primeira diretamente relacionada a uma grande decis√£o de um projeto de observabilidade: &lt;strong&gt;pagar mais caro e delegar ou tentar economizar abra√ßando a complexidade t√©cnica?&lt;/strong&gt; Eu n√£o posso responder essa pergunta e voc√™ sabe muito bem disso.&lt;/p&gt;

&lt;p&gt;Saindo do assunto dinheiro, um movimento que tenho percebido nos √∫ltimos anos √© a aten√ß√£o √† observabilidade logo no in√≠cio dos projetos, assim como aconteceu com seguran√ßa ap√≥s d√©cadas de perdas financeiras e vazamentos de dados. As pessoas sabem que precisam ter visibilidade de seus sistemas no dia um(bem como eles precisam estar seguros) e hoje grandes projetos de software (open source ou n√£o) normalmente possuem bons logs e boas m√©tricas(&lt;em&gt;/metrics&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;A pessoa respons√°vel por buscar observabilidade geralmente come√ßa pesquisando as op√ß√µes dispon√≠veis para a stack utilizada no projeto ou na empresa. Inicialmente, encontra solu√ß√µes robustas, por√©m pagas. Em seguida, inevitavelmente descobre solu√ß√µes maduras de mercado, como Prometheus, Grafana e OpenTelemetry. Normalmente, a escolha √© feita rapidamente, mas existem muitas quest√µes importantes que tamb√©m devem ser respondidas. Se essas quest√µes forem ignoradas, √© apenas uma quest√£o de tempo at√© que surjam problemas.&lt;/p&gt;

&lt;p&gt;Definir padr√µes, fazer previs√µes de armazenamento, selecionar e manter ferramentas, estabelecer m√©tricas relevantes, configurar rastreamento distribu√≠do, compreender as depend√™ncias do sistema, lidar com sistemas ass√≠ncronos e diferentes tecnologias s√£o apenas a ponta do iceberg dos desafios que est√£o por vir.&lt;/p&gt;

&lt;p&gt;Vamos refletir. Talvez a parte &lt;strong&gt;core&lt;/strong&gt; do seu sistema esteja funcionando normalmente, mas o servi√ßo de autentica√ß√£o esteja fora do ar. Seus usu√°rios n√£o conseguem fazer login. Isso √© suficiente para colocar seu SLA em risco a cada minuto de indisponibilidade. Nesse caso, voc√™ deve esperar que algum alarme seja disparado. Caso contr√°rio, depender√° da boa vontade de um engenheiro de confiabilidade abrir o dashboard ou, pior ainda, de uma onda de reclama√ß√µes no seu canal de atendimento.&lt;/p&gt;

&lt;p&gt;O cen√°rio hipot√©tico acima ressalta a import√¢ncia fundamental de um engenheiro competente. As mentes h√°beis selecionar√£o as ferramentas adequadas, que se assemelham a uma terra f√©rtil para o plantio. Estas auxiliar√£o na gera√ß√£o, captura e armazenamento de dados sobre os sistemas. Posteriormente, o mesmo engenheiro h√°bil os correlacionar√° de modo a representarem aspectos significativos do neg√≥cio. A agrega√ß√£o desses dados, apresentada de forma simplificada, proporciona uma vis√£o compreens√≠vel mesmo para aqueles que n√£o compartilham da mesma vis√£o hol√≠stica. Em s√≠ntese, algu√©m pensar√° de antem√£o para que os subsequentes n√£o precisem faz√™-lo. Trata-se de um projeto de melhoria cont√≠nua que jamais se encerra. O reflexo disso √© ter dados bons o suficiente para montar alarmes eficazes que v√£o ajudar a responder a incidentes de maneira r√°pida. Repita esse fluxo v√°rias vezes, pois observabilidade est√° mais para um processo cont√≠nuo do que um estado final.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Tip Dicion√°rio do SRE</title>
   <link href="/2024/07/08/tips-dicionario-do-sre.html"/>
   <updated>2024-07-08T00:00:00+00:00</updated>
   <id>/2024/07/08/tips-dicionario-do-sre</id>
   <content type="html">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Termo&lt;/th&gt;
      &lt;th&gt;Defini√ß√£o&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;API&lt;/td&gt;
      &lt;td&gt;Interface de Programa√ß√£o de Aplica√ß√µes. Um conjunto de rotinas e padr√µes para utiliza√ß√£o de funcionalidades por aplicativos externos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A/B Testing&lt;/td&gt;
      &lt;td&gt;Teste A/B. M√©todo estat√≠stico para comparar duas vers√µes de um aplicativo ou p√°gina web para determinar qual √© mais eficaz.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Basic Authentication&lt;/td&gt;
      &lt;td&gt;Autentica√ß√£o B√°sica. M√©todo simples de autentica√ß√£o HTTP usando usu√°rio e senha codificados em base64.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clean Code&lt;/td&gt;
      &lt;td&gt;C√≥digo Limpo. Princ√≠pios e pr√°ticas para escrever c√≥digo leg√≠vel, modular e de f√°cil manuten√ß√£o.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cookie&lt;/td&gt;
      &lt;td&gt;Pequeno arquivo enviado pelo servidor e armazenado localmente no navegador, usado para gerenciar sess√µes e autentica√ß√£o.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CQRS&lt;/td&gt;
      &lt;td&gt;Command Query Responsibility Segregation. Padr√£o de design que separa a leitura e escrita de dados em diferentes modelos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dependency Injection&lt;/td&gt;
      &lt;td&gt;Inje√ß√£o de Depend√™ncia. Padr√£o de design que permite passar depend√™ncias para um objeto em tempo de execu√ß√£o, melhorando a modularidade e testabilidade do c√≥digo.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Docker&lt;/td&gt;
      &lt;td&gt;Plataforma para desenvolver, enviar e executar aplicativos em containers. Facilita o empacotamento de uma aplica√ß√£o e suas depend√™ncias em um √∫nico objeto.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DRY&lt;/td&gt;
      &lt;td&gt;Don‚Äôt Repeat Yourself. Princ√≠pio de desenvolvimento para reduzir duplica√ß√£o de c√≥digo atrav√©s de abstra√ß√£o e reutiliza√ß√£o.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Event Sourcing&lt;/td&gt;
      &lt;td&gt;Padr√£o de arquitetura onde o estado de um sistema √© determinado por uma sequ√™ncia de eventos registrados, permitindo reconstruir o estado atual a partir do hist√≥rico de eventos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GraphQL&lt;/td&gt;
      &lt;td&gt;Linguagem de consulta e runtime para APIs. Permite aos clientes definir a estrutura de dados que precisam, facilitando consultas eficientes e flex√≠veis.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Idempotency&lt;/td&gt;
      &lt;td&gt;Idempot√™ncia. Propriedade de opera√ß√µes que podem ser aplicadas m√∫ltiplas vezes sem alterar o resultado al√©m da primeira aplica√ß√£o.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JWT&lt;/td&gt;
      &lt;td&gt;JSON Web Token. Formato compacto para transmitir informa√ß√µes entre partes como um objeto JSON. Usado para autentica√ß√£o em APIs.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kubernetes&lt;/td&gt;
      &lt;td&gt;Sistema open-source para automatizar a implanta√ß√£o, o dimensionamento e a gest√£o de aplicativos em containers.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microservices&lt;/td&gt;
      &lt;td&gt;Microservi√ßos. Arquitetura de software que organiza uma aplica√ß√£o como um conjunto de servi√ßos independentes, cada um focado em uma tarefa espec√≠fica.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ORM&lt;/td&gt;
      &lt;td&gt;Object-Relational Mapping. T√©cnica de programa√ß√£o que mapeia objetos de um sistema orientado a objetos para representa√ß√µes de dados relacionais.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Round Robin&lt;/td&gt;
      &lt;td&gt;M√©todo de balanceamento de carga que distribui requisi√ß√µes igualmente entre os servidores dispon√≠veis, sem considerar o estado anterior.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Session&lt;/td&gt;
      &lt;td&gt;Sess√£o. Manuten√ß√£o de estado entre requisi√ß√µes de um usu√°rio em uma aplica√ß√£o web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SOLID&lt;/td&gt;
      &lt;td&gt;Princ√≠pios de design de software que promovem um c√≥digo mais limpo, flex√≠vel e f√°cil de manter: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation e Dependency Inversion.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TDD&lt;/td&gt;
      &lt;td&gt;Test-Driven Development. M√©todo de desenvolvimento de software onde testes automatizados s√£o escritos antes do c√≥digo de produ√ß√£o.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Token&lt;/td&gt;
      &lt;td&gt;Token. Pequeno pacote de dados que serve como um identificador √∫nico e seguro para autentica√ß√£o e autoriza√ß√£o.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;URL&lt;/td&gt;
      &lt;td&gt;Uniform Resource Locator. Endere√ßo que define o local de um recurso na web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;URI&lt;/td&gt;
      &lt;td&gt;Uniform Resource Identifier. Identificador √∫nico que define o local de um recurso na web.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WebSockets&lt;/td&gt;
      &lt;td&gt;Protocolo de comunica√ß√£o bidirecional, full-duplex, entre um cliente e um servidor web, adequado para aplica√ß√µes que requerem comunica√ß√£o em tempo real.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 

</feed>
