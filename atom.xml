<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>apolzek</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2024-10-13T19:15:09+00:00</updated>
 <id></id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>AWS IAM</title>
   <link href="/2025/10/10/aws-iam.html"/>
   <updated>2025-10-10T00:00:00+00:00</updated>
   <id>/2025/10/10/aws-iam</id>
   <content type="html">&lt;h2 id=&quot;iam-overview&quot;&gt;IAM Overview&lt;/h2&gt;

&lt;p&gt;AWS Identity and Access Management (IAM) is a crucial service within Amazon Web Services (AWS) that helps organizations securely manage access to their cloud resources. Effective access management is vital for maintaining security and operational efficiency, especially in production environments where misconfigurations can lead to vulnerabilities.&lt;/p&gt;

&lt;h3 id=&quot;iam-users-groups-and-roles&quot;&gt;IAM Users, Groups, and Roles&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IAM Users&lt;/strong&gt;: These are individual identities within AWS, typically representing people or applications. Each user has specific credentials, such as access keys for programmatic access or passwords for the AWS Management Console. Users are granted permissions tailored to their roles—for instance, a developer may access AWS Lambda and S3, while an application user might only need API Gateway access.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IAM Groups&lt;/strong&gt;: Groups are collections of IAM users that share the same permissions. By assigning permissions to a group rather than individual users, organizations can simplify permission management, especially in larger teams. For example, a “Developers” group can be assigned permissions to deploy code, ensuring efficient access control.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IAM Roles&lt;/strong&gt;: Roles are temporary identities that can be assumed by users or services. Unlike IAM users, roles do not have long-term credentials. They provide temporary security credentials, making them ideal for scenarios like allowing EC2 instances to access S3 without hardcoding credentials. Roles are also useful for cross-account access, enhancing security by limiting the exposure of long-term credentials.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;best-practices-for-iam&quot;&gt;Best Practices for IAM&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Principle of Least Privilege&lt;/strong&gt;: Grant users only the permissions they need to perform their tasks, reducing the risk of accidental or malicious misuse.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid Using Root Account&lt;/strong&gt;: The root account has unrestricted access and should be reserved for specific administrative tasks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implement Multi-Factor Authentication (MFA)&lt;/strong&gt;: MFA adds an extra layer of security, requiring users to verify their identity with a second factor, like a mobile device.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Regular Audits and Monitoring&lt;/strong&gt;: Utilize tools like AWS CloudTrail to track who accesses what resources, helping to identify excessive permissions and unusual activity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By following these best practices, organizations can create a secure and efficient environment in AWS.&lt;/p&gt;

&lt;h2 id=&quot;advanced-iam-concepts&quot;&gt;Advanced IAM Concepts&lt;/h2&gt;

&lt;p&gt;As organizations grow their use of AWS, managing permissions becomes more complex. Advanced features such as &lt;strong&gt;Permission Boundaries&lt;/strong&gt; and &lt;strong&gt;Service Control Policies (SCPs)&lt;/strong&gt; are essential for maintaining security in larger, multi-account setups.&lt;/p&gt;

&lt;h3 id=&quot;permission-boundaries&quot;&gt;Permission Boundaries&lt;/h3&gt;

&lt;p&gt;Permission Boundaries define the maximum permissions that IAM users or roles can have. They act as guardrails to prevent users from granting themselves excessive permissions. For instance, a DevOps team might be allowed to create new IAM roles but restricted from managing critical infrastructure.&lt;/p&gt;

&lt;h3 id=&quot;service-control-policies-scps&quot;&gt;Service Control Policies (SCPs)&lt;/h3&gt;

&lt;p&gt;SCPs work within AWS Organizations to control access across multiple accounts. They don’t grant permissions themselves but set the maximum allowable permissions in an account. SCPs are particularly useful for enforcing security policies, like restricting access to certain AWS regions or preventing risky actions across accounts.&lt;/p&gt;

&lt;h3 id=&quot;advanced-iam-security-practices&quot;&gt;Advanced IAM Security Practices&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;IAM Policy Conditions&lt;/strong&gt;: These allow for fine-tuning permissions based on attributes like IP addresses or specific time frames.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IAM Access Analyzer&lt;/strong&gt;: This tool helps identify publicly shared resources or access to external accounts, highlighting potential security risks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MFA Enforcement&lt;/strong&gt;: Require users, especially those with privileged roles, to authenticate using MFA for sensitive actions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;AWS IAM offers a comprehensive set of tools for managing permissions in cloud environments. As organizations scale, leveraging advanced features like Permission Boundaries and SCPs becomes crucial for maintaining security and compliance. By implementing best practices and advanced techniques, organizations can effectively mitigate risks and ensure a robust security posture in their AWS environments.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>shortcuts</title>
   <link href="/2025/10/09/shortcuts.html"/>
   <updated>2025-10-09T00:00:00+00:00</updated>
   <id>/2025/10/09/shortcuts</id>
   <content type="html">&lt;h2 id=&quot;vim&quot;&gt;VIM&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Shortcut&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Enter insert mode at cursor position.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Enter insert mode at the beginning of the current line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Enter insert mode after the cursor position.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Enter insert mode at the end of the current line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Open a new line below and enter insert mode.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Open a new line above and enter insert mode.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:w&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Save (write) the current file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Quit Vim.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Save and quit.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q!&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Quit without saving.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Undo the last change.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + r&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Redo the last undone change.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yy&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Yank (copy) the entire current line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Paste the yanked text after the cursor.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Paste the yanked text before the cursor.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Delete (cut) the entire current line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dw&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Delete (cut) from the cursor to the end of the current word.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d$&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Delete (cut) from the cursor to the end of the line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Delete (cut) the character under the cursor.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replace the character under the cursor with a new one.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Enter visual mode (text selection).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Enter visual line mode (select entire lines).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + v&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Enter visual block mode (select rectangular blocks of text).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:s/foo/bar/g&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replace all occurrences of “foo” with “bar” in the current line.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%s/foo/bar/g&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Replace all occurrences of “foo” with “bar” in the entire file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pattern&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Search for a pattern in the file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Jump to the next occurrence of the search pattern.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Jump to the previous occurrence of the search pattern.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gg&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Go to the beginning of the file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Go to the end of the file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:e filename&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Open a new file named “filename”.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bd&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Close the current buffer (file).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + o&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Go to the last cursor position.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + i&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Go forward to the next cursor position.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + z&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Suspend Vim (send to background in terminal).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;J&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Join the current line with the line below it.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Repeat the last command.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Jump to the matching pair (e.g., parentheses, brackets).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:!command&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Run a shell command from within Vim.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + f&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Scroll one page forward.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + b&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Scroll one page backward.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + u&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Scroll half a page up.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + d&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Scroll half a page down.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Move the cursor to the top of the screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Move the cursor to the middle of the screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Move the cursor to the bottom of the screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:help&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Open Vim’s help documentation.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>🛠️ SRE Kit for the End of the World</title>
   <link href="/2025/09/29/sre-kit-for-the-end-of-the-world.html"/>
   <updated>2025-09-29T00:00:00+00:00</updated>
   <id>/2025/09/29/sre-kit-for-the-end-of-the-world</id>
   <content type="html">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Tool&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ping&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Sends ICMP echo requests to a network host to test connectivity and latency. Useful for checking if a host is reachable.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;traceroute&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Traces the path packets take to a destination, identifying network hops and where delays or packet losses occur.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;netstat&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Displays network connections, routing tables, and interface statistics. Helpful for diagnosing network issues and checking active connections.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ss&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A modern alternative to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netstat&lt;/code&gt;, used for displaying more detailed socket and network connection information.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;tcpdump&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Captures network traffic for analysis. Useful for diagnosing low-level network issues and packet inspection.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;dig&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Queries DNS servers for domain information, such as IP addresses. Helpful for diagnosing DNS resolution issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;nslookup&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig&lt;/code&gt;, used for querying DNS information. Useful for simple DNS queries and debugging domain resolution issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;top&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Displays real-time information about system processes, CPU, and memory usage. Useful for identifying resource-hungry processes.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;htop&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;An improved version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top&lt;/code&gt; with an interactive, user-friendly interface. Useful for visualizing system resource usage.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;iostat&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Reports CPU and I/O statistics for devices. Useful for diagnosing disk I/O performance issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;vmstat&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Reports virtual memory statistics, including processes, memory, paging, and CPU usage. Useful for spotting memory bottlenecks.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;df&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Displays disk space usage for file systems. Useful for checking if any file system is running out of space.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;du&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Summarizes disk usage of files and directories. Useful for identifying large files or directories consuming disk space.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;free&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Shows the amount of free and used memory in the system. Useful for diagnosing memory availability issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;lsof&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Lists open files and network connections. Useful for identifying which processes have specific files or sockets open.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;strace&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Traces system calls made by a process. Useful for debugging issues where a program is failing due to system calls.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;dstat&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Combines system resource statistics in real-time (disk, network, CPU, memory). Useful for holistic system performance monitoring.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;systemctl&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Manages system services on Linux. Useful for starting, stopping, or checking the status of services and troubleshooting service issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;journalctl&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Queries and displays system logs from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt;. Useful for troubleshooting service issues, crashes, and other system events.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ps&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Lists running processes. Useful for investigating which processes are running, hung, or consuming too many resources.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;grep&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Searches for patterns within text. Useful for filtering logs or command output for specific keywords or patterns.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;awk&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A powerful text processing tool used for extracting and transforming data from files or input streams.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;sed&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Stream editor for filtering and transforming text. Often used to edit configuration files or command outputs in scripts.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;curl&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Transfers data to or from a server using various protocols (HTTP, FTP). Useful for testing API endpoints or downloading files.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;wget&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Retrieves files from web servers. Can be used for downloading files or mirroring websites.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ip&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Configures network interfaces and displays network configuration. Replaces older &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; for advanced network diagnostics.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;hostnamectl&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Controls and configures system hostname and related settings. Useful for managing the system identity over the network.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;uptime&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Displays how long the system has been running along with the system load average. Useful for diagnosing system stability issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;nc (netcat)&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A versatile networking tool for reading, writing, and redirecting data over TCP/IP networks. Useful for debugging connectivity issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;arp&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Displays or manipulates the ARP (Address Resolution Protocol) table. Useful for diagnosing issues with IP to MAC address resolution.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;iptraf-ng&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A real-time network monitoring utility that provides detailed statistics about network traffic. Useful for diagnosing traffic issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;iftop&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Displays bandwidth usage on an interface by host. Useful for identifying bandwidth-intensive connections.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;mtr&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Combines the functionality of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traceroute&lt;/code&gt; in a single tool, continuously analyzing the network route. Useful for long-term network diagnostics.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;whois&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Queries the WHOIS database for domain information such as ownership, expiration, and registrar data. Useful for domain-related troubleshooting.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;sar&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Collects, reports, and saves system activity information, including CPU, memory, I/O, and network statistics. Useful for long-term performance analysis.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;perf&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Performance analysis tool for Linux that measures CPU and system performance metrics. Useful for in-depth performance troubleshooting.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;nmap&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A network scanning tool that discovers devices and services on a network. Useful for security audits and network diagnostics.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ipmitool&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Allows management and monitoring of hardware devices using IPMI. Useful for hardware troubleshooting and server health monitoring.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;sshd&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Secure Shell (SSH) daemon for remote system management. Useful for securely accessing systems to troubleshoot remotely.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;rkhunter&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Scans for rootkits and security vulnerabilities. Useful for identifying security breaches or malware.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;rsync&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Efficiently synchronizes files between systems over a network. Useful for backups, data migration, or troubleshooting file transfer issues.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ethtool&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Displays and modifies network interface card (NIC) settings. Useful for diagnosing or tuning network performance issues at the hardware level.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title>SRE interview questions</title>
   <link href="/2024/10/13/sre-interview-questions.html"/>
   <updated>2024-10-13T00:00:00+00:00</updated>
   <id>/2024/10/13/sre-interview-questions</id>
   <content type="html">&lt;h2 id=&quot;sre-interview-questions&quot;&gt;SRE interview questions&lt;/h2&gt;
</content>
 </entry>
 
 <entry>
   <title>💡 l0calh0t Startup - day 2</title>
   <link href="/2024/10/10/l0calh0t-startup-day2.html"/>
   <updated>2024-10-10T00:00:00+00:00</updated>
   <id>/2024/10/10/l0calh0t-startup-day2</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>The distance between &quot;getting started&quot; and &quot;production ready&quot;</title>
   <link href="/2024/10/10/getting-started-x-production-ready.html"/>
   <updated>2024-10-10T00:00:00+00:00</updated>
   <id>/2024/10/10/getting-started-x-production-ready</id>
   <content type="html">&lt;h1 id=&quot;the-distance-between-getting-started-and-production-ready&quot;&gt;The distance between “getting started” and “production ready”&lt;/h1&gt;
</content>
 </entry>
 
 <entry>
   <title>🪄 Spells for Linux Shell</title>
   <link href="/2024/09/29/spells-for-linux-shell.html"/>
   <updated>2024-09-29T00:00:00+00:00</updated>
   <id>/2024/09/29/spells-for-linux-shell</id>
   <content type="html">&lt;h2 id=&quot;-spells-for-linux-shell&quot;&gt;🪄 Spells for Linux Shell&lt;/h2&gt;

&lt;h3 id=&quot;1-looping-command-x-script&quot;&gt;1. LOOPING: command x script&lt;/h3&gt;

&lt;h4 id=&quot;command&quot;&gt;command&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-le&lt;/span&gt; 5 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;count++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;script&quot;&gt;script&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Counting to 5 with a for loop:&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Counting to 5 with a while loop:&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-le&lt;/span&gt; 5 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;count++&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-signals&quot;&gt;2. signals&lt;/h3&gt;

&lt;p&gt;Some scenarios that make sense to deal with signals..&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cleaning Temporary Files&lt;/li&gt;
  &lt;li&gt;Graceful Interruption of Services&lt;/li&gt;
  &lt;li&gt;Avoiding Database Corruption&lt;/li&gt;
  &lt;li&gt;Releasing Network or Hardware Resources&lt;/li&gt;
  &lt;li&gt;Maintaining Consistent Variable State-&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;sigint&quot;&gt;SIGINT&lt;/h4&gt;
&lt;p&gt;This script creates a temporary file and displays a goodbye message when it receives a SIGINT signal (e.g., when the user presses Ctrl+C).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Function that will be called when the script receives the SIGINT signal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;exitMsg &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;you sent a signal to end, byby !!&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# command here&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Sets up the trap to call the cleanup function when the script receives SIGINT&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;exitMsg SIGINT

&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;5

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Creating a temporary file...&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; /tmp/apolzek &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1  &lt;span class=&quot;c&quot;&gt;# Creates a temporary file or exits with an error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;sigterm&quot;&gt;SIGTERM&lt;/h4&gt;
&lt;p&gt;This script starts a web server that runs indefinitely and shuts down gracefully when it receives a SIGTERM signal. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Function called upon receiving SIGTERM&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;terminateMsg &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Received SIGTERM, shutting down the server gracefully...&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Here you can add commands to close connections or save the state&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Sets up the trap for SIGTERM&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;terminateMsg SIGTERM

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting web server...&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Server is running... (PID: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;2  &lt;span class=&quot;c&quot;&gt;# Simulates the server&apos;s running time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;sighub&quot;&gt;SIGHUB&lt;/h4&gt;
&lt;p&gt;This script starts a daemon that runs indefinitely and reloads its configuration when it receives a SIGHUP signal. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -HUP &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Function called upon receiving SIGHUP&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;reloadMsg &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Received SIGHUP, reloading configuration...&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Here you can add commands to reload the configurations&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Example: source /etc/mydaemon/config.conf&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Sets up the trap for SIGHUP&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;reloadMsg SIGHUP

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting my daemon...&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Daemon is running... (PID: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;5  &lt;span class=&quot;c&quot;&gt;# Simulates the daemon&apos;s running time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-background-processes&quot;&gt;3. background processes&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting background processes...&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Process 1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;3 &amp;amp;  &lt;span class=&quot;c&quot;&gt;# This simulates a long-running task&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pid1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Get the process ID of process 1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Process 2&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;9 &amp;amp;  &lt;span class=&quot;c&quot;&gt;# This simulates a shorter task&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pid2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Get the process ID of process 2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Wait for process 1 to finish and notify&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pid1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Process 1 has completed.&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Wait for process 2 to finish and notify&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pid2&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Process 2 has completed.&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;All processes have finished.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-debugging&quot;&gt;4. debugging&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Enable debugging mode&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting the script...&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Doing something...&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ending the script.&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x  &lt;span class=&quot;c&quot;&gt;# Disable debugging mode&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;now debugging mode is disable&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;did you understand ?&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Kafka on Kubernetes using Kind</title>
   <link href="/2024/09/29/kafka-on-kubernetes-using-kind.html"/>
   <updated>2024-09-29T00:00:00+00:00</updated>
   <id>/2024/09/29/kafka-on-kubernetes-using-kind</id>
   <content type="html">&lt;h2 id=&quot;kafka-on-kubernetes-using-kind&quot;&gt;Kafka on Kubernetes using Kind&lt;/h2&gt;

&lt;p&gt;Recently, I came across an article on Medium that explains how to set up a local environment with Kafka in a test folder, using the Kubernetes StatefulSet concept. I decided to bring it to my blog, adding some tips and additional information. Although my knowledge of Kafka is still basic, I already have a few applications in production using this tool — and it’s amazing how well they perform. I was also responsible for creating a solution using Kafka Connect, Kafka, and CDC for the Boleto product.&lt;/p&gt;

&lt;p&gt;What follows is a simple and easy way to set up a local development environment with Kafka. I’ll also provide a brief introduction to Kafka and explain how you can use this solution in your projects. It’s important to note that this article is not a “How to run Kafka in production” guide, so keep that in mind. I may also add a Kafka command cheatsheet to make my life easier in the future.&lt;/p&gt;

&lt;p&gt;If you’re not familiar with Kind, it’s an easy way to run Kubernetes locally. With Kind, you can use specific Kubernetes versions, configure the network to expose the API server or ports to the host, upload images, and do many other things. Simply install Docker or Podman first, and then install Kind. It’s a straightforward and easy process.&lt;/p&gt;

&lt;p&gt;1) Create kind configuration&lt;/p&gt;

&lt;p&gt;&lt;em&gt;kind-config.yaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kind.x-k8s.io/v1alpha4&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Cluster&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;control-plane&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;extraPortMappings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30092&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30092&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listenAddress&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Optional, defaults to &quot;0.0.0.0&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tcp&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Optional, defaults to tcp&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;worker&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;worker&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;worker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) Create a kind cluster&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kind create cluster &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; kind-config.yaml &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; my-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3) Create kafka StatefulSet and Namespace&lt;/p&gt;

&lt;p&gt;&lt;em&gt;kafka.yaml&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Namespace&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;StatefulSet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-app&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-svc&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-container&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;doughgle/kafka-kraft&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9092&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9093&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;REPLICAS&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&apos;&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SERVICE&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-svc&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NAMESPACE&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SHARE_DIR&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/mnt/kafka&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CLUSTER_ID&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bXktY2x1c3Rlci0xMjM0NQ==&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEFAULT_REPLICATION_FACTOR&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&apos;&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEFAULT_MIN_INSYNC_REPLICAS&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&apos;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/mnt/kafka&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;volumeClaimTemplates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;accessModes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ReadWriteOnce&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1Gi&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-svc&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-app&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9092&apos;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9092&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9092&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30092&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka-app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4) Create a topic&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; kafka-0 &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kafka &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; bash
kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; my-topic &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka-svc:9092
kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; my-topic &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka-svc:9092
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5) Produce and consume message&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; kafka-1 &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kafka &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; bash
kafka-console-producer.sh  &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka-svc:9092 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; my-topic
kafka-console-consumer.sh &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka-svc:9092 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; my-topic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6) Delete topic&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; my-topic &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka-svc:9092
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kafka-kraft-x-kafka-with-zookeeper&quot;&gt;Kafka KRaft x Kafka with ZooKeeper&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Kafka KRaft Installation&lt;/strong&gt;: KRaft is Kafka’s new built-in consensus mechanism that eliminates the need for ZooKeeper. In a KRaft-based installation, Kafka brokers manage metadata and leader election directly, which simplifies the architecture by reducing dependencies. KRaft is becoming the default option in newer Kafka versions because it provides better scalability, faster failover, and an overall more streamlined operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kafka with ZooKeeper&lt;/strong&gt;: In traditional Kafka deployments, ZooKeeper is used to manage the cluster’s metadata, such as broker details and topic configurations. ZooKeeper handles tasks like leader election and tracking which brokers are active. While this setup has been robust for years, it adds complexity by requiring an additional service (ZooKeeper) that must be installed, managed, and maintained alongside Kafka.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>📦 Containers Mastery</title>
   <link href="/2024/09/28/containers-mastery.html"/>
   <updated>2024-09-28T00:00:00+00:00</updated>
   <id>/2024/09/28/containers-mastery</id>
   <content type="html">&lt;h2 id=&quot;what-is-linux-container-&quot;&gt;What is Linux container ?&lt;/h2&gt;

&lt;p&gt;A Linux container is a lightweight and portable unit that encapsulates an application and its dependencies. Containers utilize key Linux kernel features for process isolation and resource management, including namespaces (for isolating resources like PID, network, and filesystem) and control groups (cgroups) (for limiting and prioritizing resource usage). Additionally, union file systems enable efficient layering and storage of container images. Together, these features allow containers to operate efficiently and securely on a shared host. Basically a container image is composed of&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dependencies  + Application code + Container configuration + Base image&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;container-runtime&quot;&gt;Container runtime&lt;/h2&gt;

&lt;p&gt;A container runtime is a software component that is responsible for running and managing containers.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;containerd&lt;/li&gt;
  &lt;li&gt;CRI-O&lt;/li&gt;
  &lt;li&gt;runc&lt;/li&gt;
  &lt;li&gt;Podman&lt;/li&gt;
  &lt;li&gt;LXC/LXD&lt;/li&gt;
  &lt;li&gt;systemd-nspawn (Don’t be angry with me)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dont-compare-docker-with-kubernetes&quot;&gt;Don’t compare Docker with Kubernetes&lt;/h2&gt;

&lt;p&gt;It just doesn’t make sense.. comparing Docker and Kubernetes can be confusing for beginners because they serve different purposes: Docker implements the concept of containers, while Kubernetes orchestrates those containers. An analogy is comparing a car (Docker) to a traffic system (Kubernetes); the car allows you to drive (create and run containers), while the traffic system manages the flow of multiple cars (orchestrates the deployment and scaling of containers). This distinction is crucial, as it clarifies that Docker focuses on the containerization process itself, while Kubernetes handles the management of containerized applications at scale.&lt;/p&gt;

&lt;h2 id=&quot;container-security&quot;&gt;Container Security&lt;/h2&gt;

&lt;p&gt;Having secure base images for containers is crucial for maintaining the overall security of the host system. Images without elevated privileges help minimize potential attack vectors, reducing the risk of container escape and unauthorized access to the host. While concerns about insecure images are valid, it’s important to note that this is not the worst-case scenario, as containers typically run in a private network. For an attacker to exploit these vulnerabilities significantly, they would need to compromise additional components of the infrastructure, making it a more complex attack path. Therefore, while secure base images are essential, the overall security posture can still be robust with proper network isolation and access controls in place.&lt;/p&gt;

&lt;p&gt;Now, talking about the application code that is inside the container.. SAST (Static Application Security Testing) and SCA (Software Composition Analysis) are essential complementary approaches for ensuring application security. While SAST analyzes the source code for vulnerabilities before execution, SCA focuses on third-party libraries and dependencies, checking for known flaws. Integrating both practices is crucial, as it allows for the identification of internal code issues and external risks associated with software components. Tools like SonarQube and Fortify for SAST, and Black Duck and Snyk for SCA, provide robust solutions to mitigate vulnerabilities, offering more comprehensive security throughout the software development lifecycle.&lt;/p&gt;

&lt;p&gt;In summary, ensure that you use secure base images that prevent vulnerabilities and do not allow root access. Conduct thorough security testing and utilize a scanning tool with an up-to-date CVE database. Keep your images minimal, as even a simple curl command can be exploited by skilled attackers. Implement read-only filesystems to enhance security and adopt practices that make updating images simple and efficient.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quay&lt;/li&gt;
  &lt;li&gt;trivy&lt;/li&gt;
  &lt;li&gt;Docker Desktop (Docker Scout) Vulnerability Scan&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;container-registry&quot;&gt;Container registry&lt;/h2&gt;

&lt;p&gt;A container registry is a centralized repository where container images are stored, managed, and distributed. Examples of usage include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker Hub&lt;/li&gt;
  &lt;li&gt;Google Container Registry (GCR)&lt;/li&gt;
  &lt;li&gt;Amazon Elastic Container Registry (ECR)&lt;/li&gt;
  &lt;li&gt;Azure Container Registry (ACR)&lt;/li&gt;
  &lt;li&gt;Harbor&lt;/li&gt;
  &lt;li&gt;Quay&lt;/li&gt;
  &lt;li&gt;GitLab Container Registry&lt;/li&gt;
  &lt;li&gt;JFrog Container Registry&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools-for-working-with-containers&quot;&gt;Tools for working with containers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;dive&lt;/li&gt;
  &lt;li&gt;Docker CLI&lt;/li&gt;
  &lt;li&gt;ctr&lt;/li&gt;
  &lt;li&gt;lazydocker&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;special-images&quot;&gt;Special images&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;dbeaver/cloudbeaver&lt;/li&gt;
  &lt;li&gt;netdata/netdata&lt;/li&gt;
  &lt;li&gt;lscr.io/linuxserver/wireshark:latest&lt;/li&gt;
  &lt;li&gt;nicolargo/glances&lt;/li&gt;
  &lt;li&gt;minio/minio&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-my-images&quot;&gt;Building my images&lt;/h2&gt;

&lt;p&gt;Typically, each programming language adheres to certain conventions for images. The goal is usually to create a lightweight and secure image. We can leverage concepts such as multi-stage builds and base images with community support. Some best practices include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Multi-Stage Builds: This approach allows you to minimize the final image size by separating the build environment from the production environment.&lt;/li&gt;
  &lt;li&gt;Choose Official Base Images: Opt for official images from reputable sources to ensure security and reliability.&lt;/li&gt;
  &lt;li&gt;Keep Images Lightweight: Remove unnecessary files and dependencies to reduce the image size and improve performance.&lt;/li&gt;
  &lt;li&gt;Regularly Update Images: Stay current with updates to base images and dependencies to mitigate security vulnerabilities.&lt;/li&gt;
  &lt;li&gt;Use Specific Version Tags: Instead of using “latest,” specify the exact version of images to avoid unexpected changes in your application.&lt;/li&gt;
  &lt;li&gt;Scan for Vulnerabilities: Regularly scan your images for known vulnerabilities to maintain security.&lt;/li&gt;
  &lt;li&gt;Document Image Purpose and Usage: Include clear documentation about the image’s purpose, usage, and configuration to facilitate easier maintenance and onboarding.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deep-dive--not-todaybut-you-need-to-know&quot;&gt;Deep dive ? not today..but you need to know&lt;/h2&gt;

&lt;h4 id=&quot;namespaces-and-cgroups-architecture&quot;&gt;Namespaces and Cgroups Architecture&lt;/h4&gt;

&lt;p&gt;Namespaces are a fundamental aspect of containerization, providing isolation for various resources on a Linux system. Each namespace creates a distinct environment for processes, ensuring that they only interact with their own set of resources. For example, the PID namespace allows processes to have their own process IDs, making it appear as though they are the only ones running on the system. Similarly, network namespaces enable containers to have unique network interfaces and IP addresses, preventing interference between containers. Understanding how these namespaces work is essential for developers to effectively manage resource allocation and maintain a secure environment.&lt;/p&gt;

&lt;p&gt;Control groups (cgroups) complement namespaces by allowing for fine-grained resource management. They enable administrators to limit and prioritize CPU, memory, and I/O usage for groups of processes, ensuring that no single container can monopolize system resources. With cgroups, users can define resource limits, monitor usage, and enforce constraints in a way that is transparent to the applications running within the containers. This architecture not only optimizes resource allocation but also enhances overall system stability by preventing resource contention.&lt;/p&gt;

&lt;h4 id=&quot;overlay-filesystem-and-copy-on-write&quot;&gt;Overlay Filesystem and Copy-on-Write&lt;/h4&gt;

&lt;p&gt;The Overlay filesystem is a crucial technology in containerization, facilitating the creation of layered filesystems that optimize storage and performance. By allowing multiple layers to be stacked, OverlayFS enables efficient management of container images, where each layer can be modified without affecting the underlying layers. This Copy-on-Write (CoW) mechanism ensures that changes made to a file in a container do not overwrite the original file in the base image. Instead, the container creates a new layer for modifications, allowing for quick and efficient updates while conserving disk space.&lt;/p&gt;

&lt;p&gt;Using OverlayFS not only improves storage efficiency but also enhances the speed of container operations. As containers are deployed, they only need to load the layers that have changed, significantly reducing the time required to start a container. Additionally, this layering approach allows for easy version control and rollback capabilities. If a change introduces an issue, reverting to a previous version can be done swiftly by switching back to the corresponding base image, thereby minimizing downtime and potential disruptions.&lt;/p&gt;

&lt;h4 id=&quot;container-runtimes-comparison&quot;&gt;Container Runtimes Comparison&lt;/h4&gt;

&lt;p&gt;Container runtimes are essential components that facilitate the execution and management of containers, each with unique features and capabilities. Docker, for instance, is a widely recognized runtime that simplifies the process of building, running, and sharing containers. On the other hand, containerd serves as a high-level container runtime, providing a robust platform for managing the complete lifecycle of containers. CRI-O, specifically designed for Kubernetes, focuses on optimizing the performance and resource utilization of containerized applications within orchestration environments. Each runtime caters to different needs, making it important for developers to choose the right one based on their specific use cases and operational requirements.&lt;/p&gt;

&lt;p&gt;When comparing these runtimes, one must consider factors such as performance, compatibility, and community support. While Docker provides an all-in-one solution for container management, it may introduce overhead that isn’t present in lighter runtimes like runc, which focuses solely on running containers. Additionally, Podman offers a daemonless experience that enables users to run containers without needing a central service, appealing to those who prioritize security and simplicity. Ultimately, understanding the distinctions between these runtimes helps developers select the most appropriate tools for their containerization strategies.&lt;/p&gt;

&lt;h4 id=&quot;network-namespaces-and-networking-models&quot;&gt;Network Namespaces and Networking Models&lt;/h4&gt;

&lt;p&gt;Network namespaces are critical for ensuring that containers can communicate while remaining isolated from one another. Each network namespace has its own network stack, including interfaces, routing tables, and firewall rules, allowing containers to function as if they are on separate hosts. This isolation is essential for security, as it prevents unauthorized access between containers and enhances overall system integrity. Additionally, networking models such as bridge networking, overlay networking, and macvlan provide different levels of connectivity and isolation, enabling users to tailor their networking setup based on application needs and deployment scenarios.&lt;/p&gt;

&lt;p&gt;Understanding these networking models is crucial for optimizing communication between containers. For instance, bridge networking is often used for simpler applications that require direct communication with the host, while overlay networking is ideal for applications deployed across multiple hosts in a cluster, such as those orchestrated by Kubernetes. By leveraging tools like Flannel, Calico, or Cilium, developers can create robust networking solutions that enhance container security and performance. The choice of networking model significantly impacts the architecture of containerized applications and their ability to scale effectively.&lt;/p&gt;

&lt;h4 id=&quot;advanced-container-security&quot;&gt;Advanced Container Security&lt;/h4&gt;

&lt;p&gt;Advanced security measures extend beyond just using secure images; they also encompass implementing Linux capabilities to limit permissions, using Seccomp to filter system calls, and configuring AppArmor profiles for enhanced security. Rootless containers further elevate security by allowing users to run containers without root privileges, significantly reducing the risk of privilege escalation attacks. By integrating these practices, organizations can create a layered security approach that effectively mitigates potential risks while ensuring that containerized applications remain robust and resilient against emerging threats.&lt;/p&gt;

&lt;h4 id=&quot;volume-management-and-data-persistence&quot;&gt;Volume Management and Data Persistence&lt;/h4&gt;

&lt;p&gt;Effective volume management is essential for ensuring data persistence in containerized applications. Unlike traditional virtual machines, containers are ephemeral, meaning any data stored within a container is lost once it is stopped or removed. To address this challenge, Docker and other container orchestration platforms provide mechanisms for managing volumes, which allow data to persist independently of the container lifecycle. Volumes can be created and managed easily, enabling developers to store important data, such as databases or user uploads, securely.&lt;/p&gt;

&lt;p&gt;There are two primary types of storage options for containers: bind mounts and named volumes. Bind mounts allow specific directories on the host to be mounted into a container, providing direct access to host files. However, they can introduce complexity and potential security risks if not managed properly. In contrast, named volumes are managed by the container runtime, offering a more abstracted approach that simplifies data management. By adopting best practices for volume management, such as isolating data from application logic and regularly backing up volumes, developers can ensure that their applications maintain data integrity and resilience in production environments.&lt;/p&gt;

&lt;h4 id=&quot;advanced-container-orchestration&quot;&gt;Advanced Container Orchestration&lt;/h4&gt;

&lt;p&gt;Advanced container orchestration is crucial for managing the deployment, scaling, and operation of containerized applications in complex environments. Kubernetes, as a leading orchestration platform, provides robust features for automating the management of containerized applications across clusters. It facilitates load balancing, automated scaling, and self-healing capabilities, allowing organizations to maintain high availability and performance in their applications. Understanding Kubernetes internals, such as the roles of the kubelet, kube-scheduler, and controller manager, empowers developers to optimize their deployment strategies and resource allocation effectively.&lt;/p&gt;

&lt;p&gt;In addition to Kubernetes, modern orchestration frameworks also support advanced deployment strategies, such as blue-green deployments and canary releases. These methods enable teams to introduce new features gradually, minimizing risk and ensuring a smooth user experience. By leveraging ConfigMaps and Secrets, developers can manage application configurations and sensitive data securely within the orchestration platform. Ultimately, mastering advanced orchestration techniques enhances the efficiency and reliability of containerized applications, driving innovation and agility in software development and deployment.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>💡 l0calh0t Startup - day 1</title>
   <link href="/2024/09/27/l0calh0t-startup-day1.html"/>
   <updated>2024-09-27T00:00:00+00:00</updated>
   <id>/2024/09/27/l0calh0t-startup-day1</id>
   <content type="html">&lt;h2 id=&quot;about-the-project&quot;&gt;About the project&lt;/h2&gt;

&lt;p&gt;I recently saw a project on YouTube where the YouTuber created a complete technology environment to support a fake product. I liked the idea and thought about creating a real project… starting from localhost to production. I don’t consider myself a good programmer, but I’m looking for a well-made bean and rice. My main focus is to launch a stable product with acceptable security standards and that simply implements the idea as it is now in my mind. I present to you the &lt;strong&gt;l0calh0t&lt;/strong&gt; startup. You can follow the progress of this through a series of articles on this blog!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: &lt;em&gt;don’t take me too seriously&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know there are already similar projects on the internet, but most of them focus on &lt;em&gt;development&lt;/em&gt; and not on &lt;em&gt;operations&lt;/em&gt;. I have two main goals. The first is to test technologies, discuss decisions and show concerns that usually arise when our project goes into production. The second is to perhaps make some money with this. My initial focus is Brazilian software developers. In general, I get along well with developers. I believe it is because every day I help them solve problems. Developers change, but the problems are usually the same.&lt;/p&gt;

&lt;p&gt;Let’s get started. What follows is information about the startup. To be quite honest, what I intend to build already exists, something similar to &lt;em&gt;render.com&lt;/em&gt;.. but my ideas go a little further(if I can implement it, of course xD).&lt;/p&gt;

&lt;h2 id=&quot;l0calh0t-&quot;&gt;l0calh0t 🚀🚀🚀&lt;/h2&gt;

&lt;h3 id=&quot;about-the-startup&quot;&gt;About the startup&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;l0calh0t&lt;/strong&gt; is not introducing an innovative solution but rather offering &lt;strong&gt;a new way of delivering container-based application hosting&lt;/strong&gt;, designed for developers of all levels, SREs, DevOps, and QAs. By abstracting infrastructure and networking, it enables fast, cost-effective container deployment. Users can make applications publicly accessible or control access as needed. Unlike traditional solutions focused on large enterprises with strict SLAs, &lt;strong&gt;l0calh0t&lt;/strong&gt; prioritizes simplicity and accessibility, creating an agile environment for rapid testing and iteration, without the complexity of managing traditional servers.&lt;/p&gt;

&lt;p&gt;I’m still thinking about the legal issues..&lt;/p&gt;

&lt;h3 id=&quot;about-the-idea&quot;&gt;About the idea&lt;/h3&gt;

&lt;p&gt;The idea is basically a &lt;em&gt;render.com&lt;/em&gt; with some differences. I want to do something more “api first”. I want to do it in a way that is similar to the way people work with containers locally and I also want to offer a way for them to have details about their applications by adding components to the infrastructure that abstract away the complexity of doing so.&lt;/p&gt;

&lt;h3 id=&quot;what-do-i-need&quot;&gt;What do I need?&lt;/h3&gt;

&lt;p&gt;Considering that I have no money, no computing resources, and no advanced programming skills (that makes it hard 🤣🤣), I need to focus on something simple that works. I want to create a business abstraction on top of Kubernetes and put all the complexity into it using tools I have experience with. I need a cheap domain like &lt;strong&gt;localhot.io&lt;/strong&gt;. I need a payment method and reasonable bandwidth. I want to physically separate the servers where the startup’s applications are from the servers where the end-user containers will be. I need to think about security and a business model that is viable for Brazilian developers.&lt;/p&gt;

&lt;p&gt;For the first poc’s, the simpler the better. I intend to use python or golang for this. I will use kind as the local kubernetes environment, the local registry of my machine for the images and also my local network (I run a certain risk).The networking part is very important in this project, but first I want a functional MVP.&lt;/p&gt;

&lt;h3 id=&quot;about-my-localhost-workstation&quot;&gt;About my localhost (workstation)&lt;/h3&gt;

&lt;p&gt;My computer settings are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intel(R) Core(TM) i5-9400 CPU @ 2.90GHz;&lt;/li&gt;
  &lt;li&gt;16 RAM;&lt;/li&gt;
  &lt;li&gt;440G SSD;&lt;/li&gt;
  &lt;li&gt;EndeavourOS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[2024-10-02 15:27:45]&lt;/strong&gt; UPDATE - &lt;em&gt;I’ve decided that a hardware upgrade is unfeasible… It’s time to build a new PC. !!!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;end&quot;&gt;End(?)&lt;/h3&gt;

&lt;p&gt;So, that’s it. I’ve reached the end of my first article. I hope I’ve been clear about my idea. In the end, even if everything goes wrong, I will have gained valuable knowledge. These notes may be useful to someone else, and even to my future self. What’s coming next? A series of reflections, articles about random tools, and some not-so-professional code &lt;strong&gt;(&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;See you around !&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DISCLAIMER</title>
   <link href="/2024/09/26/DISCLAIMER.html"/>
   <updated>2024-09-26T00:00:00+00:00</updated>
   <id>/2024/09/26/DISCLAIMER</id>
   <content type="html">&lt;h2 id=&quot;disclaimer&quot;&gt;DISCLAIMER&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I write for myself&lt;/li&gt;
  &lt;li&gt;My first language is Brazilian Portuguese, but I’m learning English and will use it here. You will likely see some writing mistakes; it’s part of learning&lt;/li&gt;
  &lt;li&gt;I have worked as a Reliability Engineer only in Brazil (&lt;em&gt;until now&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;I plan to discuss reliability topics and other subjects like security, processes, governance, and soft skills&lt;/li&gt;
  &lt;li&gt;Feedback is always welcome as long as it’s constructive. Feel free to contact me on Telegram or Discord, but please be respectful (&lt;em&gt;@apolzek&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;Remember, everything here is open to discussion. You should form your &lt;strong&gt;own opinions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;goals&quot;&gt;GOALS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Talk about tools that are not well-known but have great potential&lt;/li&gt;
  &lt;li&gt;Track my studies with short reflective articles&lt;/li&gt;
  &lt;li&gt;Share my views on technologies, processes, and products&lt;/li&gt;
  &lt;li&gt;Soon, I will revisit my notes to see how my views on certain topics have changed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;remember&quot;&gt;REMEMBER&lt;/h2&gt;

&lt;p&gt;🇺🇸 “The only way to make things work well is by understanding why they break.”&lt;/p&gt;

&lt;p&gt;🇧🇷 “A única maneira de fazer as coisas funcionarem bem é entendendo o motivo pelo qual elas quebram.”&lt;/p&gt;
</content>
 </entry>
 

</feed>
