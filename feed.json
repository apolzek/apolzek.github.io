{
    "version": "https://jsonfeed.org/version/1",
    "title": "apolzek",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "blog",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
"items": [
    
        {
            "id": "/2024/09/29/sre-kit-for-the-end-of-the-world.html",
            "title": "SRE Kit for the End of the World",
            "summary": "Chaos is Inevitable",
            "content_text": "LINUX rs",
            "content_html": "<p>LINUX rs</p>",
            "url": "/2024/09/29/sre-kit-for-the-end-of-the-world.html",
            
            
            
            "tags": ["tools","sre","toolbox","linux"],
            
            "date_published": "2024-09-29T00:00:00+00:00",
            "date_modified": "2024-09-29T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/28/containers-mastery.html",
            "title": "Containers Mastery",
            "summary": "Tips and Tricks for Developers and DevOps",
            "content_text": "What is Linux container ?A Linux container is a lightweight and portable unit that encapsulates an application and its dependencies. Containers utilize key Linux kernel features for process isolation and resource management, including namespaces (for isolating resources like PID, network, and filesystem) and control groups (cgroups) (for limiting and prioritizing resource usage). Additionally, union file systems enable efficient layering and storage of container images. Together, these features allow containers to operate efficiently and securely on a shared host.                -&gt; DependenciesContainer image -&gt; Application code                -&gt; Container configuration                -&gt; Base imageContainer runtimeA container runtime is a software component that is responsible for running and managing containers. Containers are lightweight, portable units that package an application and its dependencies, allowing them to run consistently across different environments.  Docker  containerd  CRI-O  runc  Podman  LXC/LXD  systemd-nspawn (Don’t be angry with me)Don’t compare Docker with KubernetesIt just doesn’t make sense.. comparing Docker and Kubernetes can be confusing for beginners because they serve different purposes: Docker implements the concept of containers, while Kubernetes orchestrates those containers. An analogy is comparing a car (Docker) to a traffic system (Kubernetes); the car allows you to drive (create and run containers), while the traffic system manages the flow of multiple cars (orchestrates the deployment and scaling of containers). This distinction is crucial, as it clarifies that Docker focuses on the containerization process itself, while Kubernetes handles the management of containerized applications at scale.Container SecurityHaving secure base images for containers is crucial for maintaining the overall security of the host system. Images without elevated privileges help minimize potential attack vectors, reducing the risk of container escape and unauthorized access to the host. While concerns about insecure images are valid, it’s important to note that this is not the worst-case scenario, as containers typically run in a private network. For an attacker to exploit these vulnerabilities significantly, they would need to compromise additional components of the infrastructure, making it a more complex attack path. Therefore, while secure base images are essential, the overall security posture can still be robust with proper network isolation and access controls in place.Container registryA container registry is a centralized repository where container images are stored, managed, and distributed. Examples of usage include:  Docker Hub  Google Container Registry (GCR)  Amazon Elastic Container Registry (ECR)  Azure Container Registry (ACR)  Harbor  Quay  GitLab Container Registry  JFrog Container RegistryTools for working with containers  dive  Docker CLI  ctr  lazydocker",
            "content_html": "<h2 id=\"what-is-linux-container-\">What is Linux container ?</h2><p>A Linux container is a lightweight and portable unit that encapsulates an application and its dependencies. Containers utilize key Linux kernel features for process isolation and resource management, including namespaces (for isolating resources like PID, network, and filesystem) and control groups (cgroups) (for limiting and prioritizing resource usage). Additionally, union file systems enable efficient layering and storage of container images. Together, these features allow containers to operate efficiently and securely on a shared host.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>                -&gt; DependenciesContainer image -&gt; Application code                -&gt; Container configuration                -&gt; Base image</code></pre></div></div><h2 id=\"container-runtime\">Container runtime</h2><p>A container runtime is a software component that is responsible for running and managing containers. Containers are lightweight, portable units that package an application and its dependencies, allowing them to run consistently across different environments.</p><ul>  <li>Docker</li>  <li>containerd</li>  <li>CRI-O</li>  <li>runc</li>  <li>Podman</li>  <li>LXC/LXD</li>  <li>systemd-nspawn (Don’t be angry with me)</li></ul><h2 id=\"dont-compare-docker-with-kubernetes\">Don’t compare Docker with Kubernetes</h2><p>It just doesn’t make sense.. comparing Docker and Kubernetes can be confusing for beginners because they serve different purposes: Docker implements the concept of containers, while Kubernetes orchestrates those containers. An analogy is comparing a car (Docker) to a traffic system (Kubernetes); the car allows you to drive (create and run containers), while the traffic system manages the flow of multiple cars (orchestrates the deployment and scaling of containers). This distinction is crucial, as it clarifies that Docker focuses on the containerization process itself, while Kubernetes handles the management of containerized applications at scale.</p><h2 id=\"container-security\">Container Security</h2><p>Having secure base images for containers is crucial for maintaining the overall security of the host system. Images without elevated privileges help minimize potential attack vectors, reducing the risk of container escape and unauthorized access to the host. While concerns about insecure images are valid, it’s important to note that this is not the worst-case scenario, as containers typically run in a private network. For an attacker to exploit these vulnerabilities significantly, they would need to compromise additional components of the infrastructure, making it a more complex attack path. Therefore, while secure base images are essential, the overall security posture can still be robust with proper network isolation and access controls in place.</p><h2 id=\"container-registry\">Container registry</h2><p>A container registry is a centralized repository where container images are stored, managed, and distributed. Examples of usage include:</p><ul>  <li>Docker Hub</li>  <li>Google Container Registry (GCR)</li>  <li>Amazon Elastic Container Registry (ECR)</li>  <li>Azure Container Registry (ACR)</li>  <li>Harbor</li>  <li>Quay</li>  <li>GitLab Container Registry</li>  <li>JFrog Container Registry</li></ul><h2 id=\"tools-for-working-with-containers\">Tools for working with containers</h2><ul>  <li>dive</li>  <li>Docker CLI</li>  <li>ctr</li>  <li>lazydocker</li></ul>",
            "url": "/2024/09/28/containers-mastery.html",
            
            
            
            "tags": ["linux","containers","docker"],
            
            "date_published": "2024-09-28T00:00:00+00:00",
            "date_modified": "2024-09-28T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/27/l0calh0t-startup.html",
            "title": "l0calh0t Startup - starting on localhost - day 1",
            "summary": "Building the l0calh0t Startup",
            "content_text": "About the projectI recently saw a project on YouTube where the YouTuber created a complete technology environment to support a fake product. I liked the idea and thought about creating a real project… starting from localhost to production. I don’t consider myself a good programmer, but I’m looking for a well-made bean and rice. My main focus is to launch a stable product with acceptable security standards and that simply implements the idea as it is now in my mind. I present to you the l0calh0t startup. You can follow the progress of this through a series of articles on this blog!note: don’t take me too seriouslyI know there are already similar projects on the internet, but most of them focus on development and not on operations. I have two main goals. The first is to test technologies, discuss decisions and show concerns that usually arise when our project goes into production. The second is to perhaps make some money with this. My initial focus is Brazilian software developers. In general, I get along well with developers. I believe it is because every day I help them solve problems. Developers change, but the problems are usually the same.Let’s get started. What follows is information about the startup. To be quite honest, what I intend to build already exists, something similar to render.com. But my ideas go a little further. Let’s go together and for any tips or corrections, contact me on Telegram @apolzek.l0calh0t 🚀🚀🚀About the startupl0calh0t is an innovative startup that simplifies container-based application hosting, designed for developers of all levels, SREs, DevOps, and QAs. By abstracting infrastructure and networking, it enables fast, cost-effective container deployment. Users can make applications publicly accessible or control access as needed. Unlike traditional solutions focused on large enterprises with strict SLAs, l0calh0t prioritizes simplicity and accessibility, creating an agile environment for rapid testing and iteration, without the complexity of managing traditional servers.About the ideaThe idea is basically a render.com with some differences. I want to do something more “api first”. I want to do it in a way that is similar to the way people work with containers locally and I also want to offer a way for them to have details about their applications by adding components to the infrastructure that abstract away the complexity of doing so.What do I need?Considering that I have no money, no computing resources, and no advanced programming skills (that makes it hard 🤣🤣), I need to focus on something simple that works. I want to create a business abstraction on top of Kubernetes and put all the complexity into it using tools I have experience with. I need a cheap domain like localhot.io. I need a payment method and reasonable bandwidth. I want to physically separate the servers where the startup’s applications are from the servers where the end-user containers will be. I need to think about security and a business model that is viable for Brazilian developers.For the first poc’s, the simpler the better. I intend to use python or golang for this. I will use kind as the local kubernetes environment, the local registry of my machine for the images and also my local network (I run a certain risk).The networking part is very important in this project, but first I want a functional MVP.About my localhost (workstation)My computer settings are  Intel(R) Core(TM) i5-9400 CPU @ 2.90GHz;  16 RAM;  440G SSD;  EndeavourOSLet’s see how long it will be viable to run locally. In general, I think the best route, if there’s enough money, would be to go for on-premises. But to validate the idea in the market (in production), I could use a cloud solution. I haven’t decided on this yet, so applying some project management now is essential to avoid going crazy!End(?)So, that’s it. I’ve reached the end of my first article. I hope I’ve been clear about my idea. In the end, even if everything goes wrong, I will have gained valuable knowledge. These notes may be useful to someone else, and even to my future self. What’s coming next? A series of reflections, articles about random tools, and some not-so-professional code.",
            "content_html": "<h2 id=\"about-the-project\">About the project</h2><p>I recently saw a project on YouTube where the YouTuber created a complete technology environment to support a fake product. I liked the idea and thought about creating a real project… starting from localhost to production. I don’t consider myself a good programmer, but I’m looking for a well-made bean and rice. My main focus is to launch a stable product with acceptable security standards and that simply implements the idea as it is now in my mind. I present to you the <strong>l0calh0t</strong> startup. You can follow the progress of this through a series of articles on this blog!</p><p><strong>note</strong>: <em>don’t take me too seriously</em></p><p>I know there are already similar projects on the internet, but most of them focus on <em>development</em> and not on <em>operations</em>. I have two main goals. The first is to test technologies, discuss decisions and show concerns that usually arise when our project goes into production. The second is to perhaps make some money with this. My initial focus is Brazilian software developers. In general, I get along well with developers. I believe it is because every day I help them solve problems. Developers change, but the problems are usually the same.</p><p>Let’s get started. What follows is information about the startup. To be quite honest, what I intend to build already exists, something similar to <em>render.com</em>. But my ideas go a little further. Let’s go together and for any tips or corrections, contact me on Telegram <strong>@apolzek</strong>.</p><h2 id=\"l0calh0t-\">l0calh0t 🚀🚀🚀</h2><h3 id=\"about-the-startup\">About the startup</h3><p><strong>l0calh0t</strong> is an innovative startup that simplifies container-based application hosting, designed for developers of all levels, SREs, DevOps, and QAs. By abstracting infrastructure and networking, it enables fast, cost-effective container deployment. Users can make applications publicly accessible or control access as needed. Unlike traditional solutions focused on large enterprises with strict SLAs, <strong>l0calh0t</strong> prioritizes simplicity and accessibility, creating an agile environment for rapid testing and iteration, without the complexity of managing traditional servers.</p><h3 id=\"about-the-idea\">About the idea</h3><p>The idea is basically a <em>render.com</em> with some differences. I want to do something more “api first”. I want to do it in a way that is similar to the way people work with containers locally and I also want to offer a way for them to have details about their applications by adding components to the infrastructure that abstract away the complexity of doing so.</p><h3 id=\"what-do-i-need\">What do I need?</h3><p>Considering that I have no money, no computing resources, and no advanced programming skills (that makes it hard 🤣🤣), I need to focus on something simple that works. I want to create a business abstraction on top of Kubernetes and put all the complexity into it using tools I have experience with. I need a cheap domain like <strong>localhot.io</strong>. I need a payment method and reasonable bandwidth. I want to physically separate the servers where the startup’s applications are from the servers where the end-user containers will be. I need to think about security and a business model that is viable for Brazilian developers.</p><p>For the first poc’s, the simpler the better. I intend to use python or golang for this. I will use kind as the local kubernetes environment, the local registry of my machine for the images and also my local network (I run a certain risk).The networking part is very important in this project, but first I want a functional MVP.</p><h3 id=\"about-my-localhost-workstation\">About my localhost (workstation)</h3><p>My computer settings are</p><ul>  <li>Intel(R) Core(TM) i5-9400 CPU @ 2.90GHz;</li>  <li>16 RAM;</li>  <li>440G SSD;</li>  <li>EndeavourOS</li></ul><p>Let’s see how long it will be viable to run locally. In general, I think the best route, if there’s enough money, would be to go for on-premises. But to validate the idea in the market (in production), I could use a cloud solution. I haven’t decided on this yet, so applying some project management now is essential to avoid going crazy!</p><h3 id=\"end\">End(?)</h3><p>So, that’s it. I’ve reached the end of my first article. I hope I’ve been clear about my idea. In the end, even if everything goes wrong, I will have gained valuable knowledge. These notes may be useful to someone else, and even to my future self. What’s coming next? A series of reflections, articles about random tools, and some not-so-professional code.</p>",
            "url": "/2024/09/27/l0calh0t-startup.html",
            
            
            
            "tags": ["devops","sre","project","startup"],
            
            "date_published": "2024-09-27T00:00:00+00:00",
            "date_modified": "2024-09-27T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/26/DISCLAIMER.html",
            "title": "DISCLAIMER",
            "summary": "DISCLAIMER and GOALS",
            "content_text": "DISCLAIMER  My first language is Brazilian Portuguese, but I’m learning English and will use it here. You will likely see some writing mistakes; it’s part of learning  I have worked as a Reliability Engineer only in Brazil (until now)  I plan to discuss reliability topics and other subjects like security, processes, governance, and soft skills  Feedback is always welcome as long as it’s constructive. Feel free to contact me on Telegram or Discord, but please be respectful (@apolzek)  Remember, everything here is open to discussion. You should form your own opinionsGOALS  Talk about tools that are not well-known but have great potential  Track my studies with short reflective articles  Share my views on technologies, processes, and products  Soon, I will revisit my notes to see how my views on certain topics have changedREMEMBER🇧🇷 “A única maneira de fazer as coisas funcionarem bem é entendendo o motivo pelo qual elas quebram.”🇺🇸 “The only way to make things work well is by understanding why they break.”",
            "content_html": "<h2 id=\"disclaimer\">DISCLAIMER</h2><ul>  <li>My first language is Brazilian Portuguese, but I’m learning English and will use it here. You will likely see some writing mistakes; it’s part of learning</li>  <li>I have worked as a Reliability Engineer only in Brazil (<em>until now</em>)</li>  <li>I plan to discuss reliability topics and other subjects like security, processes, governance, and soft skills</li>  <li>Feedback is always welcome as long as it’s constructive. Feel free to contact me on Telegram or Discord, but please be respectful (<em>@apolzek</em>)</li>  <li>Remember, everything here is open to discussion. You should form your <strong>own opinions</strong></li></ul><h2 id=\"goals\">GOALS</h2><ul>  <li>Talk about tools that are not well-known but have great potential</li>  <li>Track my studies with short reflective articles</li>  <li>Share my views on technologies, processes, and products</li>  <li>Soon, I will revisit my notes to see how my views on certain topics have changed</li></ul><h2 id=\"remember\">REMEMBER</h2><p>🇧🇷 “A única maneira de fazer as coisas funcionarem bem é entendendo o motivo pelo qual elas quebram.”</p><p>🇺🇸 “The only way to make things work well is by understanding why they break.”</p>",
            "url": "/2024/09/26/DISCLAIMER.html",
            
            
            
            "tags": ["disclaimer","goals"],
            
            "date_published": "2024-09-26T00:00:00+00:00",
            "date_modified": "2024-09-26T00:00:00+00:00",
            
                "author": 
                ""
                
            
        }
    
    ]
}