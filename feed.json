{
    "version": "https://jsonfeed.org/version/1",
    "title": "apolzek",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "blog",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
"items": [
    
        {
            "id": "/2024/12/01/systemd.html",
            "title": "operating-system/linux/systemd",
            "summary": "systemd",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/systemd.html",
            
            
            
            "tags": ["linux","systemd"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/processes.html",
            "title": "operating-system/linux/processes",
            "summary": "Processes",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/processes.html",
            
            
            
            "tags": ["linux","processes"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/network.html",
            "title": "operating-system/linux/network",
            "summary": "Network",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/network.html",
            
            
            
            "tags": ["linux","network"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/ebpf.html",
            "title": "operating-system/linux/ebpf",
            "summary": "ebpf",
            "content_text": "https://www.kerno.io/blog/programming-the-kernel-with-ebpf",
            "content_html": "<p>https://www.kerno.io/blog/programming-the-kernel-with-ebpf</p>",
            "url": "/2024/12/01/ebpf.html",
            
            
            
            "tags": ["linux","ebpf"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/packet-analysis.html",
            "title": "networking/packet-analysis",
            "summary": "packet-analysis",
            "content_text": "packet-analysis",
            "content_html": "<h2 id=\"packet-analysis\">packet-analysis</h2>",
            "url": "/2024/12/01/packet-analysis.html",
            
            
            
            "tags": ["packet-analysis","food"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/feeding.html",
            "title": "life-and-health/feeding",
            "summary": "feeding",
            "content_text": "feeding",
            "content_html": "<h2 id=\"feeding\">feeding</h2>",
            "url": "/2024/12/01/feeding.html",
            
            
            
            "tags": ["feeding","food"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/rust/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/ruby/overview",
            "summary": "Overview",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/overview.html",
            
            
            
            "tags": ["ruby","overview"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/python/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/lua/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/ruby/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/java/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            "tags": ["java","overview"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/tests.html",
            "title": "development/golang/tests",
            "summary": "tests",
            "content_text": "Tests",
            "content_html": "<h2 id=\"tests\">Tests</h2>",
            "url": "/2024/12/01/tests.html",
            
            
            
            "tags": ["go","tests"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/slices.html",
            "title": "development/golang/slices",
            "summary": "Slices",
            "content_text": "Slicespackage mainimport \"fmt\"func main() {\tvar s = []int{1, 2, 3}\tmodifySlice(s)\tfmt.Println(s)}func modifySlice(i []int) {\ti[0] = 3\ti = append(i, 4)\ti[2] = 4}O motivo é que o na verdade isso é um ponteiro, quando você deu append o ponteiro antigo foi descartado e um novo foi gerado contendo todo que havia no antigo i mais o novo elemento. Como s ainda aponta para o ponteiro antigo print vai imprimir o conteúdo antigo que teve apenas o primeiro elemento alterado.package mainimport \"fmt\"func main() {\tvar s = []int{1, 2, 3}\tmodifySlice(&amp;s)\tfmt.Println(s)}func modifySlice(i *[]int) {\t// Corrija o slice usando o ponteiro\t(*i)[0] = 3\t*i = append(*i, 4)\t(*i)[2] = 4}",
            "content_html": "<h2 id=\"slices\">Slices</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">}</span>\t<span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">i</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">3</span>\t<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">)</span>\t<span class=\"n\">i</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">4</span><span class=\"p\">}</span></code></pre></div></div><p>O motivo é que o na verdade isso é um ponteiro, quando você deu append o ponteiro antigo foi descartado e um novo foi gerado contendo todo que havia no antigo i mais o novo elemento. Como s ainda aponta para o ponteiro antigo print vai imprimir o conteúdo antigo que teve apenas o primeiro elemento alterado.</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">}</span>\t<span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span><span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"c\">// Corrija o slice usando o ponteiro</span>\t<span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">3</span>\t<span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">)</span>\t<span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)[</span><span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">4</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/12/01/slices.html",
            
            
            
            "tags": ["go","slices"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/grpc.html",
            "title": "development/golang/grpc",
            "summary": "gRPC",
            "content_text": "gRPCgRPC, which stands for Google Remote Procedure Call, is a type of communication protocol. It utilizes HTTP/2 and can be viewed as an RPC framework.gRPC uses Protocol Buffers (protobuf), a data serialization format developed by Google. It serves as the message format for communication between clients and servers in gRPC. Protocol Buffers offer an efficient and compact way to represent structured data, which can be easily serialized and deserialized across various programming languages.gRPC Communication Types      Unary: More akin to REST. The client sends a single request, and the server responds with a single response.        Server Streaming: The client sends a request, and the server can send back multiple responses.        Client Streaming: The client sends multiple requests to the server, and the server responds only once (e.g., for uploading).        Bidirectional Streaming: Both client and server continuously send requests and responses back and forth.  Referenceshttps://github.com/grpc/grpc-go/tree/master/examples/route_guidehttps://google.github.io/proto-lens/installing-protoc.html",
            "content_html": "<h2 id=\"grpc\">gRPC</h2><p>gRPC, which stands for Google Remote Procedure Call, is a type of communication protocol. It utilizes HTTP/2 and can be viewed as an RPC framework.</p><p>gRPC uses Protocol Buffers (protobuf), a data serialization format developed by Google. It serves as the message format for communication between clients and servers in gRPC. Protocol Buffers offer an efficient and compact way to represent structured data, which can be easily serialized and deserialized across various programming languages.</p><h3 id=\"grpc-communication-types\">gRPC Communication Types</h3><ul>  <li>    <p><strong>Unary:</strong> More akin to REST. The client sends a single request, and the server responds with a single response.</p>  </li>  <li>    <p><strong>Server Streaming:</strong> The client sends a request, and the server can send back multiple responses.</p>  </li>  <li>    <p><strong>Client Streaming:</strong> The client sends multiple requests to the server, and the server responds only once (e.g., for uploading).</p>  </li>  <li>    <p><strong>Bidirectional Streaming:</strong> Both client and server continuously send requests and responses back and forth.</p>  </li></ul><h3 id=\"references\">References</h3><p>https://github.com/grpc/grpc-go/tree/master/examples/route_guidehttps://google.github.io/proto-lens/installing-protoc.html</p>",
            "url": "/2024/12/01/grpc.html",
            
            
            
            "tags": ["go","gRPC"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/frameworks.html",
            "title": "development/golang/frameworks",
            "summary": "Frameworks",
            "content_text": "FrameworksGoFrGinhttps://medium.com/@chaithra.shetty/introducing-gofr-the-go-framework-541252fabc42",
            "content_html": "<h2 id=\"frameworks\">Frameworks</h2><p>GoFrGin</p><p>https://medium.com/@chaithra.shetty/introducing-gofr-the-go-framework-541252fabc42</p>",
            "url": "/2024/12/01/frameworks.html",
            
            
            
            "tags": ["go","frameworks"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/observer.html",
            "title": "development/padroes-de-projeto/observer",
            "summary": "Observer",
            "content_text": "Observerpackage mainimport (\t\"fmt\")// Observer define a interface para os observadorestype Observer interface {\tUpdate(temp float64)}// Subject define a interface para o objeto observáveltype Subject interface {\tRegisterObserver(o Observer)\tRemoveObserver(o Observer)\tNotifyObservers()}// WeatherStation é o objeto observáveltype WeatherStation struct {\ttemperature float64\tobservers   []Observer}// NewWeatherStation cria uma nova instância de WeatherStationfunc NewWeatherStation() *WeatherStation {\treturn &amp;WeatherStation{}}// RegisterObserver registra um novo observadorfunc (w *WeatherStation) RegisterObserver(o Observer) {\tw.observers = append(w.observers, o)}// RemoveObserver remove um observador existentefunc (w *WeatherStation) RemoveObserver(o Observer) {\tfor i, observer := range w.observers {\t\tif observer == o {\t\t\tw.observers = append(w.observers[:i], w.observers[i+1:]...)\t\t\tbreak\t\t}\t}}// NotifyObservers notifica todos os observadores sobre a mudança na temperaturafunc (w *WeatherStation) NotifyObservers() {\tfor _, observer := range w.observers {\t\tobserver.Update(w.temperature)\t}}// SetTemperature define a temperatura e notifica os observadores sobre a mudançafunc (w *WeatherStation) SetTemperature(temp float64) {\tw.temperature = temp\tw.NotifyObservers()}// PhoneDisplay é um exemplo de observador que exibe a temperatura em um telefonetype PhoneDisplay struct{}// Update atualiza a temperatura exibida no telefonefunc (p *PhoneDisplay) Update(temp float64) {\tfmt.Printf(\"Temperatura atualizada no telefone: %.2f°C\\n\", temp)}// TabletDisplay é um exemplo de observador que exibe a temperatura em um tablettype TabletDisplay struct{}// Update atualiza a temperatura exibida no tabletfunc (t *TabletDisplay) Update(temp float64) {\tfmt.Printf(\"Temperatura atualizada no tablet: %.2f°C\\n\", temp)}func main() {\t// Criação de uma estação meteorológica e um visor de telefone\tweatherStation := NewWeatherStation()\tphoneDisplay := &amp;PhoneDisplay{}\ttabletDisplay := &amp;TabletDisplay{}\tweatherStation.RegisterObserver(phoneDisplay)\tweatherStation.RegisterObserver(tabletDisplay)\tweatherStation.SetTemperature(25.5)\tweatherStation.SetTemperature(30.0)\t// Remova o visor do telefone da lista de observadores\tweatherStation.RemoveObserver(phoneDisplay)\t// Agora, mesmo que a temperatura mude, o visor do telefone não será mais atualizado\tweatherStation.SetTemperature(28.0)}",
            "content_html": "<h2 id=\"observer\">Observer</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span><span class=\"p\">)</span><span class=\"c\">// Observer define a interface para os observadores</span><span class=\"k\">type</span> <span class=\"n\">Observer</span> <span class=\"k\">interface</span> <span class=\"p\">{</span>\t<span class=\"n\">Update</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"kt\">float64</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// Subject define a interface para o objeto observável</span><span class=\"k\">type</span> <span class=\"n\">Subject</span> <span class=\"k\">interface</span> <span class=\"p\">{</span>\t<span class=\"n\">RegisterObserver</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"n\">Observer</span><span class=\"p\">)</span>\t<span class=\"n\">RemoveObserver</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"n\">Observer</span><span class=\"p\">)</span>\t<span class=\"n\">NotifyObservers</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"c\">// WeatherStation é o objeto observável</span><span class=\"k\">type</span> <span class=\"n\">WeatherStation</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">temperature</span> <span class=\"kt\">float64</span>\t<span class=\"n\">observers</span>   <span class=\"p\">[]</span><span class=\"n\">Observer</span><span class=\"p\">}</span><span class=\"c\">// NewWeatherStation cria uma nova instância de WeatherStation</span><span class=\"k\">func</span> <span class=\"n\">NewWeatherStation</span><span class=\"p\">()</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">WeatherStation</span><span class=\"p\">{}</span><span class=\"p\">}</span><span class=\"c\">// RegisterObserver registra um novo observador</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span><span class=\"p\">)</span> <span class=\"n\">RegisterObserver</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"n\">Observer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// RemoveObserver remove um observador existente</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span><span class=\"p\">)</span> <span class=\"n\">RemoveObserver</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"n\">Observer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">observer</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span> <span class=\"p\">{</span>\t\t<span class=\"k\">if</span> <span class=\"n\">observer</span> <span class=\"o\">==</span> <span class=\"n\">o</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"p\">]</span><span class=\"o\">...</span><span class=\"p\">)</span>\t\t\t<span class=\"k\">break</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// NotifyObservers notifica todos os observadores sobre a mudança na temperatura</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span><span class=\"p\">)</span> <span class=\"n\">NotifyObservers</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">observer</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span> <span class=\"p\">{</span>\t\t<span class=\"n\">observer</span><span class=\"o\">.</span><span class=\"n\">Update</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">temperature</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// SetTemperature define a temperatura e notifica os observadores sobre a mudança</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span><span class=\"p\">)</span> <span class=\"n\">SetTemperature</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"kt\">float64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">NotifyObservers</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"c\">// PhoneDisplay é um exemplo de observador que exibe a temperatura em um telefone</span><span class=\"k\">type</span> <span class=\"n\">PhoneDisplay</span> <span class=\"k\">struct</span><span class=\"p\">{}</span><span class=\"c\">// Update atualiza a temperatura exibida no telefone</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span><span class=\"n\">PhoneDisplay</span><span class=\"p\">)</span> <span class=\"n\">Update</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"kt\">float64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Temperatura atualizada no telefone: %.2f°C</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// TabletDisplay é um exemplo de observador que exibe a temperatura em um tablet</span><span class=\"k\">type</span> <span class=\"n\">TabletDisplay</span> <span class=\"k\">struct</span><span class=\"p\">{}</span><span class=\"c\">// Update atualiza a temperatura exibida no tablet</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">*</span><span class=\"n\">TabletDisplay</span><span class=\"p\">)</span> <span class=\"n\">Update</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"kt\">float64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Temperatura atualizada no tablet: %.2f°C</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// Criação de uma estação meteorológica e um visor de telefone</span>\t<span class=\"n\">weatherStation</span> <span class=\"o\">:=</span> <span class=\"n\">NewWeatherStation</span><span class=\"p\">()</span>\t<span class=\"n\">phoneDisplay</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">PhoneDisplay</span><span class=\"p\">{}</span>\t<span class=\"n\">tabletDisplay</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">TabletDisplay</span><span class=\"p\">{}</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">RegisterObserver</span><span class=\"p\">(</span><span class=\"n\">phoneDisplay</span><span class=\"p\">)</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">RegisterObserver</span><span class=\"p\">(</span><span class=\"n\">tabletDisplay</span><span class=\"p\">)</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">SetTemperature</span><span class=\"p\">(</span><span class=\"m\">25.5</span><span class=\"p\">)</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">SetTemperature</span><span class=\"p\">(</span><span class=\"m\">30.0</span><span class=\"p\">)</span>\t<span class=\"c\">// Remova o visor do telefone da lista de observadores</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">RemoveObserver</span><span class=\"p\">(</span><span class=\"n\">phoneDisplay</span><span class=\"p\">)</span>\t<span class=\"c\">// Agora, mesmo que a temperatura mude, o visor do telefone não será mais atualizado</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">SetTemperature</span><span class=\"p\">(</span><span class=\"m\">28.0</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/12/01/observer.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/factory.html",
            "title": "development/padroes-de-projeto/factory",
            "summary": "Factory",
            "content_text": "Factorypackage mainimport \"fmt\"// Product é a interface que define o comportamento dos produtostype Product interface {\tUse()}// ConcreteProductA é uma implementação de Producttype ConcreteProductA struct{}// Use implementa o método Use de Productfunc (p *ConcreteProductA) Use() {\tfmt.Println(\"Usando o produto A\")}// ConcreteProductB é outra implementação de Producttype ConcreteProductB struct{}// Use implementa o método Use de Productfunc (p *ConcreteProductB) Use() {\tfmt.Println(\"Usando o produto B\")}// Factory é a interface que define o método de criação de produtostype Factory interface {\tCreateProduct() Product}// ConcreteFactoryA é uma implementação de Factory que cria ConcreteProductAtype ConcreteFactoryA struct{}// CreateProduct implementa o método CreateProduct de Factoryfunc (f *ConcreteFactoryA) CreateProduct() Product {\treturn &amp;ConcreteProductA{}}// ConcreteFactoryB é outra implementação de Factory que cria ConcreteProductBtype ConcreteFactoryB struct{}// CreateProduct implementa o método CreateProduct de Factoryfunc (f *ConcreteFactoryB) CreateProduct() Product {\treturn &amp;ConcreteProductB{}}func main() {\t// Cria uma fábrica para criar produtos do tipo A\tfactoryA := &amp;ConcreteFactoryA{}\t// Usa a fábrica para criar um produto do tipo A\tproductA := factoryA.CreateProduct()\t// Usa o produto do tipo A\tproductA.Use()\t// Cria uma fábrica para criar produtos do tipo B\tfactoryB := &amp;ConcreteFactoryB{}\t// Usa a fábrica para criar um produto do tipo B\tproductB := factoryB.CreateProduct()\t// Usa o produto do tipo B\tproductB.Use()}package mainimport (\t\"database/sql\"\t\"fmt\"\t\"log\"\t_ \"github.com/go-sql-driver/mysql\" // Driver MySQL\t_ \"github.com/lib/pq\"              // Driver PostgreSQL)// Database é a interface que define o comportamento dos diferentes tipos de conexões de banco de dadostype Database interface {\tConnect() (*sql.DB, error)}// MySQLDatabase é uma implementação de Database para MySQLtype MySQLDatabase struct {\tConnectionString string}// Connect implementa o método Connect de Database para MySQLfunc (db *MySQLDatabase) Connect() (*sql.DB, error) {\treturn sql.Open(\"mysql\", db.ConnectionString)}// PostgreSQLDatabase é uma implementação de Database para PostgreSQLtype PostgreSQLDatabase struct {\tConnectionString string}// Connect implementa o método Connect de Database para PostgreSQLfunc (db *PostgreSQLDatabase) Connect() (*sql.DB, error) {\treturn sql.Open(\"postgres\", db.ConnectionString)}// DatabaseFactory é uma fábrica para criar diferentes tipos de conexões de banco de dadostype DatabaseFactory struct{}// CreateDatabase cria uma conexão de banco de dados com base no tipo especificadofunc (f *DatabaseFactory) CreateDatabase(databaseType string, connectionString string) (Database, error) {\tswitch databaseType {\tcase \"mysql\":\t\treturn &amp;MySQLDatabase{ConnectionString: connectionString}, nil\tcase \"postgres\":\t\treturn &amp;PostgreSQLDatabase{ConnectionString: connectionString}, nil\tdefault:\t\treturn nil, fmt.Errorf(\"tipo de banco de dados não suportado: %s\", databaseType)\t}}func main() {\t// Cria uma fábrica de banco de dados\tfactory := &amp;DatabaseFactory{}\t// Cria uma conexão de banco de dados MySQL\tmysqlDB, err := factory.CreateDatabase(\"mysql\", \"user:password@tcp(localhost:3306)/database\")\tif err != nil {\t\tlog.Fatalf(\"Erro ao criar conexão MySQL: %v\", err)\t}\tdefer mysqlDB.Close()\tfmt.Println(\"Conexão MySQL estabelecida com sucesso\")\t// Cria uma conexão de banco de dados PostgreSQL\tpostgresDB, err := factory.CreateDatabase(\"postgres\", \"user=postgres password=password dbname=database sslmode=disable\")\tif err != nil {\t\tlog.Fatalf(\"Erro ao criar conexão PostgreSQL: %v\", err)\t}\tdefer postgresDB.Close()\tfmt.Println(\"Conexão PostgreSQL estabelecida com sucesso\")}",
            "content_html": "<h2 id=\"factory\">Factory</h2><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>package mainimport <span class=\"s2\">\"fmt\"</span>// Product é a interface que define o comportamento dos produtos<span class=\"nb\">type </span>Product interface <span class=\"o\">{</span>\tUse<span class=\"o\">()</span><span class=\"o\">}</span>// ConcreteProductA é uma implementação de Product<span class=\"nb\">type </span>ConcreteProductA struct<span class=\"o\">{}</span>// Use implementa o método Use de Productfunc <span class=\"o\">(</span>p <span class=\"k\">*</span>ConcreteProductA<span class=\"o\">)</span> Use<span class=\"o\">()</span> <span class=\"o\">{</span>\tfmt.Println<span class=\"o\">(</span><span class=\"s2\">\"Usando o produto A\"</span><span class=\"o\">)</span><span class=\"o\">}</span>// ConcreteProductB é outra implementação de Product<span class=\"nb\">type </span>ConcreteProductB struct<span class=\"o\">{}</span>// Use implementa o método Use de Productfunc <span class=\"o\">(</span>p <span class=\"k\">*</span>ConcreteProductB<span class=\"o\">)</span> Use<span class=\"o\">()</span> <span class=\"o\">{</span>\tfmt.Println<span class=\"o\">(</span><span class=\"s2\">\"Usando o produto B\"</span><span class=\"o\">)</span><span class=\"o\">}</span>// Factory é a interface que define o método de criação de produtos<span class=\"nb\">type </span>Factory interface <span class=\"o\">{</span>\tCreateProduct<span class=\"o\">()</span> Product<span class=\"o\">}</span>// ConcreteFactoryA é uma implementação de Factory que cria ConcreteProductA<span class=\"nb\">type </span>ConcreteFactoryA struct<span class=\"o\">{}</span>// CreateProduct implementa o método CreateProduct de Factoryfunc <span class=\"o\">(</span>f <span class=\"k\">*</span>ConcreteFactoryA<span class=\"o\">)</span> CreateProduct<span class=\"o\">()</span> Product <span class=\"o\">{</span>\t<span class=\"k\">return</span> &amp;ConcreteProductA<span class=\"o\">{}</span><span class=\"o\">}</span>// ConcreteFactoryB é outra implementação de Factory que cria ConcreteProductB<span class=\"nb\">type </span>ConcreteFactoryB struct<span class=\"o\">{}</span>// CreateProduct implementa o método CreateProduct de Factoryfunc <span class=\"o\">(</span>f <span class=\"k\">*</span>ConcreteFactoryB<span class=\"o\">)</span> CreateProduct<span class=\"o\">()</span> Product <span class=\"o\">{</span>\t<span class=\"k\">return</span> &amp;ConcreteProductB<span class=\"o\">{}</span><span class=\"o\">}</span>func main<span class=\"o\">()</span> <span class=\"o\">{</span>\t// Cria uma fábrica para criar produtos <span class=\"k\">do </span>tipo A\tfactoryA :<span class=\"o\">=</span> &amp;ConcreteFactoryA<span class=\"o\">{}</span>\t// Usa a fábrica para criar um produto <span class=\"k\">do </span>tipo A\tproductA :<span class=\"o\">=</span> factoryA.CreateProduct<span class=\"o\">()</span>\t// Usa o produto <span class=\"k\">do </span>tipo A\tproductA.Use<span class=\"o\">()</span>\t// Cria uma fábrica para criar produtos <span class=\"k\">do </span>tipo B\tfactoryB :<span class=\"o\">=</span> &amp;ConcreteFactoryB<span class=\"o\">{}</span>\t// Usa a fábrica para criar um produto <span class=\"k\">do </span>tipo B\tproductB :<span class=\"o\">=</span> factoryB.CreateProduct<span class=\"o\">()</span>\t// Usa o produto <span class=\"k\">do </span>tipo B\tproductB.Use<span class=\"o\">()</span><span class=\"o\">}</span></code></pre></div></div><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"database/sql\"</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"log\"</span>\t<span class=\"n\">_</span> <span class=\"s\">\"github.com/go-sql-driver/mysql\"</span> <span class=\"c\">// Driver MySQL</span>\t<span class=\"n\">_</span> <span class=\"s\">\"github.com/lib/pq\"</span>              <span class=\"c\">// Driver PostgreSQL</span><span class=\"p\">)</span><span class=\"c\">// Database é a interface que define o comportamento dos diferentes tipos de conexões de banco de dados</span><span class=\"k\">type</span> <span class=\"n\">Database</span> <span class=\"k\">interface</span> <span class=\"p\">{</span>\t<span class=\"n\">Connect</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">DB</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// MySQLDatabase é uma implementação de Database para MySQL</span><span class=\"k\">type</span> <span class=\"n\">MySQLDatabase</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">ConnectionString</span> <span class=\"kt\">string</span><span class=\"p\">}</span><span class=\"c\">// Connect implementa o método Connect de Database para MySQL</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">db</span> <span class=\"o\">*</span><span class=\"n\">MySQLDatabase</span><span class=\"p\">)</span> <span class=\"n\">Connect</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">DB</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">Open</span><span class=\"p\">(</span><span class=\"s\">\"mysql\"</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ConnectionString</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// PostgreSQLDatabase é uma implementação de Database para PostgreSQL</span><span class=\"k\">type</span> <span class=\"n\">PostgreSQLDatabase</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">ConnectionString</span> <span class=\"kt\">string</span><span class=\"p\">}</span><span class=\"c\">// Connect implementa o método Connect de Database para PostgreSQL</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">db</span> <span class=\"o\">*</span><span class=\"n\">PostgreSQLDatabase</span><span class=\"p\">)</span> <span class=\"n\">Connect</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">DB</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">Open</span><span class=\"p\">(</span><span class=\"s\">\"postgres\"</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ConnectionString</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// DatabaseFactory é uma fábrica para criar diferentes tipos de conexões de banco de dados</span><span class=\"k\">type</span> <span class=\"n\">DatabaseFactory</span> <span class=\"k\">struct</span><span class=\"p\">{}</span><span class=\"c\">// CreateDatabase cria uma conexão de banco de dados com base no tipo especificado</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">*</span><span class=\"n\">DatabaseFactory</span><span class=\"p\">)</span> <span class=\"n\">CreateDatabase</span><span class=\"p\">(</span><span class=\"n\">databaseType</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"n\">connectionString</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">Database</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">switch</span> <span class=\"n\">databaseType</span> <span class=\"p\">{</span>\t<span class=\"k\">case</span> <span class=\"s\">\"mysql\"</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">MySQLDatabase</span><span class=\"p\">{</span><span class=\"n\">ConnectionString</span><span class=\"o\">:</span> <span class=\"n\">connectionString</span><span class=\"p\">},</span> <span class=\"no\">nil</span>\t<span class=\"k\">case</span> <span class=\"s\">\"postgres\"</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">PostgreSQLDatabase</span><span class=\"p\">{</span><span class=\"n\">ConnectionString</span><span class=\"o\">:</span> <span class=\"n\">connectionString</span><span class=\"p\">},</span> <span class=\"no\">nil</span>\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Errorf</span><span class=\"p\">(</span><span class=\"s\">\"tipo de banco de dados não suportado: %s\"</span><span class=\"p\">,</span> <span class=\"n\">databaseType</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// Cria uma fábrica de banco de dados</span>\t<span class=\"n\">factory</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">DatabaseFactory</span><span class=\"p\">{}</span>\t<span class=\"c\">// Cria uma conexão de banco de dados MySQL</span>\t<span class=\"n\">mysqlDB</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">CreateDatabase</span><span class=\"p\">(</span><span class=\"s\">\"mysql\"</span><span class=\"p\">,</span> <span class=\"s\">\"user:password@tcp(localhost:3306)/database\"</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"Erro ao criar conexão MySQL: %v\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">defer</span> <span class=\"n\">mysqlDB</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Conexão MySQL estabelecida com sucesso\"</span><span class=\"p\">)</span>\t<span class=\"c\">// Cria uma conexão de banco de dados PostgreSQL</span>\t<span class=\"n\">postgresDB</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">CreateDatabase</span><span class=\"p\">(</span><span class=\"s\">\"postgres\"</span><span class=\"p\">,</span> <span class=\"s\">\"user=postgres password=password dbname=database sslmode=disable\"</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"Erro ao criar conexão PostgreSQL: %v\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">defer</span> <span class=\"n\">postgresDB</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Conexão PostgreSQL estabelecida com sucesso\"</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/12/01/factory.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/pilha.html",
            "title": "development/estrutura-de-dados/pilha",
            "summary": "Pilha",
            "content_text": "Pilha",
            "content_html": "<h2 id=\"pilha\">Pilha</h2>",
            "url": "/2024/12/01/pilha.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/fila.html",
            "title": "development/estrutura-de-dados/fila",
            "summary": "Fila",
            "content_text": "Fila",
            "content_html": "<h2 id=\"fila\">Fila</h2>",
            "url": "/2024/12/01/fila.html",
            
            
            
            "tags": ["fila","queue"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/redis.html",
            "title": "data/redis",
            "summary": "Redis",
            "content_text": "Redis",
            "content_html": "<h2 id=\"redis\">Redis</h2>",
            "url": "/2024/12/01/redis.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/rabbitmq.html",
            "title": "data/rabbitmq",
            "summary": "RabbitMQ",
            "content_text": "RabbitMQ",
            "content_html": "<h2 id=\"rabbitmq\">RabbitMQ</h2>",
            "url": "/2024/12/01/rabbitmq.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/postgres.html",
            "title": "data/postgres",
            "summary": "Postgres",
            "content_text": "Postgreshttps://pigsty.io/blog/pg/pg-eat-db-world/",
            "content_html": "<h2 id=\"postgres\">Postgres</h2><p>https://pigsty.io/blog/pg/pg-eat-db-world/</p>",
            "url": "/2024/12/01/postgres.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/mosquitto.html",
            "title": "data/mosquitto",
            "summary": "mosquitto",
            "content_text": "mosquitto",
            "content_html": "<h2 id=\"mosquitto\">mosquitto</h2>",
            "url": "/2024/12/01/mosquitto.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/kafka.html",
            "title": "data/kafka",
            "summary": "Kafka",
            "content_text": "Kafka",
            "content_html": "<h2 id=\"kafka\">Kafka</h2>",
            "url": "/2024/12/01/kafka.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/kafka-connect.html",
            "title": "data/kafka-connect",
            "summary": "Kafka Connect",
            "content_text": "Kafka Connect",
            "content_html": "<h2 id=\"kafka-connect\">Kafka Connect</h2>",
            "url": "/2024/12/01/kafka-connect.html",
            
            
            
            "tags": ["kafka","kafka-connect"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/ibmmq.html",
            "title": "data/ibmmq",
            "summary": "ibmmq",
            "content_text": "ibmmq",
            "content_html": "<h2 id=\"ibmmq\">ibmmq</h2>",
            "url": "/2024/12/01/ibmmq.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/apache-airflow.html",
            "title": "data/apache-airflox",
            "summary": "Apache Airflox",
            "content_text": "AirfloxO Apache Airflow é uma plataforma de gerenciamento de fluxo de trabalho de código aberto, originária do Airbnb, projetada para programar, organizar e monitorar fluxos de trabalho complexos. Com uma interface de usuário baseada na web para visualização de pipelines de processamento de dados em forma de DAGs (Directed Acyclic Graphs), o Airflow permite que os usuários gerenciem a orquestração de tarefas, garantindo que elas sejam executadas na ordem correta e no tempo certo. Você deve considerar o uso do Apache Airflow quando precisa de uma ferramenta para orquestrar tarefas complexas, dependências entre tarefas, e quando essas tarefas precisam ser executadas em horários específicos ou em resposta a certos gatilhos. Airflow é particularmente útil quando você tem fluxos de trabalho de dados que são complicados, repetitivos, e que necessitam de uma solução robusta para programação e monitoramento.10 Casos de Uso do Apache Airflow      ETL (Extract, Transform, Load): Automatizar processos de ETL para extrair dados de várias fontes, transformá-los conforme necessário, e carregá-los em um sistema de destino, como um data warehouse.        Aprendizado de Máquina: Orquestrar pipelines de dados para treinamento de modelos de aprendizado de máquina, incluindo pré-processamento de dados, treinamento, avaliação de modelos e implantação.        Processamento de Big Data: Gerenciar fluxos de trabalho que envolvem processamento de grandes volumes de dados utilizando tecnologias como Hadoop, Spark, entre outras.        Automação de Pipelines de CI/CD: Integrar com ferramentas de CI/CD para automatizar a implantação de código e outros processos de integração e entrega contínuas.        Análise de Dados: Automatizar a execução de scripts de análise de dados, garantindo que os dados mais recentes sejam sempre utilizados.        Gerenciamento de Bancos de Dados: Executar tarefas de manutenção regulares em bancos de dados, como backups, atualizações de esquema e otimizações.        Processamento de Imagens e Vídeos: Automatizar o processamento em lote de imagens e vídeos, incluindo conversões de formato, compressão e análise de imagem.        Gerenciamento de Redes Sociais: Automatizar a coleta de dados de redes sociais para análise de tendências, engajamento do usuário e monitoramento de marca.        Monitoramento de Dados: Configurar alertas e verificações regulares de qualidade de dados para garantir a integridade e precisão dos dados ao longo do tempo.        Integração de Dados Multiplataforma: Orquestrar o fluxo de dados entre diferentes sistemas e plataformas, garantindo a sincronização e atualização de dados em tempo real ou em lotes.  ",
            "content_html": "<h2 id=\"airflox\">Airflox</h2><p>O Apache Airflow é uma plataforma de gerenciamento de fluxo de trabalho de código aberto, originária do Airbnb, projetada para programar, organizar e monitorar fluxos de trabalho complexos. Com uma interface de usuário baseada na web para visualização de pipelines de processamento de dados em forma de DAGs (Directed Acyclic Graphs), o Airflow permite que os usuários gerenciem a orquestração de tarefas, garantindo que elas sejam executadas na ordem correta e no tempo certo. Você deve considerar o uso do Apache Airflow quando precisa de uma ferramenta para orquestrar tarefas complexas, dependências entre tarefas, e quando essas tarefas precisam ser executadas em horários específicos ou em resposta a certos gatilhos. Airflow é particularmente útil quando você tem fluxos de trabalho de dados que são complicados, repetitivos, e que necessitam de uma solução robusta para programação e monitoramento.</p><h2 id=\"10-casos-de-uso-do-apache-airflow\">10 Casos de Uso do Apache Airflow</h2><ol>  <li>    <p>ETL (Extract, Transform, Load): Automatizar processos de ETL para extrair dados de várias fontes, transformá-los conforme necessário, e carregá-los em um sistema de destino, como um data warehouse.</p>  </li>  <li>    <p>Aprendizado de Máquina: Orquestrar pipelines de dados para treinamento de modelos de aprendizado de máquina, incluindo pré-processamento de dados, treinamento, avaliação de modelos e implantação.</p>  </li>  <li>    <p>Processamento de Big Data: Gerenciar fluxos de trabalho que envolvem processamento de grandes volumes de dados utilizando tecnologias como Hadoop, Spark, entre outras.</p>  </li>  <li>    <p>Automação de Pipelines de CI/CD: Integrar com ferramentas de CI/CD para automatizar a implantação de código e outros processos de integração e entrega contínuas.</p>  </li>  <li>    <p>Análise de Dados: Automatizar a execução de scripts de análise de dados, garantindo que os dados mais recentes sejam sempre utilizados.</p>  </li>  <li>    <p>Gerenciamento de Bancos de Dados: Executar tarefas de manutenção regulares em bancos de dados, como backups, atualizações de esquema e otimizações.</p>  </li>  <li>    <p>Processamento de Imagens e Vídeos: Automatizar o processamento em lote de imagens e vídeos, incluindo conversões de formato, compressão e análise de imagem.</p>  </li>  <li>    <p>Gerenciamento de Redes Sociais: Automatizar a coleta de dados de redes sociais para análise de tendências, engajamento do usuário e monitoramento de marca.</p>  </li>  <li>    <p>Monitoramento de Dados: Configurar alertas e verificações regulares de qualidade de dados para garantir a integridade e precisão dos dados ao longo do tempo.</p>  </li>  <li>    <p>Integração de Dados Multiplataforma: Orquestrar o fluxo de dados entre diferentes sistemas e plataformas, garantindo a sincronização e atualização de dados em tempo real ou em lotes.</p>  </li></ol>",
            "url": "/2024/12/01/apache-airflow.html",
            
            
            
            "tags": ["apache","airflow"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/11/24/reverse-ssh-tunneling.html",
            "title": "development/golang/reverse-ssh-tunneling",
            "summary": "Reverse SSH Tunneling",
            "content_text": "Reverse SSH Tunnelingpackage mainimport (\t\"fmt\"\t\"io\"\t\"io/ioutil\"\t\"log\"\t\"net\"\t\"golang.org/x/crypto/ssh\")type Endpoint struct {\tHost string\tPort int}func (endpoint *Endpoint) String() string {\treturn fmt.Sprintf(\"%s:%d\", endpoint.Host, endpoint.Port)}func handleClient(client net.Conn, remote net.Conn) {\tdefer client.Close()\tchDone := make(chan bool)\t// Start remote -&gt; local data transfer\tgo func() {\t\t_, err := io.Copy(client, remote)\t\tif err != nil {\t\t\tlog.Printf(\"error while copy remote-&gt;local: %s\", err)\t\t}\t\tchDone &lt;- true\t}()\t// Start local -&gt; remote data transfer\tgo func() {\t\t_, err := io.Copy(remote, client)\t\tif err != nil {\t\t\tlog.Println(fmt.Sprintf(\"error while copy local-&gt;remote: %s\", err))\t\t}\t\tchDone &lt;- true\t}()\t&lt;-chDone}func publicKeyFile(file string) ssh.AuthMethod {\tbuffer, err := ioutil.ReadFile(file)\tif err != nil {\t\tlog.Fatalln(fmt.Sprintf(\"Cannot read SSH public key file %s\", file))\t\treturn nil\t}\tkey, err := ssh.ParsePrivateKey(buffer)\tif err != nil {\t\tlog.Fatalln(fmt.Sprintf(\"Cannot parse SSH public key file %s\", file))\t\treturn nil\t}\treturn ssh.PublicKeys(key)}// local service to be forwardedvar localEndpoint = Endpoint{\tHost: \"localhost\",\tPort: 8000,}// remote SSH servervar serverEndpoint = Endpoint{\tHost: \"192.168.100.19\",\tPort: 22,}// remote forwarding port (on remote SSH server network)var remoteEndpoint = Endpoint{\tHost: \"localhost\",\tPort: 9000,}func main() {\t// refer to https://godoc.org/golang.org/x/crypto/ssh for other authentication types\tsshConfig := &amp;ssh.ClientConfig{\t\t// SSH connection username\t\tUser: \"&lt;your-user&gt;\",\t\tAuth: []ssh.AuthMethod{\t\t\t// put here your private key path\t\t\t//publicKeyFile(\"/home/apolzek/.ssh/id_ed25519\"),\t\t\tssh.Password(\"&lt;your-password&gt;\"),\t\t},\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\t}\t// Connect to SSH remote server using serverEndpoint\tserverConn, err := ssh.Dial(\"tcp\", serverEndpoint.String(), sshConfig)\tif err != nil {\t\tlog.Fatalln(fmt.Printf(\"Dial INTO remote server error: %s\", err))\t}\t// Listen on remote server port\tlistener, err := serverConn.Listen(\"tcp\", remoteEndpoint.String())\tif err != nil {\t\tlog.Fatalln(fmt.Printf(\"Listen open port ON remote server error: %s\", err))\t}\tdefer listener.Close()\t// handle incoming connections on reverse forwarded tunnel\tfor {\t\t// Open a (local) connection to localEndpoint whose content will be forwarded so serverEndpoint\t\tlocal, err := net.Dial(\"tcp\", localEndpoint.String())\t\tif err != nil {\t\t\tlog.Fatalln(fmt.Printf(\"Dial INTO local service error: %s\", err))\t\t}\t\tclient, err := listener.Accept()\t\tif err != nil {\t\t\tlog.Fatalln(err)\t\t}\t\thandleClient(client, local)\t}}",
            "content_html": "<h2 id=\"reverse-ssh-tunneling\">Reverse SSH Tunneling</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"io\"</span>\t<span class=\"s\">\"io/ioutil\"</span>\t<span class=\"s\">\"log\"</span>\t<span class=\"s\">\"net\"</span>\t<span class=\"s\">\"golang.org/x/crypto/ssh\"</span><span class=\"p\">)</span><span class=\"k\">type</span> <span class=\"n\">Endpoint</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">Host</span> <span class=\"kt\">string</span>\t<span class=\"n\">Port</span> <span class=\"kt\">int</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">endpoint</span> <span class=\"o\">*</span><span class=\"n\">Endpoint</span><span class=\"p\">)</span> <span class=\"n\">String</span><span class=\"p\">()</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"%s:%d\"</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">.</span><span class=\"n\">Host</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">.</span><span class=\"n\">Port</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">handleClient</span><span class=\"p\">(</span><span class=\"n\">client</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Conn</span><span class=\"p\">,</span> <span class=\"n\">remote</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Conn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">defer</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"n\">chDone</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"kt\">bool</span><span class=\"p\">)</span>\t<span class=\"c\">// Start remote -&gt; local data transfer</span>\t<span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t\t<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"p\">)</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"error while copy remote-&gt;local: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">chDone</span> <span class=\"o\">&lt;-</span> <span class=\"no\">true</span>\t<span class=\"p\">}()</span>\t<span class=\"c\">// Start local -&gt; remote data transfer</span>\t<span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t\t<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">remote</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">)</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"error while copy local-&gt;remote: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">chDone</span> <span class=\"o\">&lt;-</span> <span class=\"no\">true</span>\t<span class=\"p\">}()</span>\t<span class=\"o\">&lt;-</span><span class=\"n\">chDone</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">publicKeyFile</span><span class=\"p\">(</span><span class=\"n\">file</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">AuthMethod</span> <span class=\"p\">{</span>\t<span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ioutil</span><span class=\"o\">.</span><span class=\"n\">ReadFile</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"Cannot read SSH public key file %s\"</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">))</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span>\t<span class=\"p\">}</span>\t<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">ParsePrivateKey</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"Cannot parse SSH public key file %s\"</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">))</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">PublicKeys</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// local service to be forwarded</span><span class=\"k\">var</span> <span class=\"n\">localEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"localhost\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">8000</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"c\">// remote SSH server</span><span class=\"k\">var</span> <span class=\"n\">serverEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"192.168.100.19\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">22</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"c\">// remote forwarding port (on remote SSH server network)</span><span class=\"k\">var</span> <span class=\"n\">remoteEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"localhost\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">9000</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// refer to https://godoc.org/golang.org/x/crypto/ssh for other authentication types</span>\t<span class=\"n\">sshConfig</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">ClientConfig</span><span class=\"p\">{</span>\t\t<span class=\"c\">// SSH connection username</span>\t\t<span class=\"n\">User</span><span class=\"o\">:</span> <span class=\"s\">\"&lt;your-user&gt;\"</span><span class=\"p\">,</span>\t\t<span class=\"n\">Auth</span><span class=\"o\">:</span> <span class=\"p\">[]</span><span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">AuthMethod</span><span class=\"p\">{</span>\t\t\t<span class=\"c\">// put here your private key path</span>\t\t\t<span class=\"c\">//publicKeyFile(\"/home/apolzek/.ssh/id_ed25519\"),</span>\t\t\t<span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">Password</span><span class=\"p\">(</span><span class=\"s\">\"&lt;your-password&gt;\"</span><span class=\"p\">),</span>\t\t<span class=\"p\">},</span>\t\t<span class=\"n\">HostKeyCallback</span><span class=\"o\">:</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">InsecureIgnoreHostKey</span><span class=\"p\">(),</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// Connect to SSH remote server using serverEndpoint</span>\t<span class=\"n\">serverConn</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">Dial</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">serverEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span> <span class=\"n\">sshConfig</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Dial INTO remote server error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// Listen on remote server port</span>\t<span class=\"n\">listener</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">serverConn</span><span class=\"o\">.</span><span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">remoteEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">())</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Listen open port ON remote server error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t<span class=\"p\">}</span>\t<span class=\"k\">defer</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"c\">// handle incoming connections on reverse forwarded tunnel</span>\t<span class=\"k\">for</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// Open a (local) connection to localEndpoint whose content will be forwarded so serverEndpoint</span>\t\t<span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Dial</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">localEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">())</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Dial INTO local service error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">Accept</span><span class=\"p\">()</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">handleClient</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">local</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/11/24/reverse-ssh-tunneling.html",
            
            
            
            "tags": ["go","golang"],
            
            "date_published": "2024-11-24T00:00:00+00:00",
            "date_modified": "2024-11-24T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/10/25/eks.html",
            "title": "cloud/aws/eks",
            "summary": "EKS",
            "content_text": "EKS",
            "content_html": "<h1 id=\"eks\">EKS</h1>",
            "url": "/2024/10/25/eks.html",
            
            
            
            "tags": ["eks","aws","kubernetes"],
            
            "date_published": "2024-10-25T00:00:00+00:00",
            "date_modified": "2024-10-25T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/28/sobre-o-futuro.html",
            "title": "mynotes/sobre-o-futuro",
            "summary": "Sobre o futuro",
            "content_text": "Sobre o futuroEscrevo esse texto hoje, dia 08 de abril de 2024. Meu objetivo é exercitar a mente em uma breve reflexão sobre como vejo o futuro. O futuro do Brasil, o futuro do mundo e o meu futuro. É engraçado porque não vejo uma maneira de iniciar escrevendo sem atacar os problemas atuais como corrupção do Brasil, educação precária, guerras e o fato de que os seres humanos estão se distanciando. Mas eu tenho uma técnica que funciona para esse caso, eu a utilizo na minha profissão. Quando algo está ruim a nível de você não conseguir nem descrever, é hora de parar e simplesmente imaginar como você queria que aquilo fosse. Eu acredito que foi isso que Marx fez quando estava trabalhando na sua obra. O grande problema ao fazer isso é que é natural esquecer a coisa mais importante para se mudar algo, a natureza humana. Sim, mesmo com um projeto perfeito, factível e viável ainda sim estamos todos destinados a declinar pelo simples fato de que o ser humano é um ser complexo. Isso se prova invertendo a situação, o homem em um projeto completamente imperfeito, inviável e aparentemente impossível de concretizar consegue as vezes superar limites para o faze-lo. O que eu quero dizer até aqui é que não existe uma meneira de imaginar um mundo diferente do que está agora, mas eu garanto que ele pode acontecer. Sim temos a imensa capcidade de nos colocar no buraco mas também de saltar para fora. Agora um fato precisa ser dito, é impossível pensar em mudar o futuro sem o respeito e amor ao próximo. Acredito que isso é a base da mudança ao qual não podemos fugir. Mas aqui exatamente nesse ponto entra um grande problema que eu mesmo me vejo enfrentando. Como amar e respeitar alguém que não faz o mesmo por mim. Naturalmente me vem a frase de um homem: “Pai, perdoa-lhes, pois não sabem o que estão fazendo”. A única forma que encontrei de fazer isso é creendo e confiando em Deus. Mas eu não queria levar esse texto para o lado filosófico ou religioso, gostaria de me concentrar em uma síntese mais genérica. Hoje aos meus quase 29 anos posso listar alguns dos meus objetivos para te ajudar a entender onde quero chegar. Eu quero um lar, inviolável e seguro para criar meu filho. Outro objetivo é dar uma boa educação ao meu filho e ensinar a ele valores que já não são mais mencionados. Meu terceiro e último objetivo é ter tempo e tranquilidade para aprender. Eu demorei a aprender a estudar, mas depois que isso aconteceu um mundo novo se abriu e cada dia mais tenho sede de conhecimento. Mas esse texto não é sobre mim, é sobre o futuro. Quando eu analiso o meu próprio caso a primeira coisa que vem na cabeça é que para concretizar isso eu preciso de independência através do dinheiro. Convenhamos que o papel utilizado como moeda de troca entre os homens consegue fazer milagre. Mas aqui as coisas comessam a se complicar, por exemplo. Se eu trabalho 12h por dia arduamente seja para empreender ou para ter uma profissão que paga bem eu não sobro energia para minha família e consequentemente não consigo concretizar meu objetivo de dar uma boa educação do meu filho. Isso acontece simplesmente porque precisamos estar engrenado no tempo certo para se fazer as coisas. Não adiante o Usain Bolt treinar arduamente e chegar atrasado na própria competição de corrida. Aqui vale uma tangente. O melhor concelheiro para sua vida é você mesmo. Você pode pedir opinião a um amigo, um couch, seu cônjugue e até Deus. Mas é sua obrigação analisar a sua vida e tentar buscar alguma forma de melhora-la. Isso é intransferível e quanto antes você aceitar melhor. Mas voltando ao assunto, como então eu mudo meu futuro ?, ajudo a mudar o do meu país e talvez o do mundo ? Acontece que quando gastamos energia fazendo algo que é bom, isso tem reflexos intangíveis. Antes de seguir, o que é “algo bom” ? Eu vou resumir, para mim é algo que eu faço com a consciência limpa, que eu sinto que traz melhora na vida das pessoas e automaticamente na minha também. Algo que que eu sei que está dentro da lei de Deus, da lei do homem e dentro dos meus próprios valóres e ética. Ou seja, algo que faço com a consciência limpa. E sim, eu já acabei. Pra mim se você já tem essa ideia enraizada no seu dia dia a única coisa que vai variar é quantidade de energia que você coloca nisso. Se você coloca muita, automatcamente começa a mudar seu futuro, do seu país e do mundo. É intrigante, tudo parecia complexo de mudar no inicio e agora vemos uma luz no fim do túnel. Mas e quanto a meus semelhantes ? Eu tenho uma ideia de resposta .. Você não vai ganhar todas as lutas que travar, não consegue mudar as pessoas mesmo com um bom exemplo mas você vai ter em mente que cada pessoa tem seu tempo, você deve respeitar isso e não deixar que isso o atrapalhe. Renovemos nossas energias todos os dias, agindo com boa intenção e respeitando ao próximo e ai sim o um futuro melhor virá. A não ser que um meteoro atrapalhe. Sobre nosso Brasil, todos sabem que precisamos de homens de bem ocupando não apenas a classe política, precisamos deles em todos os lugares. Munidos de boas ideias, de disposição e ânimo, com amor a pátria e a seu semelhante. Isso também parece impossível mas demos tempo a nosso Brasil, somos jovens e com um passado conturbado. Por fim poderia-mos pensas em como mudar o mundo transcendendo nossa energia a pensar em algo leve ao bem comum do homem em si. Esse último passo é um desafio gigante e talvez um dia eu volte a escrever sobre isso. Eu gostaria de encerrar trasnmitindo a sensação que sinto agora, de estar fazendo essa reflexão porque tenho a oportunidade, de me achar privilegiado por conseguir fazer isso e também por ter as condições para faze-lo, mas mesmo os que não tem, eu gostaria de fazer algo para que vocês um dia também tivessem. Uma boa semana !",
            "content_html": "<h2 id=\"sobre-o-futuro\">Sobre o futuro</h2><p>Escrevo esse texto hoje, dia 08 de abril de 2024. Meu objetivo é exercitar a mente em uma breve reflexão sobre como vejo o futuro. O futuro do Brasil, o futuro do mundo e o meu futuro. É engraçado porque não vejo uma maneira de iniciar escrevendo sem atacar os problemas atuais como corrupção do Brasil, educação precária, guerras e o fato de que os seres humanos estão se distanciando. Mas eu tenho uma técnica que funciona para esse caso, eu a utilizo na minha profissão. Quando algo está ruim a nível de você não conseguir nem descrever, é hora de parar e simplesmente imaginar como você queria que aquilo fosse. Eu acredito que foi isso que Marx fez quando estava trabalhando na sua obra. O grande problema ao fazer isso é que é natural esquecer a coisa mais importante para se mudar algo, a natureza humana. Sim, mesmo com um projeto perfeito, factível e viável ainda sim estamos todos destinados a declinar pelo simples fato de que o ser humano é um ser complexo. Isso se prova invertendo a situação, o homem em um projeto completamente imperfeito, inviável e aparentemente impossível de concretizar consegue as vezes superar limites para o faze-lo. O que eu quero dizer até aqui é que não existe uma meneira de imaginar um mundo diferente do que está agora, mas eu garanto que ele pode acontecer. Sim temos a imensa capcidade de nos colocar no buraco mas também de saltar para fora. Agora um fato precisa ser dito, é impossível pensar em mudar o futuro sem o respeito e amor ao próximo. Acredito que isso é a base da mudança ao qual não podemos fugir. Mas aqui exatamente nesse ponto entra um grande problema que eu mesmo me vejo enfrentando. Como amar e respeitar alguém que não faz o mesmo por mim. Naturalmente me vem a frase de um homem: “Pai, perdoa-lhes, pois não sabem o que estão fazendo”. A única forma que encontrei de fazer isso é creendo e confiando em Deus. Mas eu não queria levar esse texto para o lado filosófico ou religioso, gostaria de me concentrar em uma síntese mais genérica. Hoje aos meus quase 29 anos posso listar alguns dos meus objetivos para te ajudar a entender onde quero chegar. Eu quero um lar, inviolável e seguro para criar meu filho. Outro objetivo é dar uma boa educação ao meu filho e ensinar a ele valores que já não são mais mencionados. Meu terceiro e último objetivo é ter tempo e tranquilidade para aprender. Eu demorei a aprender a estudar, mas depois que isso aconteceu um mundo novo se abriu e cada dia mais tenho sede de conhecimento. Mas esse texto não é sobre mim, é sobre o futuro. Quando eu analiso o meu próprio caso a primeira coisa que vem na cabeça é que para concretizar isso eu preciso de independência através do dinheiro. Convenhamos que o papel utilizado como moeda de troca entre os homens consegue fazer milagre. Mas aqui as coisas comessam a se complicar, por exemplo. Se eu trabalho 12h por dia arduamente seja para empreender ou para ter uma profissão que paga bem eu não sobro energia para minha família e consequentemente não consigo concretizar meu objetivo de dar uma boa educação do meu filho. Isso acontece simplesmente porque precisamos estar engrenado no tempo certo para se fazer as coisas. Não adiante o Usain Bolt treinar arduamente e chegar atrasado na própria competição de corrida. Aqui vale uma tangente. O melhor concelheiro para sua vida é você mesmo. Você pode pedir opinião a um amigo, um couch, seu cônjugue e até Deus. Mas é sua obrigação analisar a sua vida e tentar buscar alguma forma de melhora-la. Isso é intransferível e quanto antes você aceitar melhor. Mas voltando ao assunto, como então eu mudo meu futuro ?, ajudo a mudar o do meu país e talvez o do mundo ? Acontece que quando gastamos energia fazendo algo que é bom, isso tem reflexos intangíveis. Antes de seguir, o que é “algo bom” ? Eu vou resumir, para mim é algo que eu faço com a consciência limpa, que eu sinto que traz melhora na vida das pessoas e automaticamente na minha também. Algo que que eu sei que está dentro da lei de Deus, da lei do homem e dentro dos meus próprios valóres e ética. Ou seja, algo que faço com a consciência limpa. E sim, eu já acabei. Pra mim se você já tem essa ideia enraizada no seu dia dia a única coisa que vai variar é quantidade de energia que você coloca nisso. Se você coloca muita, automatcamente começa a mudar seu futuro, do seu país e do mundo. É intrigante, tudo parecia complexo de mudar no inicio e agora vemos uma luz no fim do túnel. Mas e quanto a meus semelhantes ? Eu tenho uma ideia de resposta .. Você não vai ganhar todas as lutas que travar, não consegue mudar as pessoas mesmo com um bom exemplo mas você vai ter em mente que cada pessoa tem seu tempo, você deve respeitar isso e não deixar que isso o atrapalhe. Renovemos nossas energias todos os dias, agindo com boa intenção e respeitando ao próximo e ai sim o um futuro melhor virá. A não ser que um meteoro atrapalhe. Sobre nosso Brasil, todos sabem que precisamos de homens de bem ocupando não apenas a classe política, precisamos deles em todos os lugares. Munidos de boas ideias, de disposição e ânimo, com amor a pátria e a seu semelhante. Isso também parece impossível mas demos tempo a nosso Brasil, somos jovens e com um passado conturbado. Por fim poderia-mos pensas em como mudar o mundo transcendendo nossa energia a pensar em algo leve ao bem comum do homem em si. Esse último passo é um desafio gigante e talvez um dia eu volte a escrever sobre isso. Eu gostaria de encerrar trasnmitindo a sensação que sinto agora, de estar fazendo essa reflexão porque tenho a oportunidade, de me achar privilegiado por conseguir fazer isso e também por ter as condições para faze-lo, mas mesmo os que não tem, eu gostaria de fazer algo para que vocês um dia também tivessem. Uma boa semana !</p>",
            "url": "/2024/04/28/sobre-o-futuro.html",
            
            
            
            
            
            "date_published": "2024-04-28T00:00:00+00:00",
            "date_modified": "2024-04-28T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/03/sftpgo.html",
            "title": "tools/sftpgo",
            "summary": "q",
            "content_text": "sftpgomkdir -p /tmp/sftpgo-data ; docker run --name some-sftpgo -p 8080:8080 -p 2022:2022 -e SFTPGO_DATA_PROVIDER__CREATE_DEFAULT_ADMIN='true' -e SFTPGO_DEFAULT_ADMIN_USERNAME='admin' -e SFTPGO_DEFAULT_ADMIN_PASSWORD='pass@123' -v /tmp/sftpgo-data:/sftpgo-data  -d drakkan/sftpgo:latest",
            "content_html": "<h2 id=\"sftpgo\">sftpgo</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mkdir -p /tmp/sftpgo-data ; docker run --name some-sftpgo -p 8080:8080 -p 2022:2022 -e SFTPGO_DATA_PROVIDER__CREATE_DEFAULT_ADMIN='true' -e SFTPGO_DEFAULT_ADMIN_USERNAME='admin' -e SFTPGO_DEFAULT_ADMIN_PASSWORD='pass@123' -v /tmp/sftpgo-data:/sftpgo-data  -d drakkan/sftpgo:latest</code></pre></div></div>",
            "url": "/2024/04/03/sftpgo.html",
            
            
            
            
            
            "date_published": "2024-04-03T00:00:00+00:00",
            "date_modified": "2024-04-03T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/03/dockerfile.html",
            "title": "tools/docker/dockerfile",
            "summary": "dockerfile",
            "content_text": "dockerfile",
            "content_html": "<h2 id=\"dockerfile\">dockerfile</h2>",
            "url": "/2024/04/03/dockerfile.html",
            
            
            
            "tags": ["tools","docker"],
            
            "date_published": "2024-04-03T00:00:00+00:00",
            "date_modified": "2024-04-03T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/03/docker-api.html",
            "title": "tools/docker/docker-api",
            "summary": "docker-api",
            "content_text": "docker-apigo get github.com/docker/docker/clientpackage mainimport (\t\"context\"\t\"fmt\"\t\"github.com/docker/docker/api/types\"\t\"github.com/docker/docker/client\")func main() {\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\tif err != nil {\t\tpanic(err)\t}\tcontainers, err := cli.ContainerList(context.Background(), types.ContainerListOptions{})\tif err != nil {\t\tpanic(err)\t}\tfmt.Println(\"Lista de containers:\")\tfor _, container := range containers {\t\tfmt.Printf(\"ID: %s Image: %s Command: %s Created: %s Status: %s Names: %v\\n\",\t\t\tcontainer.ID[:10], container.Image, container.Command, container.Created, container.Status, container.Names)\t}}",
            "content_html": "<h2 id=\"docker-api\">docker-api</h2><p>go get github.com/docker/docker/client</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>package mainimport (\t\"context\"\t\"fmt\"\t\"github.com/docker/docker/api/types\"\t\"github.com/docker/docker/client\")func main() {\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\tif err != nil {\t\tpanic(err)\t}\tcontainers, err := cli.ContainerList(context.Background(), types.ContainerListOptions{})\tif err != nil {\t\tpanic(err)\t}\tfmt.Println(\"Lista de containers:\")\tfor _, container := range containers {\t\tfmt.Printf(\"ID: %s Image: %s Command: %s Created: %s Status: %s Names: %v\\n\",\t\t\tcontainer.ID[:10], container.Image, container.Command, container.Created, container.Status, container.Names)\t}}</code></pre></div></div>",
            "url": "/2024/04/03/docker-api.html",
            
            
            
            "tags": ["tools","docker"],
            
            "date_published": "2024-04-03T00:00:00+00:00",
            "date_modified": "2024-04-03T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/03/sre-interview.html",
            "title": "tools/sre-interview",
            "summary": "sre-interview",
            "content_text": "sre-interview  Cap theorem  12 Factors  Authentication and Authorization  Rest x gRPC x GraphQL  IaC          Terraform        DDD  Container orchestration          Kubernetes        Operating Systems          Linux                  Kernel Params                    Windows        Message Broker          RabbitMQ      Apache Kafka      ActiveMQ      Amazon SQS      Microsoft Azure Service Bus        Observability and Monitoring          DORA      Prometheus      Grafana      FluentD      Fluentbit      OpenTelemetry      eBPF        CICD          Jenkins      Github Actions      GitlabCI      Bitbucket Pipelines        Programming          Python      Golang        Cloud          AWS      Azure      Google Cloud Platform      ",
            "content_html": "<h2 id=\"sre-interview\">sre-interview</h2><ul>  <li>Cap theorem</li>  <li>12 Factors</li>  <li>Authentication and Authorization</li>  <li>Rest x gRPC x GraphQL</li>  <li>IaC    <ul>      <li>Terraform</li>    </ul>  </li>  <li>DDD</li>  <li>Container orchestration    <ul>      <li>Kubernetes</li>    </ul>  </li>  <li>Operating Systems    <ul>      <li>Linux        <ul>          <li>Kernel Params</li>        </ul>      </li>      <li>Windows</li>    </ul>  </li>  <li>Message Broker    <ul>      <li>RabbitMQ</li>      <li>Apache Kafka</li>      <li>ActiveMQ</li>      <li>Amazon SQS</li>      <li>Microsoft Azure Service Bus</li>    </ul>  </li>  <li>Observability and Monitoring    <ul>      <li>DORA</li>      <li>Prometheus</li>      <li>Grafana</li>      <li>FluentD</li>      <li>Fluentbit</li>      <li>OpenTelemetry</li>      <li>eBPF</li>    </ul>  </li>  <li>CICD    <ul>      <li>Jenkins</li>      <li>Github Actions</li>      <li>GitlabCI</li>      <li>Bitbucket Pipelines</li>    </ul>  </li>  <li>Programming    <ul>      <li>Python</li>      <li>Golang</li>    </ul>  </li>  <li>Cloud    <ul>      <li>AWS</li>      <li>Azure</li>      <li>Google Cloud Platform</li>    </ul>  </li></ul>",
            "url": "/2024/04/03/sre-interview.html",
            
            
            
            
            
            "date_published": "2024-04-03T00:00:00+00:00",
            "date_modified": "2024-04-03T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/03/sre-commands.html",
            "title": "tools/sre-commands",
            "summary": "sre-commands",
            "content_text": "sre-commandscopy/paste using xclip&lt;comando&gt; | xclip -selection clipboardpwd | xclip -selection clipboardalias ccp='xclip -selection clipboard'base64 ~/.bashrc | xclip -selection clipboardlist today’s files, recursively, and show the size in MBfind . -type f -mtime 0 -exec ls -lh {} + | awk '{ print $5, $9 }'check the external connections to your machine, including the ports being usednetstat -tunapss -tunapss -tunap | grep -v '127.0.0.1\\|::1'create http server(ways)ruby -run -ehttpd . -p8000php -S localhost:8000python3 -m http.servernpm install -g http-serverhttp-server -p 8000while true; do { echo -ne \"HTTP/1.1 200 OK\\r\\nContent-Length: $(wc -c &lt;index.html)\\r\\nContent-Type: text/html\\r\\n\\r\\n\"; cat index.html; } | nc -l -p 8080; done",
            "content_html": "<h2 id=\"sre-commands\">sre-commands</h2><p>copy/paste using xclip</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;comando&gt; | xclip <span class=\"nt\">-selection</span> clipboard<span class=\"nb\">pwd</span> | xclip <span class=\"nt\">-selection</span> clipboard<span class=\"nb\">alias </span><span class=\"nv\">ccp</span><span class=\"o\">=</span><span class=\"s1\">'xclip -selection clipboard'</span><span class=\"nb\">base64</span> ~/.bashrc | xclip <span class=\"nt\">-selection</span> clipboard</code></pre></div></div><p>list today’s files, recursively, and show the size in MB</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find <span class=\"nb\">.</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-mtime</span> 0 <span class=\"nt\">-exec</span> <span class=\"nb\">ls</span> <span class=\"nt\">-lh</span> <span class=\"o\">{}</span> + | <span class=\"nb\">awk</span> <span class=\"s1\">'{ print $5, $9 }'</span></code></pre></div></div><p>check the external connections to your machine, including the ports being used</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>netstat <span class=\"nt\">-tunap</span>ss <span class=\"nt\">-tunap</span>ss <span class=\"nt\">-tunap</span> | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s1\">'127.0.0.1\\|::1'</span></code></pre></div></div><p>create http server(ways)</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ruby <span class=\"nt\">-run</span> <span class=\"nt\">-ehttpd</span> <span class=\"nb\">.</span> <span class=\"nt\">-p8000</span>php <span class=\"nt\">-S</span> localhost:8000python3 <span class=\"nt\">-m</span> http.servernpm <span class=\"nb\">install</span> <span class=\"nt\">-g</span> http-serverhttp-server <span class=\"nt\">-p</span> 8000<span class=\"k\">while </span><span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"nb\">echo</span> <span class=\"nt\">-ne</span> <span class=\"s2\">\"HTTP/1.1 200 OK</span><span class=\"se\">\\r\\n</span><span class=\"s2\">Content-Length: </span><span class=\"si\">$(</span><span class=\"nb\">wc</span> <span class=\"nt\">-c</span> &lt;index.html<span class=\"si\">)</span><span class=\"se\">\\r\\n</span><span class=\"s2\">Content-Type: text/html</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s2\">\"</span><span class=\"p\">;</span> <span class=\"nb\">cat </span>index.html<span class=\"p\">;</span> <span class=\"o\">}</span> | nc <span class=\"nt\">-l</span> <span class=\"nt\">-p</span> 8080<span class=\"p\">;</span> <span class=\"k\">done</span></code></pre></div></div>",
            "url": "/2024/04/03/sre-commands.html",
            
            
            
            
            
            "date_published": "2024-04-03T00:00:00+00:00",
            "date_modified": "2024-04-03T00:00:00+00:00",
            
                "author": 
                ""
                
            
        }
    
    ]
}