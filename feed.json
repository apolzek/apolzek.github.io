{
    "version": "https://jsonfeed.org/version/1",
    "title": "apolzek",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "blog",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
"items": [
    
        {
            "id": "/2024/12/01/processes.html",
            "title": "operating-system/processes",
            "summary": "Processes",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/processes.html",
            
            
            
            "tags": ["linux","processes"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/network.html",
            "title": "operating-system/network",
            "summary": "Network",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/network.html",
            
            
            
            "tags": ["linux","network"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/rust/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/basicao.html",
            "title": "development/ruby/basicao",
            "summary": "Overview",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/basicao.html",
            
            
            
            "tags": ["ruby","overview"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/python/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/lua/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/javascript/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/java/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            "tags": ["java","overview"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/slices.html",
            "title": "development/golang/slices",
            "summary": "Slices",
            "content_text": "Slicespackage mainimport \"fmt\"func main() {\tvar s = []int{1, 2, 3}\tmodifySlice(s)\tfmt.Println(s)}func modifySlice(i []int) {\ti[0] = 3\ti = append(i, 4)\ti[2] = 4}O motivo é que o na verdade isso é um ponteiro, quando você deu append o ponteiro antigo foi descartado e um novo foi gerado contendo todo que havia no antigo i mais o novo elemento. Como s ainda aponta para o ponteiro antigo print vai imprimir o conteúdo antigo que teve apenas o primeiro elemento alterado.package mainimport \"fmt\"func main() {\tvar s = []int{1, 2, 3}\tmodifySlice(&amp;s)\tfmt.Println(s)}func modifySlice(i *[]int) {\t// Corrija o slice usando o ponteiro\t(*i)[0] = 3\t*i = append(*i, 4)\t(*i)[2] = 4}",
            "content_html": "<h2 id=\"slices\">Slices</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">}</span>\t<span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">i</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">3</span>\t<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">)</span>\t<span class=\"n\">i</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">4</span><span class=\"p\">}</span></code></pre></div></div><p>O motivo é que o na verdade isso é um ponteiro, quando você deu append o ponteiro antigo foi descartado e um novo foi gerado contendo todo que havia no antigo i mais o novo elemento. Como s ainda aponta para o ponteiro antigo print vai imprimir o conteúdo antigo que teve apenas o primeiro elemento alterado.</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">}</span>\t<span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span><span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"c\">// Corrija o slice usando o ponteiro</span>\t<span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">3</span>\t<span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">)</span>\t<span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)[</span><span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">4</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/12/01/slices.html",
            
            
            
            "tags": ["go","slices"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/grpc.html",
            "title": "development/golang/grpc",
            "summary": "gRPC",
            "content_text": "gRPCgRPC, which stands for Google Remote Procedure Call, is a type of communication protocol. It utilizes HTTP/2 and can be viewed as an RPC framework.gRPC uses Protocol Buffers (protobuf), a data serialization format developed by Google. It serves as the message format for communication between clients and servers in gRPC. Protocol Buffers offer an efficient and compact way to represent structured data, which can be easily serialized and deserialized across various programming languages.gRPC Communication Types      Unary: More akin to REST. The client sends a single request, and the server responds with a single response.        Server Streaming: The client sends a request, and the server can send back multiple responses.        Client Streaming: The client sends multiple requests to the server, and the server responds only once (e.g., for uploading).        Bidirectional Streaming: Both client and server continuously send requests and responses back and forth.  Referenceshttps://github.com/grpc/grpc-go/tree/master/examples/route_guidehttps://google.github.io/proto-lens/installing-protoc.html",
            "content_html": "<h2 id=\"grpc\">gRPC</h2><p>gRPC, which stands for Google Remote Procedure Call, is a type of communication protocol. It utilizes HTTP/2 and can be viewed as an RPC framework.</p><p>gRPC uses Protocol Buffers (protobuf), a data serialization format developed by Google. It serves as the message format for communication between clients and servers in gRPC. Protocol Buffers offer an efficient and compact way to represent structured data, which can be easily serialized and deserialized across various programming languages.</p><h3 id=\"grpc-communication-types\">gRPC Communication Types</h3><ul>  <li>    <p><strong>Unary:</strong> More akin to REST. The client sends a single request, and the server responds with a single response.</p>  </li>  <li>    <p><strong>Server Streaming:</strong> The client sends a request, and the server can send back multiple responses.</p>  </li>  <li>    <p><strong>Client Streaming:</strong> The client sends multiple requests to the server, and the server responds only once (e.g., for uploading).</p>  </li>  <li>    <p><strong>Bidirectional Streaming:</strong> Both client and server continuously send requests and responses back and forth.</p>  </li></ul><h3 id=\"references\">References</h3><p>https://github.com/grpc/grpc-go/tree/master/examples/route_guidehttps://google.github.io/proto-lens/installing-protoc.html</p>",
            "url": "/2024/12/01/grpc.html",
            
            
            
            "tags": ["go","gRPC"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/frameworks.html",
            "title": "development/golang/frameworks",
            "summary": "Frameworks",
            "content_text": "FrameworksGoFrGinhttps://medium.com/@chaithra.shetty/introducing-gofr-the-go-framework-541252fabc42",
            "content_html": "<h2 id=\"frameworks\">Frameworks</h2><p>GoFrGin</p><p>https://medium.com/@chaithra.shetty/introducing-gofr-the-go-framework-541252fabc42</p>",
            "url": "/2024/12/01/frameworks.html",
            
            
            
            "tags": ["go","frameworks"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/observer.html",
            "title": "development/padroes-de-projeto/observer",
            "summary": "Observer",
            "content_text": "Observerpackage mainimport (\t\"fmt\")// Observer define a interface para os observadorestype Observer interface {\tUpdate(temp float64)}// Subject define a interface para o objeto observáveltype Subject interface {\tRegisterObserver(o Observer)\tRemoveObserver(o Observer)\tNotifyObservers()}// WeatherStation é o objeto observáveltype WeatherStation struct {\ttemperature float64\tobservers   []Observer}// NewWeatherStation cria uma nova instância de WeatherStationfunc NewWeatherStation() *WeatherStation {\treturn &amp;WeatherStation{}}// RegisterObserver registra um novo observadorfunc (w *WeatherStation) RegisterObserver(o Observer) {\tw.observers = append(w.observers, o)}// RemoveObserver remove um observador existentefunc (w *WeatherStation) RemoveObserver(o Observer) {\tfor i, observer := range w.observers {\t\tif observer == o {\t\t\tw.observers = append(w.observers[:i], w.observers[i+1:]...)\t\t\tbreak\t\t}\t}}// NotifyObservers notifica todos os observadores sobre a mudança na temperaturafunc (w *WeatherStation) NotifyObservers() {\tfor _, observer := range w.observers {\t\tobserver.Update(w.temperature)\t}}// SetTemperature define a temperatura e notifica os observadores sobre a mudançafunc (w *WeatherStation) SetTemperature(temp float64) {\tw.temperature = temp\tw.NotifyObservers()}// PhoneDisplay é um exemplo de observador que exibe a temperatura em um telefonetype PhoneDisplay struct{}// Update atualiza a temperatura exibida no telefonefunc (p *PhoneDisplay) Update(temp float64) {\tfmt.Printf(\"Temperatura atualizada no telefone: %.2f°C\\n\", temp)}// TabletDisplay é um exemplo de observador que exibe a temperatura em um tablettype TabletDisplay struct{}// Update atualiza a temperatura exibida no tabletfunc (t *TabletDisplay) Update(temp float64) {\tfmt.Printf(\"Temperatura atualizada no tablet: %.2f°C\\n\", temp)}func main() {\t// Criação de uma estação meteorológica e um visor de telefone\tweatherStation := NewWeatherStation()\tphoneDisplay := &amp;PhoneDisplay{}\ttabletDisplay := &amp;TabletDisplay{}\tweatherStation.RegisterObserver(phoneDisplay)\tweatherStation.RegisterObserver(tabletDisplay)\tweatherStation.SetTemperature(25.5)\tweatherStation.SetTemperature(30.0)\t// Remova o visor do telefone da lista de observadores\tweatherStation.RemoveObserver(phoneDisplay)\t// Agora, mesmo que a temperatura mude, o visor do telefone não será mais atualizado\tweatherStation.SetTemperature(28.0)}",
            "content_html": "<h2 id=\"observer\">Observer</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span><span class=\"p\">)</span><span class=\"c\">// Observer define a interface para os observadores</span><span class=\"k\">type</span> <span class=\"n\">Observer</span> <span class=\"k\">interface</span> <span class=\"p\">{</span>\t<span class=\"n\">Update</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"kt\">float64</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// Subject define a interface para o objeto observável</span><span class=\"k\">type</span> <span class=\"n\">Subject</span> <span class=\"k\">interface</span> <span class=\"p\">{</span>\t<span class=\"n\">RegisterObserver</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"n\">Observer</span><span class=\"p\">)</span>\t<span class=\"n\">RemoveObserver</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"n\">Observer</span><span class=\"p\">)</span>\t<span class=\"n\">NotifyObservers</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"c\">// WeatherStation é o objeto observável</span><span class=\"k\">type</span> <span class=\"n\">WeatherStation</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">temperature</span> <span class=\"kt\">float64</span>\t<span class=\"n\">observers</span>   <span class=\"p\">[]</span><span class=\"n\">Observer</span><span class=\"p\">}</span><span class=\"c\">// NewWeatherStation cria uma nova instância de WeatherStation</span><span class=\"k\">func</span> <span class=\"n\">NewWeatherStation</span><span class=\"p\">()</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">WeatherStation</span><span class=\"p\">{}</span><span class=\"p\">}</span><span class=\"c\">// RegisterObserver registra um novo observador</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span><span class=\"p\">)</span> <span class=\"n\">RegisterObserver</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"n\">Observer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// RemoveObserver remove um observador existente</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span><span class=\"p\">)</span> <span class=\"n\">RemoveObserver</span><span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"n\">Observer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">observer</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span> <span class=\"p\">{</span>\t\t<span class=\"k\">if</span> <span class=\"n\">observer</span> <span class=\"o\">==</span> <span class=\"n\">o</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"p\">]</span><span class=\"o\">...</span><span class=\"p\">)</span>\t\t\t<span class=\"k\">break</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// NotifyObservers notifica todos os observadores sobre a mudança na temperatura</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span><span class=\"p\">)</span> <span class=\"n\">NotifyObservers</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">observer</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">observers</span> <span class=\"p\">{</span>\t\t<span class=\"n\">observer</span><span class=\"o\">.</span><span class=\"n\">Update</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">temperature</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// SetTemperature define a temperatura e notifica os observadores sobre a mudança</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"o\">*</span><span class=\"n\">WeatherStation</span><span class=\"p\">)</span> <span class=\"n\">SetTemperature</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"kt\">float64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">NotifyObservers</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"c\">// PhoneDisplay é um exemplo de observador que exibe a temperatura em um telefone</span><span class=\"k\">type</span> <span class=\"n\">PhoneDisplay</span> <span class=\"k\">struct</span><span class=\"p\">{}</span><span class=\"c\">// Update atualiza a temperatura exibida no telefone</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">*</span><span class=\"n\">PhoneDisplay</span><span class=\"p\">)</span> <span class=\"n\">Update</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"kt\">float64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Temperatura atualizada no telefone: %.2f°C</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// TabletDisplay é um exemplo de observador que exibe a temperatura em um tablet</span><span class=\"k\">type</span> <span class=\"n\">TabletDisplay</span> <span class=\"k\">struct</span><span class=\"p\">{}</span><span class=\"c\">// Update atualiza a temperatura exibida no tablet</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">*</span><span class=\"n\">TabletDisplay</span><span class=\"p\">)</span> <span class=\"n\">Update</span><span class=\"p\">(</span><span class=\"n\">temp</span> <span class=\"kt\">float64</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Temperatura atualizada no tablet: %.2f°C</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// Criação de uma estação meteorológica e um visor de telefone</span>\t<span class=\"n\">weatherStation</span> <span class=\"o\">:=</span> <span class=\"n\">NewWeatherStation</span><span class=\"p\">()</span>\t<span class=\"n\">phoneDisplay</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">PhoneDisplay</span><span class=\"p\">{}</span>\t<span class=\"n\">tabletDisplay</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">TabletDisplay</span><span class=\"p\">{}</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">RegisterObserver</span><span class=\"p\">(</span><span class=\"n\">phoneDisplay</span><span class=\"p\">)</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">RegisterObserver</span><span class=\"p\">(</span><span class=\"n\">tabletDisplay</span><span class=\"p\">)</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">SetTemperature</span><span class=\"p\">(</span><span class=\"m\">25.5</span><span class=\"p\">)</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">SetTemperature</span><span class=\"p\">(</span><span class=\"m\">30.0</span><span class=\"p\">)</span>\t<span class=\"c\">// Remova o visor do telefone da lista de observadores</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">RemoveObserver</span><span class=\"p\">(</span><span class=\"n\">phoneDisplay</span><span class=\"p\">)</span>\t<span class=\"c\">// Agora, mesmo que a temperatura mude, o visor do telefone não será mais atualizado</span>\t<span class=\"n\">weatherStation</span><span class=\"o\">.</span><span class=\"n\">SetTemperature</span><span class=\"p\">(</span><span class=\"m\">28.0</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/12/01/observer.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/factory.html",
            "title": "development/padroes-de-projeto/factory",
            "summary": "Factory",
            "content_text": "Factorypackage mainimport \"fmt\"// Product é a interface que define o comportamento dos produtostype Product interface {\tUse()}// ConcreteProductA é uma implementação de Producttype ConcreteProductA struct{}// Use implementa o método Use de Productfunc (p *ConcreteProductA) Use() {\tfmt.Println(\"Usando o produto A\")}// ConcreteProductB é outra implementação de Producttype ConcreteProductB struct{}// Use implementa o método Use de Productfunc (p *ConcreteProductB) Use() {\tfmt.Println(\"Usando o produto B\")}// Factory é a interface que define o método de criação de produtostype Factory interface {\tCreateProduct() Product}// ConcreteFactoryA é uma implementação de Factory que cria ConcreteProductAtype ConcreteFactoryA struct{}// CreateProduct implementa o método CreateProduct de Factoryfunc (f *ConcreteFactoryA) CreateProduct() Product {\treturn &amp;ConcreteProductA{}}// ConcreteFactoryB é outra implementação de Factory que cria ConcreteProductBtype ConcreteFactoryB struct{}// CreateProduct implementa o método CreateProduct de Factoryfunc (f *ConcreteFactoryB) CreateProduct() Product {\treturn &amp;ConcreteProductB{}}func main() {\t// Cria uma fábrica para criar produtos do tipo A\tfactoryA := &amp;ConcreteFactoryA{}\t// Usa a fábrica para criar um produto do tipo A\tproductA := factoryA.CreateProduct()\t// Usa o produto do tipo A\tproductA.Use()\t// Cria uma fábrica para criar produtos do tipo B\tfactoryB := &amp;ConcreteFactoryB{}\t// Usa a fábrica para criar um produto do tipo B\tproductB := factoryB.CreateProduct()\t// Usa o produto do tipo B\tproductB.Use()}package mainimport (\t\"database/sql\"\t\"fmt\"\t\"log\"\t_ \"github.com/go-sql-driver/mysql\" // Driver MySQL\t_ \"github.com/lib/pq\"              // Driver PostgreSQL)// Database é a interface que define o comportamento dos diferentes tipos de conexões de banco de dadostype Database interface {\tConnect() (*sql.DB, error)}// MySQLDatabase é uma implementação de Database para MySQLtype MySQLDatabase struct {\tConnectionString string}// Connect implementa o método Connect de Database para MySQLfunc (db *MySQLDatabase) Connect() (*sql.DB, error) {\treturn sql.Open(\"mysql\", db.ConnectionString)}// PostgreSQLDatabase é uma implementação de Database para PostgreSQLtype PostgreSQLDatabase struct {\tConnectionString string}// Connect implementa o método Connect de Database para PostgreSQLfunc (db *PostgreSQLDatabase) Connect() (*sql.DB, error) {\treturn sql.Open(\"postgres\", db.ConnectionString)}// DatabaseFactory é uma fábrica para criar diferentes tipos de conexões de banco de dadostype DatabaseFactory struct{}// CreateDatabase cria uma conexão de banco de dados com base no tipo especificadofunc (f *DatabaseFactory) CreateDatabase(databaseType string, connectionString string) (Database, error) {\tswitch databaseType {\tcase \"mysql\":\t\treturn &amp;MySQLDatabase{ConnectionString: connectionString}, nil\tcase \"postgres\":\t\treturn &amp;PostgreSQLDatabase{ConnectionString: connectionString}, nil\tdefault:\t\treturn nil, fmt.Errorf(\"tipo de banco de dados não suportado: %s\", databaseType)\t}}func main() {\t// Cria uma fábrica de banco de dados\tfactory := &amp;DatabaseFactory{}\t// Cria uma conexão de banco de dados MySQL\tmysqlDB, err := factory.CreateDatabase(\"mysql\", \"user:password@tcp(localhost:3306)/database\")\tif err != nil {\t\tlog.Fatalf(\"Erro ao criar conexão MySQL: %v\", err)\t}\tdefer mysqlDB.Close()\tfmt.Println(\"Conexão MySQL estabelecida com sucesso\")\t// Cria uma conexão de banco de dados PostgreSQL\tpostgresDB, err := factory.CreateDatabase(\"postgres\", \"user=postgres password=password dbname=database sslmode=disable\")\tif err != nil {\t\tlog.Fatalf(\"Erro ao criar conexão PostgreSQL: %v\", err)\t}\tdefer postgresDB.Close()\tfmt.Println(\"Conexão PostgreSQL estabelecida com sucesso\")}",
            "content_html": "<h2 id=\"factory\">Factory</h2><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>package mainimport <span class=\"s2\">\"fmt\"</span>// Product é a interface que define o comportamento dos produtos<span class=\"nb\">type </span>Product interface <span class=\"o\">{</span>\tUse<span class=\"o\">()</span><span class=\"o\">}</span>// ConcreteProductA é uma implementação de Product<span class=\"nb\">type </span>ConcreteProductA struct<span class=\"o\">{}</span>// Use implementa o método Use de Productfunc <span class=\"o\">(</span>p <span class=\"k\">*</span>ConcreteProductA<span class=\"o\">)</span> Use<span class=\"o\">()</span> <span class=\"o\">{</span>\tfmt.Println<span class=\"o\">(</span><span class=\"s2\">\"Usando o produto A\"</span><span class=\"o\">)</span><span class=\"o\">}</span>// ConcreteProductB é outra implementação de Product<span class=\"nb\">type </span>ConcreteProductB struct<span class=\"o\">{}</span>// Use implementa o método Use de Productfunc <span class=\"o\">(</span>p <span class=\"k\">*</span>ConcreteProductB<span class=\"o\">)</span> Use<span class=\"o\">()</span> <span class=\"o\">{</span>\tfmt.Println<span class=\"o\">(</span><span class=\"s2\">\"Usando o produto B\"</span><span class=\"o\">)</span><span class=\"o\">}</span>// Factory é a interface que define o método de criação de produtos<span class=\"nb\">type </span>Factory interface <span class=\"o\">{</span>\tCreateProduct<span class=\"o\">()</span> Product<span class=\"o\">}</span>// ConcreteFactoryA é uma implementação de Factory que cria ConcreteProductA<span class=\"nb\">type </span>ConcreteFactoryA struct<span class=\"o\">{}</span>// CreateProduct implementa o método CreateProduct de Factoryfunc <span class=\"o\">(</span>f <span class=\"k\">*</span>ConcreteFactoryA<span class=\"o\">)</span> CreateProduct<span class=\"o\">()</span> Product <span class=\"o\">{</span>\t<span class=\"k\">return</span> &amp;ConcreteProductA<span class=\"o\">{}</span><span class=\"o\">}</span>// ConcreteFactoryB é outra implementação de Factory que cria ConcreteProductB<span class=\"nb\">type </span>ConcreteFactoryB struct<span class=\"o\">{}</span>// CreateProduct implementa o método CreateProduct de Factoryfunc <span class=\"o\">(</span>f <span class=\"k\">*</span>ConcreteFactoryB<span class=\"o\">)</span> CreateProduct<span class=\"o\">()</span> Product <span class=\"o\">{</span>\t<span class=\"k\">return</span> &amp;ConcreteProductB<span class=\"o\">{}</span><span class=\"o\">}</span>func main<span class=\"o\">()</span> <span class=\"o\">{</span>\t// Cria uma fábrica para criar produtos <span class=\"k\">do </span>tipo A\tfactoryA :<span class=\"o\">=</span> &amp;ConcreteFactoryA<span class=\"o\">{}</span>\t// Usa a fábrica para criar um produto <span class=\"k\">do </span>tipo A\tproductA :<span class=\"o\">=</span> factoryA.CreateProduct<span class=\"o\">()</span>\t// Usa o produto <span class=\"k\">do </span>tipo A\tproductA.Use<span class=\"o\">()</span>\t// Cria uma fábrica para criar produtos <span class=\"k\">do </span>tipo B\tfactoryB :<span class=\"o\">=</span> &amp;ConcreteFactoryB<span class=\"o\">{}</span>\t// Usa a fábrica para criar um produto <span class=\"k\">do </span>tipo B\tproductB :<span class=\"o\">=</span> factoryB.CreateProduct<span class=\"o\">()</span>\t// Usa o produto <span class=\"k\">do </span>tipo B\tproductB.Use<span class=\"o\">()</span><span class=\"o\">}</span></code></pre></div></div><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"database/sql\"</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"log\"</span>\t<span class=\"n\">_</span> <span class=\"s\">\"github.com/go-sql-driver/mysql\"</span> <span class=\"c\">// Driver MySQL</span>\t<span class=\"n\">_</span> <span class=\"s\">\"github.com/lib/pq\"</span>              <span class=\"c\">// Driver PostgreSQL</span><span class=\"p\">)</span><span class=\"c\">// Database é a interface que define o comportamento dos diferentes tipos de conexões de banco de dados</span><span class=\"k\">type</span> <span class=\"n\">Database</span> <span class=\"k\">interface</span> <span class=\"p\">{</span>\t<span class=\"n\">Connect</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">DB</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// MySQLDatabase é uma implementação de Database para MySQL</span><span class=\"k\">type</span> <span class=\"n\">MySQLDatabase</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">ConnectionString</span> <span class=\"kt\">string</span><span class=\"p\">}</span><span class=\"c\">// Connect implementa o método Connect de Database para MySQL</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">db</span> <span class=\"o\">*</span><span class=\"n\">MySQLDatabase</span><span class=\"p\">)</span> <span class=\"n\">Connect</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">DB</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">Open</span><span class=\"p\">(</span><span class=\"s\">\"mysql\"</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ConnectionString</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// PostgreSQLDatabase é uma implementação de Database para PostgreSQL</span><span class=\"k\">type</span> <span class=\"n\">PostgreSQLDatabase</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">ConnectionString</span> <span class=\"kt\">string</span><span class=\"p\">}</span><span class=\"c\">// Connect implementa o método Connect de Database para PostgreSQL</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">db</span> <span class=\"o\">*</span><span class=\"n\">PostgreSQLDatabase</span><span class=\"p\">)</span> <span class=\"n\">Connect</span><span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">DB</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">Open</span><span class=\"p\">(</span><span class=\"s\">\"postgres\"</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ConnectionString</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// DatabaseFactory é uma fábrica para criar diferentes tipos de conexões de banco de dados</span><span class=\"k\">type</span> <span class=\"n\">DatabaseFactory</span> <span class=\"k\">struct</span><span class=\"p\">{}</span><span class=\"c\">// CreateDatabase cria uma conexão de banco de dados com base no tipo especificado</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">*</span><span class=\"n\">DatabaseFactory</span><span class=\"p\">)</span> <span class=\"n\">CreateDatabase</span><span class=\"p\">(</span><span class=\"n\">databaseType</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"n\">connectionString</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">Database</span><span class=\"p\">,</span> <span class=\"kt\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">switch</span> <span class=\"n\">databaseType</span> <span class=\"p\">{</span>\t<span class=\"k\">case</span> <span class=\"s\">\"mysql\"</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">MySQLDatabase</span><span class=\"p\">{</span><span class=\"n\">ConnectionString</span><span class=\"o\">:</span> <span class=\"n\">connectionString</span><span class=\"p\">},</span> <span class=\"no\">nil</span>\t<span class=\"k\">case</span> <span class=\"s\">\"postgres\"</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">PostgreSQLDatabase</span><span class=\"p\">{</span><span class=\"n\">ConnectionString</span><span class=\"o\">:</span> <span class=\"n\">connectionString</span><span class=\"p\">},</span> <span class=\"no\">nil</span>\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Errorf</span><span class=\"p\">(</span><span class=\"s\">\"tipo de banco de dados não suportado: %s\"</span><span class=\"p\">,</span> <span class=\"n\">databaseType</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// Cria uma fábrica de banco de dados</span>\t<span class=\"n\">factory</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">DatabaseFactory</span><span class=\"p\">{}</span>\t<span class=\"c\">// Cria uma conexão de banco de dados MySQL</span>\t<span class=\"n\">mysqlDB</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">CreateDatabase</span><span class=\"p\">(</span><span class=\"s\">\"mysql\"</span><span class=\"p\">,</span> <span class=\"s\">\"user:password@tcp(localhost:3306)/database\"</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"Erro ao criar conexão MySQL: %v\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">defer</span> <span class=\"n\">mysqlDB</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Conexão MySQL estabelecida com sucesso\"</span><span class=\"p\">)</span>\t<span class=\"c\">// Cria uma conexão de banco de dados PostgreSQL</span>\t<span class=\"n\">postgresDB</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">CreateDatabase</span><span class=\"p\">(</span><span class=\"s\">\"postgres\"</span><span class=\"p\">,</span> <span class=\"s\">\"user=postgres password=password dbname=database sslmode=disable\"</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"Erro ao criar conexão PostgreSQL: %v\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">defer</span> <span class=\"n\">postgresDB</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Conexão PostgreSQL estabelecida com sucesso\"</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/12/01/factory.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/pilha.html",
            "title": "development/estrutura-de-dados/pilha",
            "summary": "Pilha",
            "content_text": "Pilha",
            "content_html": "<h2 id=\"pilha\">Pilha</h2>",
            "url": "/2024/12/01/pilha.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/fila.html",
            "title": "development/estrutura-de-dados/fila",
            "summary": "Fila",
            "content_text": "Fila",
            "content_html": "<h2 id=\"fila\">Fila</h2>",
            "url": "/2024/12/01/fila.html",
            
            
            
            "tags": ["fila","queue"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/redis.html",
            "title": "data/redis",
            "summary": "Redis",
            "content_text": "Redis",
            "content_html": "<h2 id=\"redis\">Redis</h2>",
            "url": "/2024/12/01/redis.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/rabbitmq.html",
            "title": "data/rabbitmq",
            "summary": "RabbitMQ",
            "content_text": "RabbitMQ",
            "content_html": "<h2 id=\"rabbitmq\">RabbitMQ</h2>",
            "url": "/2024/12/01/rabbitmq.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/postgres.html",
            "title": "data/postgres",
            "summary": "Postgres",
            "content_text": "Postgres",
            "content_html": "<h2 id=\"postgres\">Postgres</h2>",
            "url": "/2024/12/01/postgres.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/kafka.html",
            "title": "data/kafka",
            "summary": "Kafka",
            "content_text": "Kafka",
            "content_html": "<h2 id=\"kafka\">Kafka</h2>",
            "url": "/2024/12/01/kafka.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/kafka-connect.html",
            "title": "data/kafka-connect",
            "summary": "Kafka Connect",
            "content_text": "Kafka Connect",
            "content_html": "<h2 id=\"kafka-connect\">Kafka Connect</h2>",
            "url": "/2024/12/01/kafka-connect.html",
            
            
            
            "tags": ["kafka","kafka-connect"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/apache-airflow.html",
            "title": "data/Apache Airflox",
            "summary": "Apache Airflox",
            "content_text": "Kafka",
            "content_html": "<h2 id=\"kafka\">Kafka</h2>",
            "url": "/2024/12/01/apache-airflow.html",
            
            
            
            "tags": ["apache","airflow"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/11/24/reverse-ssh-tunneling.html",
            "title": "development/golang/reverse-ssh-tunneling",
            "summary": "Reverse SSH Tunneling",
            "content_text": "Reverse SSH Tunnelingpackage mainimport (\t\"fmt\"\t\"io\"\t\"io/ioutil\"\t\"log\"\t\"net\"\t\"golang.org/x/crypto/ssh\")type Endpoint struct {\tHost string\tPort int}func (endpoint *Endpoint) String() string {\treturn fmt.Sprintf(\"%s:%d\", endpoint.Host, endpoint.Port)}func handleClient(client net.Conn, remote net.Conn) {\tdefer client.Close()\tchDone := make(chan bool)\t// Start remote -&gt; local data transfer\tgo func() {\t\t_, err := io.Copy(client, remote)\t\tif err != nil {\t\t\tlog.Printf(\"error while copy remote-&gt;local: %s\", err)\t\t}\t\tchDone &lt;- true\t}()\t// Start local -&gt; remote data transfer\tgo func() {\t\t_, err := io.Copy(remote, client)\t\tif err != nil {\t\t\tlog.Println(fmt.Sprintf(\"error while copy local-&gt;remote: %s\", err))\t\t}\t\tchDone &lt;- true\t}()\t&lt;-chDone}func publicKeyFile(file string) ssh.AuthMethod {\tbuffer, err := ioutil.ReadFile(file)\tif err != nil {\t\tlog.Fatalln(fmt.Sprintf(\"Cannot read SSH public key file %s\", file))\t\treturn nil\t}\tkey, err := ssh.ParsePrivateKey(buffer)\tif err != nil {\t\tlog.Fatalln(fmt.Sprintf(\"Cannot parse SSH public key file %s\", file))\t\treturn nil\t}\treturn ssh.PublicKeys(key)}// local service to be forwardedvar localEndpoint = Endpoint{\tHost: \"localhost\",\tPort: 8000,}// remote SSH servervar serverEndpoint = Endpoint{\tHost: \"192.168.100.19\",\tPort: 22,}// remote forwarding port (on remote SSH server network)var remoteEndpoint = Endpoint{\tHost: \"localhost\",\tPort: 9000,}func main() {\t// refer to https://godoc.org/golang.org/x/crypto/ssh for other authentication types\tsshConfig := &amp;ssh.ClientConfig{\t\t// SSH connection username\t\tUser: \"&lt;your-user&gt;\",\t\tAuth: []ssh.AuthMethod{\t\t\t// put here your private key path\t\t\t//publicKeyFile(\"/home/apolzek/.ssh/id_ed25519\"),\t\t\tssh.Password(\"&lt;your-password&gt;\"),\t\t},\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\t}\t// Connect to SSH remote server using serverEndpoint\tserverConn, err := ssh.Dial(\"tcp\", serverEndpoint.String(), sshConfig)\tif err != nil {\t\tlog.Fatalln(fmt.Printf(\"Dial INTO remote server error: %s\", err))\t}\t// Listen on remote server port\tlistener, err := serverConn.Listen(\"tcp\", remoteEndpoint.String())\tif err != nil {\t\tlog.Fatalln(fmt.Printf(\"Listen open port ON remote server error: %s\", err))\t}\tdefer listener.Close()\t// handle incoming connections on reverse forwarded tunnel\tfor {\t\t// Open a (local) connection to localEndpoint whose content will be forwarded so serverEndpoint\t\tlocal, err := net.Dial(\"tcp\", localEndpoint.String())\t\tif err != nil {\t\t\tlog.Fatalln(fmt.Printf(\"Dial INTO local service error: %s\", err))\t\t}\t\tclient, err := listener.Accept()\t\tif err != nil {\t\t\tlog.Fatalln(err)\t\t}\t\thandleClient(client, local)\t}}",
            "content_html": "<h2 id=\"reverse-ssh-tunneling\">Reverse SSH Tunneling</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"io\"</span>\t<span class=\"s\">\"io/ioutil\"</span>\t<span class=\"s\">\"log\"</span>\t<span class=\"s\">\"net\"</span>\t<span class=\"s\">\"golang.org/x/crypto/ssh\"</span><span class=\"p\">)</span><span class=\"k\">type</span> <span class=\"n\">Endpoint</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">Host</span> <span class=\"kt\">string</span>\t<span class=\"n\">Port</span> <span class=\"kt\">int</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">endpoint</span> <span class=\"o\">*</span><span class=\"n\">Endpoint</span><span class=\"p\">)</span> <span class=\"n\">String</span><span class=\"p\">()</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"%s:%d\"</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">.</span><span class=\"n\">Host</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">.</span><span class=\"n\">Port</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">handleClient</span><span class=\"p\">(</span><span class=\"n\">client</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Conn</span><span class=\"p\">,</span> <span class=\"n\">remote</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Conn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">defer</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"n\">chDone</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"kt\">bool</span><span class=\"p\">)</span>\t<span class=\"c\">// Start remote -&gt; local data transfer</span>\t<span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t\t<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"p\">)</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"error while copy remote-&gt;local: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">chDone</span> <span class=\"o\">&lt;-</span> <span class=\"no\">true</span>\t<span class=\"p\">}()</span>\t<span class=\"c\">// Start local -&gt; remote data transfer</span>\t<span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t\t<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">remote</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">)</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"error while copy local-&gt;remote: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">chDone</span> <span class=\"o\">&lt;-</span> <span class=\"no\">true</span>\t<span class=\"p\">}()</span>\t<span class=\"o\">&lt;-</span><span class=\"n\">chDone</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">publicKeyFile</span><span class=\"p\">(</span><span class=\"n\">file</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">AuthMethod</span> <span class=\"p\">{</span>\t<span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ioutil</span><span class=\"o\">.</span><span class=\"n\">ReadFile</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"Cannot read SSH public key file %s\"</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">))</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span>\t<span class=\"p\">}</span>\t<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">ParsePrivateKey</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"Cannot parse SSH public key file %s\"</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">))</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">PublicKeys</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// local service to be forwarded</span><span class=\"k\">var</span> <span class=\"n\">localEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"localhost\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">8000</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"c\">// remote SSH server</span><span class=\"k\">var</span> <span class=\"n\">serverEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"192.168.100.19\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">22</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"c\">// remote forwarding port (on remote SSH server network)</span><span class=\"k\">var</span> <span class=\"n\">remoteEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"localhost\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">9000</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// refer to https://godoc.org/golang.org/x/crypto/ssh for other authentication types</span>\t<span class=\"n\">sshConfig</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">ClientConfig</span><span class=\"p\">{</span>\t\t<span class=\"c\">// SSH connection username</span>\t\t<span class=\"n\">User</span><span class=\"o\">:</span> <span class=\"s\">\"&lt;your-user&gt;\"</span><span class=\"p\">,</span>\t\t<span class=\"n\">Auth</span><span class=\"o\">:</span> <span class=\"p\">[]</span><span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">AuthMethod</span><span class=\"p\">{</span>\t\t\t<span class=\"c\">// put here your private key path</span>\t\t\t<span class=\"c\">//publicKeyFile(\"/home/apolzek/.ssh/id_ed25519\"),</span>\t\t\t<span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">Password</span><span class=\"p\">(</span><span class=\"s\">\"&lt;your-password&gt;\"</span><span class=\"p\">),</span>\t\t<span class=\"p\">},</span>\t\t<span class=\"n\">HostKeyCallback</span><span class=\"o\">:</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">InsecureIgnoreHostKey</span><span class=\"p\">(),</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// Connect to SSH remote server using serverEndpoint</span>\t<span class=\"n\">serverConn</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">Dial</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">serverEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span> <span class=\"n\">sshConfig</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Dial INTO remote server error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// Listen on remote server port</span>\t<span class=\"n\">listener</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">serverConn</span><span class=\"o\">.</span><span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">remoteEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">())</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Listen open port ON remote server error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t<span class=\"p\">}</span>\t<span class=\"k\">defer</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"c\">// handle incoming connections on reverse forwarded tunnel</span>\t<span class=\"k\">for</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// Open a (local) connection to localEndpoint whose content will be forwarded so serverEndpoint</span>\t\t<span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Dial</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">localEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">())</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Dial INTO local service error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">Accept</span><span class=\"p\">()</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">handleClient</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">local</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/11/24/reverse-ssh-tunneling.html",
            
            
            
            "tags": ["go","golang"],
            
            "date_published": "2024-11-24T00:00:00+00:00",
            "date_modified": "2024-11-24T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/10/25/eks.html",
            "title": "cloud/aws/eks",
            "summary": "EKS",
            "content_text": "EKS",
            "content_html": "<h1 id=\"eks\">EKS</h1>",
            "url": "/2024/10/25/eks.html",
            
            
            
            "tags": ["eks","aws","kubernetes"],
            
            "date_published": "2024-10-25T00:00:00+00:00",
            "date_modified": "2024-10-25T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/03/dockerfile-tips.html",
            "title": "tools/dockerfile-tips",
            "summary": "dockerfile-tips",
            "content_text": "dockerfile-tips",
            "content_html": "<h2 id=\"dockerfile-tips\">dockerfile-tips</h2>",
            "url": "/2024/04/03/dockerfile-tips.html",
            
            
            
            "tags": ["tools","docker"],
            
            "date_published": "2024-04-03T00:00:00+00:00",
            "date_modified": "2024-04-03T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/03/sftpgo.html",
            "title": "tools/sftpgo",
            "summary": "sftpgo",
            "content_text": "sftpgomkdir -p /tmp/sftpgo-data ; docker run --name some-sftpgo -p 8080:8080 -p 2022:2022 -e SFTPGO_DATA_PROVIDER__CREATE_DEFAULT_ADMIN='true' -e SFTPGO_DEFAULT_ADMIN_USERNAME='admin' -e SFTPGO_DEFAULT_ADMIN_PASSWORD='pass@123' -v /tmp/sftpgo-data:/sftpgo-data  -d drakkan/sftpgo:latest",
            "content_html": "<h2 id=\"sftpgo\">sftpgo</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mkdir -p /tmp/sftpgo-data ; docker run --name some-sftpgo -p 8080:8080 -p 2022:2022 -e SFTPGO_DATA_PROVIDER__CREATE_DEFAULT_ADMIN='true' -e SFTPGO_DEFAULT_ADMIN_USERNAME='admin' -e SFTPGO_DEFAULT_ADMIN_PASSWORD='pass@123' -v /tmp/sftpgo-data:/sftpgo-data  -d drakkan/sftpgo:latest</code></pre></div></div>",
            "url": "/2024/04/03/sftpgo.html",
            
            
            
            
            
            "date_published": "2024-04-03T00:00:00+00:00",
            "date_modified": "2024-04-03T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/04/03/sre-tips.html",
            "title": "tools/sre-tips",
            "summary": "sre-tips",
            "content_text": "sre-tipscomando | xclip -selection clipboardalias ccp='xclip -selection clipboard'base64 /caminho/para/seu/arquivo | xclip -selection clipboardlistar arquivos de hoje, de forma recursiva, e mostrar o tamanho em MBfind . -type f -mtime 0 -exec ls -lh {} + | awk '{ print $5, $9 }'Verificar as conexões externas à sua máquina, incluindo as portas que estão sendo utilizadasnetstat -tunapss -tunapss -tunap | grep -v '127.0.0.1\\|::1'ruby -run -ehttpd . -p8000php -S localhost:8000python3 -m http.servernpm install -g http-serverhttp-server -p 8000while true; do { echo -ne \"HTTP/1.1 200 OK\\r\\nContent-Length: $(wc -c &lt;index.html)\\r\\nContent-Type: text/html\\r\\n\\r\\n\"; cat index.html; } | nc -l -p 8080; done",
            "content_html": "<h2 id=\"sre-tips\">sre-tips</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>comando | xclip -selection clipboardalias ccp='xclip -selection clipboard'base64 /caminho/para/seu/arquivo | xclip -selection clipboard</code></pre></div></div><p>listar arquivos de hoje, de forma recursiva, e mostrar o tamanho em MB</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find . -type f -mtime 0 -exec ls -lh {} + | awk '{ print $5, $9 }'</code></pre></div></div><p>Verificar as conexões externas à sua máquina, incluindo as portas que estão sendo utilizadas</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>netstat -tunapss -tunapss -tunap | grep -v '127.0.0.1\\|::1'</code></pre></div></div><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ruby -run -ehttpd . -p8000php -S localhost:8000python3 -m http.servernpm install -g http-serverhttp-server -p 8000while true; do { echo -ne \"HTTP/1.1 200 OK\\r\\nContent-Length: $(wc -c &lt;index.html)\\r\\nContent-Type: text/html\\r\\n\\r\\n\"; cat index.html; } | nc -l -p 8080; done</code></pre></div></div>",
            "url": "/2024/04/03/sre-tips.html",
            
            
            
            
            
            "date_published": "2024-04-03T00:00:00+00:00",
            "date_modified": "2024-04-03T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/03/11/sockets.html",
            "title": "operating-system/linux/sockets",
            "summary": "sockets linux",
            "content_text": "Sockets LinuxEm redes de computadores, sockets são endpoints de comunicação que permitem a troca de dados entre processos em uma rede. Eles são uma abstração fundamental para a comunicação em rede e são amplamente utilizados em sistemas operacionais, incluindo o Linux. Existem vários tipos de sockets, cada um adequado para diferentes tipos de comunicação. Aqui está um resumo detalhado dos principais tipos de sockets e como eles são usados no Linux:1. Sockets de Fluxo (Stream Sockets)  Tipo: SOCK_STREAM  Protocolo: TCP (Transmission Control Protocol)  Características: Conexão orientada, confiável, sequencial e baseada em byte.  Uso: Utilizado para comunicações que requerem uma conexão estável e confiável, como transferência de arquivos, comunicação HTTP, e-mails, etc.  Exemplo no Linux: Aplicações como servidores web (Apache, Nginx) e clientes de e-mail utilizam sockets de fluxo para garantir a entrega confiável de dados.2. Sockets de Datagrama (Datagram Sockets)  Tipo: SOCK_DGRAM  Protocolo: UDP (User Datagram Protocol)  Características: Sem conexão, não confiável, datagramas individuais e sem garantia de ordem.  Uso: Utilizado para comunicações rápidas e que podem tolerar perda de pacotes, como streaming de vídeo, jogos online e protocolos de descoberta de rede.  Exemplo no Linux: Aplicações como servidores DNS e serviços de streaming de vídeo frequentemente usam sockets de datagrama para troca rápida de dados.3. Sockets Brutos (Raw Sockets)  Tipo: SOCK_RAW  Protocolo: Qualquer protocolo IP, incluindo ICMP, IGMP, etc.  Características: Acesso direto ao protocolo de rede subjacente, permite a criação de pacotes personalizados.  Uso: Utilizado para tarefas de baixo nível, como criação de sniffers de rede, ferramentas de diagnóstico e implementação de novos protocolos.  Exemplo no Linux: Ferramentas como ping e traceroute usam sockets brutos para enviar e receber pacotes ICMP.4. Sockets Sequenciais de Pacotes (SeqPacket Sockets)  Tipo: SOCK_SEQPACKET  Protocolo: Geralmente SCTP (Stream Control Transmission Protocol) ou protocolos específicos de sistema.  Características: Conexão orientada, confiável, sequencial, mas com preservação de limites de mensagem.  Uso: Utilizado para comunicações que exigem tanto confiabilidade quanto a preservação de limites de mensagem, como em alguns sistemas de controle industrial.  Exemplo no Linux: Não tão comum quanto os outros tipos de sockets, mas pode ser usado em sistemas especializados ou para experimentação com o SCTP.Uso no LinuxNo Linux, os sockets são criados e gerenciados por meio de chamadas de sistema como socket(), bind(), listen(), accept(), connect(), send(), recv(), e outras. Essas chamadas de sistema são parte da API POSIX e estão disponíveis em linguagens de programação como C e Python através de bibliotecas específicas.Os sockets no Linux são utilizados por uma ampla gama de aplicações, desde servidores web e de e-mail até clientes de chat e jogos online. Eles são a base da comunicação em rede no sistema operacional e permitem que processos em diferentes máquinas (ou na mesma máquina) troquem dados de forma eficiente e flexível.Além disso, o Linux oferece várias ferramentas e utilitários para trabalhar com sockets, como netstat, ss, nc (netcat), e socat, que ajudam os administradores de sistema a monitorar e diagnosticar a comunicação de rede em seus sistemas.Famílias de Endereçossocket.AF_INET é uma constante em muitas linguagens de programação, como Python, que indica o uso da família de endereços IPv4 para a comunicação de rede. “AF” significa “Address Family” (Família de Endereços). Aqui estão alguns dos tipos mais comuns de famílias de endereços que você pode encontrar:  socket.AF_INET          Descrição: Representa a família de endereços IPv4.      Uso: Utilizado para comunicação de rede usando o protocolo IP versão 4.        socket.AF_INET6          Descrição: Representa a família de endereços IPv6.      Uso: Utilizado para comunicação de rede usando o protocolo IP versão 6.        socket.AF_UNIX (ou socket.AF_LOCAL)          Descrição: Representa a família de endereços de sockets do tipo Unix.      Uso: Utilizado para comunicação entre processos no mesmo sistema operacional Unix ou Linux, usando um arquivo de socket no sistema de arquivos.        socket.AF_PACKET          Descrição: Usado para comunicação de baixo nível usando interfaces de rede diretamente.      Uso: Permite o envio e recebimento de pacotes a nível de enlace de dados (camada 2), como Ethernet.        socket.AF_BLUETOOTH          Descrição: Representa a família de endereços para comunicação Bluetooth.      Uso: Utilizado para comunicação de rede usando a tecnologia Bluetooth.        socket.AF_CAN          Descrição: Representa a família de endereços para Controller Area Network (CAN).      Uso: Utilizado para comunicação em sistemas embarcados e automotivos usando o protocolo CAN.        socket.AF_IRDA          Descrição: Representa a família de endereços para comunicação infravermelha (IrDA).      Uso: Utilizado para comunicação de rede usando a tecnologia de comunicação de dados por infravermelho.      Cada família de endereços é projetada para um tipo específico de comunicação de rede ou protocolo. Ao criar um socket em uma linguagem de programação, você precisa especificar a família de endereços que deseja usar, o que determinará como o socket se comunica e que tipo de endereços ele pode usar.client.pyimport socketHOST = '127.0.0.1'PORT = 65432with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:    s.connect((HOST, PORT))    s.sendall(b'Ola, servidor!')    data = s.recv(1024)print(f'Recebido: {data.decode()}')server.pyimport socketHOST = '127.0.0.1'PORT = 65432with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:    s.bind((HOST, PORT))    s.listen()    print('Servidor aguardando conexão...')    conn, addr = s.accept()    with conn:        print(f'Conectado por {addr}')        while True:            data = conn.recv(1024)            if not data:                break            conn.sendall(data)",
            "content_html": "<h2 id=\"sockets-linux\">Sockets Linux</h2><p>Em redes de computadores, sockets são endpoints de comunicação que permitem a troca de dados entre processos em uma rede. Eles são uma abstração fundamental para a comunicação em rede e são amplamente utilizados em sistemas operacionais, incluindo o Linux. Existem vários tipos de sockets, cada um adequado para diferentes tipos de comunicação. Aqui está um resumo detalhado dos principais tipos de sockets e como eles são usados no Linux:</p><h3 id=\"1-sockets-de-fluxo-stream-sockets\">1. Sockets de Fluxo (Stream Sockets)</h3><ul>  <li><strong>Tipo:</strong> SOCK_STREAM</li>  <li><strong>Protocolo:</strong> TCP (Transmission Control Protocol)</li>  <li><strong>Características:</strong> Conexão orientada, confiável, sequencial e baseada em byte.</li>  <li><strong>Uso:</strong> Utilizado para comunicações que requerem uma conexão estável e confiável, como transferência de arquivos, comunicação HTTP, e-mails, etc.</li>  <li><strong>Exemplo no Linux:</strong> Aplicações como servidores web (Apache, Nginx) e clientes de e-mail utilizam sockets de fluxo para garantir a entrega confiável de dados.</li></ul><h3 id=\"2-sockets-de-datagrama-datagram-sockets\">2. Sockets de Datagrama (Datagram Sockets)</h3><ul>  <li><strong>Tipo:</strong> SOCK_DGRAM</li>  <li><strong>Protocolo:</strong> UDP (User Datagram Protocol)</li>  <li><strong>Características:</strong> Sem conexão, não confiável, datagramas individuais e sem garantia de ordem.</li>  <li><strong>Uso:</strong> Utilizado para comunicações rápidas e que podem tolerar perda de pacotes, como streaming de vídeo, jogos online e protocolos de descoberta de rede.</li>  <li><strong>Exemplo no Linux:</strong> Aplicações como servidores DNS e serviços de streaming de vídeo frequentemente usam sockets de datagrama para troca rápida de dados.</li></ul><h3 id=\"3-sockets-brutos-raw-sockets\">3. Sockets Brutos (Raw Sockets)</h3><ul>  <li><strong>Tipo:</strong> SOCK_RAW</li>  <li><strong>Protocolo:</strong> Qualquer protocolo IP, incluindo ICMP, IGMP, etc.</li>  <li><strong>Características:</strong> Acesso direto ao protocolo de rede subjacente, permite a criação de pacotes personalizados.</li>  <li><strong>Uso:</strong> Utilizado para tarefas de baixo nível, como criação de sniffers de rede, ferramentas de diagnóstico e implementação de novos protocolos.</li>  <li><strong>Exemplo no Linux:</strong> Ferramentas como ping e traceroute usam sockets brutos para enviar e receber pacotes ICMP.</li></ul><h3 id=\"4-sockets-sequenciais-de-pacotes-seqpacket-sockets\">4. Sockets Sequenciais de Pacotes (SeqPacket Sockets)</h3><ul>  <li><strong>Tipo:</strong> SOCK_SEQPACKET</li>  <li><strong>Protocolo:</strong> Geralmente SCTP (Stream Control Transmission Protocol) ou protocolos específicos de sistema.</li>  <li><strong>Características:</strong> Conexão orientada, confiável, sequencial, mas com preservação de limites de mensagem.</li>  <li><strong>Uso:</strong> Utilizado para comunicações que exigem tanto confiabilidade quanto a preservação de limites de mensagem, como em alguns sistemas de controle industrial.</li>  <li><strong>Exemplo no Linux:</strong> Não tão comum quanto os outros tipos de sockets, mas pode ser usado em sistemas especializados ou para experimentação com o SCTP.</li></ul><h3 id=\"uso-no-linux\">Uso no Linux</h3><p>No Linux, os sockets são criados e gerenciados por meio de chamadas de sistema como <code class=\"language-plaintext highlighter-rouge\">socket()</code>, <code class=\"language-plaintext highlighter-rouge\">bind()</code>, <code class=\"language-plaintext highlighter-rouge\">listen()</code>, <code class=\"language-plaintext highlighter-rouge\">accept()</code>, <code class=\"language-plaintext highlighter-rouge\">connect()</code>, <code class=\"language-plaintext highlighter-rouge\">send()</code>, <code class=\"language-plaintext highlighter-rouge\">recv()</code>, e outras. Essas chamadas de sistema são parte da API POSIX e estão disponíveis em linguagens de programação como C e Python através de bibliotecas específicas.</p><p>Os sockets no Linux são utilizados por uma ampla gama de aplicações, desde servidores web e de e-mail até clientes de chat e jogos online. Eles são a base da comunicação em rede no sistema operacional e permitem que processos em diferentes máquinas (ou na mesma máquina) troquem dados de forma eficiente e flexível.</p><p>Além disso, o Linux oferece várias ferramentas e utilitários para trabalhar com sockets, como <code class=\"language-plaintext highlighter-rouge\">netstat</code>, <code class=\"language-plaintext highlighter-rouge\">ss</code>, <code class=\"language-plaintext highlighter-rouge\">nc</code> (netcat), e <code class=\"language-plaintext highlighter-rouge\">socat</code>, que ajudam os administradores de sistema a monitorar e diagnosticar a comunicação de rede em seus sistemas.</p><h3 id=\"famílias-de-endereços\">Famílias de Endereços</h3><p><code class=\"language-plaintext highlighter-rouge\">socket.AF_INET</code> é uma constante em muitas linguagens de programação, como Python, que indica o uso da família de endereços IPv4 para a comunicação de rede. “AF” significa “Address Family” (Família de Endereços). Aqui estão alguns dos tipos mais comuns de famílias de endereços que você pode encontrar:</p><ol>  <li><strong>socket.AF_INET</strong>    <ul>      <li><strong>Descrição:</strong> Representa a família de endereços IPv4.</li>      <li><strong>Uso:</strong> Utilizado para comunicação de rede usando o protocolo IP versão 4.</li>    </ul>  </li>  <li><strong>socket.AF_INET6</strong>    <ul>      <li><strong>Descrição:</strong> Representa a família de endereços IPv6.</li>      <li><strong>Uso:</strong> Utilizado para comunicação de rede usando o protocolo IP versão 6.</li>    </ul>  </li>  <li><strong>socket.AF_UNIX (ou socket.AF_LOCAL)</strong>    <ul>      <li><strong>Descrição:</strong> Representa a família de endereços de sockets do tipo Unix.</li>      <li><strong>Uso:</strong> Utilizado para comunicação entre processos no mesmo sistema operacional Unix ou Linux, usando um arquivo de socket no sistema de arquivos.</li>    </ul>  </li>  <li><strong>socket.AF_PACKET</strong>    <ul>      <li><strong>Descrição:</strong> Usado para comunicação de baixo nível usando interfaces de rede diretamente.</li>      <li><strong>Uso:</strong> Permite o envio e recebimento de pacotes a nível de enlace de dados (camada 2), como Ethernet.</li>    </ul>  </li>  <li><strong>socket.AF_BLUETOOTH</strong>    <ul>      <li><strong>Descrição:</strong> Representa a família de endereços para comunicação Bluetooth.</li>      <li><strong>Uso:</strong> Utilizado para comunicação de rede usando a tecnologia Bluetooth.</li>    </ul>  </li>  <li><strong>socket.AF_CAN</strong>    <ul>      <li><strong>Descrição:</strong> Representa a família de endereços para Controller Area Network (CAN).</li>      <li><strong>Uso:</strong> Utilizado para comunicação em sistemas embarcados e automotivos usando o protocolo CAN.</li>    </ul>  </li>  <li><strong>socket.AF_IRDA</strong>    <ul>      <li><strong>Descrição:</strong> Representa a família de endereços para comunicação infravermelha (IrDA).</li>      <li><strong>Uso:</strong> Utilizado para comunicação de rede usando a tecnologia de comunicação de dados por infravermelho.</li>    </ul>  </li></ol><p>Cada família de endereços é projetada para um tipo específico de comunicação de rede ou protocolo. Ao criar um socket em uma linguagem de programação, você precisa especificar a família de endereços que deseja usar, o que determinará como o socket se comunica e que tipo de endereços ele pode usar.</p><p>client.py</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">socket</span><span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"s\">'127.0.0.1'</span><span class=\"n\">PORT</span> <span class=\"o\">=</span> <span class=\"mi\">65432</span><span class=\"k\">with</span> <span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>    <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">((</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">))</span>    <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">sendall</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">'Ola, servidor!'</span><span class=\"p\">)</span>    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'Recebido: </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span></code></pre></div></div><p>server.py</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">socket</span><span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"s\">'127.0.0.1'</span><span class=\"n\">PORT</span> <span class=\"o\">=</span> <span class=\"mi\">65432</span><span class=\"k\">with</span> <span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>    <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">bind</span><span class=\"p\">((</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">))</span>    <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">listen</span><span class=\"p\">()</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Servidor aguardando conexão...'</span><span class=\"p\">)</span>    <span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>    <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"p\">:</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'Conectado por </span><span class=\"si\">{</span><span class=\"n\">addr</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">data</span><span class=\"p\">:</span>                <span class=\"k\">break</span>            <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"n\">sendall</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span></code></pre></div></div>",
            "url": "/2024/03/11/sockets.html",
            
            
            
            "tags": ["sockets","linux"],
            
            "date_published": "2024-03-11T00:00:00+00:00",
            "date_modified": "2024-03-11T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/03/11/dns-server.html",
            "title": "development/golang/dns-server",
            "summary": "dns-server",
            "content_text": "dns-serverpackage mainimport (\t\"fmt\"\t\"net\"\t\"github.com/miekg/dns\")func resolver(domain string, qtype uint16) []dns.RR {\tswitch qtype {\tcase dns.TypeA:\t\treturn []dns.RR{\t\t\t&amp;dns.A{\t\t\t\tHdr: dns.RR_Header{Name: domain, Rrtype: dns.TypeA, Class: dns.ClassINET, Ttl: 3600},\t\t\t\tA:   net.ParseIP(\"127.0.0.1\"),\t\t\t},\t\t}\tcase dns.TypeAAAA:\t\treturn []dns.RR{\t\t\t&amp;dns.AAAA{\t\t\t\tHdr:  dns.RR_Header{Name: domain, Rrtype: dns.TypeAAAA, Class: dns.ClassINET, Ttl: 3600},\t\t\t\tAAAA: net.ParseIP(\"::1\"),\t\t\t},\t\t}\tcase dns.TypeCNAME:\t\treturn []dns.RR{\t\t\t&amp;dns.CNAME{\t\t\t\tHdr:    dns.RR_Header{Name: domain, Rrtype: dns.TypeCNAME, Class: dns.ClassINET, Ttl: 3600},\t\t\t\tTarget: \"example.com.\",\t\t\t},\t\t}\tcase dns.TypeMX:\t\treturn []dns.RR{\t\t\t&amp;dns.MX{\t\t\t\tHdr:        dns.RR_Header{Name: domain, Rrtype: dns.TypeMX, Class: dns.ClassINET, Ttl: 3600},\t\t\t\tPreference: 10,\t\t\t\tMx:         \"mail.example.com.\",\t\t\t},\t\t}\tdefault:\t\treturn nil\t}}type dnsHandler struct{}func (h *dnsHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {\tmsg := new(dns.Msg)\tmsg.SetReply(r)\tmsg.Authoritative = true\tfor _, question := range r.Question {\t\tanswers := resolver(question.Name, question.Qtype)\t\tif answers != nil {\t\t\tmsg.Answer = append(msg.Answer, answers...)\t\t}\t}\tw.WriteMsg(msg)}func StartDNSServer() {\thandler := new(dnsHandler)\tserver := &amp;dns.Server{\t\tAddr:      \":53\",\t\tNet:       \"udp\",\t\tHandler:   handler,\t\tUDPSize:   65535,\t\tReusePort: true,\t}\tfmt.Println(\"Starting DNS server on port 53\")\terr := server.ListenAndServe()\tif err != nil {\t\tfmt.Printf(\"Failed to start server: %s\\n\", err.Error())\t}}func main() {\tStartDNSServer()}sudo systemctl enable --now systemd-resolvedsudo systemctl start systemd-resolvedReferenceshttps://blog.stackademic.com/build-dns-server-using-golang-8a97db12a660",
            "content_html": "<h2 id=\"dns-server\">dns-server</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"net\"</span>\t<span class=\"s\">\"github.com/miekg/dns\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">resolver</span><span class=\"p\">(</span><span class=\"n\">domain</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"n\">qtype</span> <span class=\"kt\">uint16</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR</span> <span class=\"p\">{</span>\t<span class=\"k\">switch</span> <span class=\"n\">qtype</span> <span class=\"p\">{</span>\t<span class=\"k\">case</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">TypeA</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"p\">[]</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR</span><span class=\"p\">{</span>\t\t\t<span class=\"o\">&amp;</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">{</span>\t\t\t\t<span class=\"n\">Hdr</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR_Header</span><span class=\"p\">{</span><span class=\"n\">Name</span><span class=\"o\">:</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">Rrtype</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">TypeA</span><span class=\"p\">,</span> <span class=\"n\">Class</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">ClassINET</span><span class=\"p\">,</span> <span class=\"n\">Ttl</span><span class=\"o\">:</span> <span class=\"m\">3600</span><span class=\"p\">},</span>\t\t\t\t<span class=\"n\">A</span><span class=\"o\">:</span>   <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">ParseIP</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.1\"</span><span class=\"p\">),</span>\t\t\t<span class=\"p\">},</span>\t\t<span class=\"p\">}</span>\t<span class=\"k\">case</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">TypeAAAA</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"p\">[]</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR</span><span class=\"p\">{</span>\t\t\t<span class=\"o\">&amp;</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">AAAA</span><span class=\"p\">{</span>\t\t\t\t<span class=\"n\">Hdr</span><span class=\"o\">:</span>  <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR_Header</span><span class=\"p\">{</span><span class=\"n\">Name</span><span class=\"o\">:</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">Rrtype</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">TypeAAAA</span><span class=\"p\">,</span> <span class=\"n\">Class</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">ClassINET</span><span class=\"p\">,</span> <span class=\"n\">Ttl</span><span class=\"o\">:</span> <span class=\"m\">3600</span><span class=\"p\">},</span>\t\t\t\t<span class=\"n\">AAAA</span><span class=\"o\">:</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">ParseIP</span><span class=\"p\">(</span><span class=\"s\">\"::1\"</span><span class=\"p\">),</span>\t\t\t<span class=\"p\">},</span>\t\t<span class=\"p\">}</span>\t<span class=\"k\">case</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">TypeCNAME</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"p\">[]</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR</span><span class=\"p\">{</span>\t\t\t<span class=\"o\">&amp;</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">CNAME</span><span class=\"p\">{</span>\t\t\t\t<span class=\"n\">Hdr</span><span class=\"o\">:</span>    <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR_Header</span><span class=\"p\">{</span><span class=\"n\">Name</span><span class=\"o\">:</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">Rrtype</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">TypeCNAME</span><span class=\"p\">,</span> <span class=\"n\">Class</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">ClassINET</span><span class=\"p\">,</span> <span class=\"n\">Ttl</span><span class=\"o\">:</span> <span class=\"m\">3600</span><span class=\"p\">},</span>\t\t\t\t<span class=\"n\">Target</span><span class=\"o\">:</span> <span class=\"s\">\"example.com.\"</span><span class=\"p\">,</span>\t\t\t<span class=\"p\">},</span>\t\t<span class=\"p\">}</span>\t<span class=\"k\">case</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">TypeMX</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"p\">[]</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR</span><span class=\"p\">{</span>\t\t\t<span class=\"o\">&amp;</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">MX</span><span class=\"p\">{</span>\t\t\t\t<span class=\"n\">Hdr</span><span class=\"o\">:</span>        <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">RR_Header</span><span class=\"p\">{</span><span class=\"n\">Name</span><span class=\"o\">:</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">Rrtype</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">TypeMX</span><span class=\"p\">,</span> <span class=\"n\">Class</span><span class=\"o\">:</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">ClassINET</span><span class=\"p\">,</span> <span class=\"n\">Ttl</span><span class=\"o\">:</span> <span class=\"m\">3600</span><span class=\"p\">},</span>\t\t\t\t<span class=\"n\">Preference</span><span class=\"o\">:</span> <span class=\"m\">10</span><span class=\"p\">,</span>\t\t\t\t<span class=\"n\">Mx</span><span class=\"o\">:</span>         <span class=\"s\">\"mail.example.com.\"</span><span class=\"p\">,</span>\t\t\t<span class=\"p\">},</span>\t\t<span class=\"p\">}</span>\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">type</span> <span class=\"n\">dnsHandler</span> <span class=\"k\">struct</span><span class=\"p\">{}</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">h</span> <span class=\"o\">*</span><span class=\"n\">dnsHandler</span><span class=\"p\">)</span> <span class=\"n\">ServeDNS</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">ResponseWriter</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">*</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">Msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">msg</span> <span class=\"o\">:=</span> <span class=\"nb\">new</span><span class=\"p\">(</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">Msg</span><span class=\"p\">)</span>\t<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">SetReply</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\t<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">Authoritative</span> <span class=\"o\">=</span> <span class=\"no\">true</span>\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">question</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">Question</span> <span class=\"p\">{</span>\t\t<span class=\"n\">answers</span> <span class=\"o\">:=</span> <span class=\"n\">resolver</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">Qtype</span><span class=\"p\">)</span>\t\t<span class=\"k\">if</span> <span class=\"n\">answers</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">Answer</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">Answer</span><span class=\"p\">,</span> <span class=\"n\">answers</span><span class=\"o\">...</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span>\t<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">WriteMsg</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">StartDNSServer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">handler</span> <span class=\"o\">:=</span> <span class=\"nb\">new</span><span class=\"p\">(</span><span class=\"n\">dnsHandler</span><span class=\"p\">)</span>\t<span class=\"n\">server</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">dns</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">{</span>\t\t<span class=\"n\">Addr</span><span class=\"o\">:</span>      <span class=\"s\">\":53\"</span><span class=\"p\">,</span>\t\t<span class=\"n\">Net</span><span class=\"o\">:</span>       <span class=\"s\">\"udp\"</span><span class=\"p\">,</span>\t\t<span class=\"n\">Handler</span><span class=\"o\">:</span>   <span class=\"n\">handler</span><span class=\"p\">,</span>\t\t<span class=\"n\">UDPSize</span><span class=\"o\">:</span>   <span class=\"m\">65535</span><span class=\"p\">,</span>\t\t<span class=\"n\">ReusePort</span><span class=\"o\">:</span> <span class=\"no\">true</span><span class=\"p\">,</span>\t<span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Starting DNS server on port 53\"</span><span class=\"p\">)</span>\t<span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">ListenAndServe</span><span class=\"p\">()</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Failed to start server: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">())</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">StartDNSServer</span><span class=\"p\">()</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sudo systemctl enable --now systemd-resolvedsudo systemctl start systemd-resolved</code></pre></div></div><h3 id=\"references\">References</h3><p>https://blog.stackademic.com/build-dns-server-using-golang-8a97db12a660</p>",
            "url": "/2024/03/11/dns-server.html",
            
            
            
            "tags": ["go","dns-server"],
            
            "date_published": "2024-03-11T00:00:00+00:00",
            "date_modified": "2024-03-11T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/03/04/lunarvim.html",
            "title": "cheatsheet/lunarvim",
            "summary": "Cheatsheet lunarvim",
            "content_text": "Cheatsheet lunarvim",
            "content_html": "<h2 id=\"cheatsheet-lunarvim\">Cheatsheet lunarvim</h2>",
            "url": "/2024/03/04/lunarvim.html",
            
            
            
            "tags": ["lunarvim","vi","editor","1991"],
            
            "date_published": "2024-03-04T00:00:00+00:00",
            "date_modified": "2024-03-04T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/02/24/roadmap.html",
            "title": "development/golang/roadmap",
            "summary": "roadmap",
            "content_text": "RoadmapIntrodução a linguagem  Sobre a linguagem e seu histórico  Motivações  Instalação  Configuração do ambiente no VSCodeDesenvolvimento de APIs  Retomando conceitos de HTTP Server e Mux  Criando Endpoints  Apresentando principais frameworks e roteadores  Trabalhando com “chi”  Middlewares  Autenticação e tokens JWT  Documentando API com SwaggerFoundation  Primeiros passos  Trabalhando com tipagem forte  Arrays, Slices, Maps  Laços de repetição, condicionais  Ponteiros  Funções, Structs, Métodos, Interfaces e Generics  Trabalhando com packages  Módulos  Módulos privados  Instalação de pacotes  Compilando projetos Go  WorkspacesConcorrência e Multithreading  Entendendo conceitos de concorrência e paralelismo  Como Go aborda concorrência e schedulers  Iniciando com Go Routines  Contadores atômicos  Trabalhando com Channels e buffers  Utilizando recurso de Select  Wait Groups  Mutex  Previnindo race conditions  Desenvolvimento de workers utilizando channels  Load BalancerPacotes importantes  Manipulação de arquivos  Chamadas HTTP  Trabalhando com objetos Json  Defer  Desenvolvendo um sistema Busca CEP  Trabalhando com HTTP  Criando servidores HTTP  Entendendo Multiplexers  Servidor de arquivos  Trabalhando com templates dinâmicos  Aprofundando em HTTP utilizando ContextImplementações  gRPC  GraphQL  Upload de arquivos na AWS S3  Command line com cobra CLI  Unit of Work  Dependency Injection com Google Wire  Manipulação de eventos (Event Dispatcher, Handlers, etc)  Integração com RabbitMQ  Gerenciamento de configuração com ViperGo e Clean Architecture  Iniciando com Clean Architecture  Pontos importantes sobre arquitetura  Keep options opened  Use Cases  Limites arquiteturais  Input vs Output  DTOs  Entities  Desenvolvendo camada de domínio  Criando Use Cases  Criando adaptador para banco de dados  Criando adaptador para o RabbitMQ  Servindo endpoints HTTP  Consumindo mensagens com RabbitMQ  Criando CLI para iniciar a aplicação  Documentando aplicação  Go DocPacote Context  Entendendo o conceito de um context  Armazenando e recuperando valores  Background, Timeout, Deadline e Cancelations  Context na práticaTestes automatizados  Iniciando com testes no Go  Formas de asserção  Pacotes úteis  Trabalhando com Mocks  Fuzzes e testes de mutação  Testes em batch  Benchmarking  Criando suite de testes com Testify  Testes End-to-endBancos de dados  Entendendo como Go trabalha com banco de dados  Estabelecendo conexão e realizando primeiras operações  Boas práticas de segurança  Realizando operações utilizando Context  Go puro vs ORM  Trabalhando com GORM  Migrations  SQLC: Geração automática de QueriesDeploy  Entendendo processo de compilação  Gerando imagem Docker com multistage building  Criando manifestos Kubernetes  Realizando deploy no KubernetesMarketing pessoal  Imagem pessoal  Autoridade  Redes sociais  Networking  Seus projetos e sua marca pessoalTrabalho em equipe  Dificuldades enfrentadas pelo trabalho em equipe  Como melhorar a formação de equipes  Comunicação assertiva  Perfil ComportamentalEmpreendedorismo  Empreendedorismo social  Empreendedorismo corporativo (intraempreendedorismo)  Empreendedorismo digital  Empreendedorismo Serial",
            "content_html": "<h2 id=\"roadmap\">Roadmap</h2><h3 id=\"introdução-a-linguagem\">Introdução a linguagem</h3><ul>  <li>Sobre a linguagem e seu histórico</li>  <li>Motivações</li>  <li>Instalação</li>  <li>Configuração do ambiente no VSCode</li></ul><h3 id=\"desenvolvimento-de-apis\">Desenvolvimento de APIs</h3><ul>  <li>Retomando conceitos de HTTP Server e Mux</li>  <li>Criando Endpoints</li>  <li>Apresentando principais frameworks e roteadores</li>  <li>Trabalhando com “chi”</li>  <li>Middlewares</li>  <li>Autenticação e tokens JWT</li>  <li>Documentando API com Swagger</li></ul><h3 id=\"foundation\">Foundation</h3><ul>  <li>Primeiros passos</li>  <li>Trabalhando com tipagem forte</li>  <li>Arrays, Slices, Maps</li>  <li>Laços de repetição, condicionais</li>  <li>Ponteiros</li>  <li>Funções, Structs, Métodos, Interfaces e Generics</li>  <li>Trabalhando com packages</li>  <li>Módulos</li>  <li>Módulos privados</li>  <li>Instalação de pacotes</li>  <li>Compilando projetos Go</li>  <li>Workspaces</li></ul><h3 id=\"concorrência-e-multithreading\">Concorrência e Multithreading</h3><ul>  <li>Entendendo conceitos de concorrência e paralelismo</li>  <li>Como Go aborda concorrência e schedulers</li>  <li>Iniciando com Go Routines</li>  <li>Contadores atômicos</li>  <li>Trabalhando com Channels e buffers</li>  <li>Utilizando recurso de Select</li>  <li>Wait Groups</li>  <li>Mutex</li>  <li>Previnindo race conditions</li>  <li>Desenvolvimento de workers utilizando channels</li>  <li>Load Balancer</li></ul><h3 id=\"pacotes-importantes\">Pacotes importantes</h3><ul>  <li>Manipulação de arquivos</li>  <li>Chamadas HTTP</li>  <li>Trabalhando com objetos Json</li>  <li>Defer</li>  <li>Desenvolvendo um sistema Busca CEP</li>  <li>Trabalhando com HTTP</li>  <li>Criando servidores HTTP</li>  <li>Entendendo Multiplexers</li>  <li>Servidor de arquivos</li>  <li>Trabalhando com templates dinâmicos</li>  <li>Aprofundando em HTTP utilizando Context</li></ul><h3 id=\"implementações\">Implementações</h3><ul>  <li>gRPC</li>  <li>GraphQL</li>  <li>Upload de arquivos na AWS S3</li>  <li>Command line com cobra CLI</li>  <li>Unit of Work</li>  <li>Dependency Injection com Google Wire</li>  <li>Manipulação de eventos (Event Dispatcher, Handlers, etc)</li>  <li>Integração com RabbitMQ</li>  <li>Gerenciamento de configuração com Viper</li></ul><h3 id=\"go-e-clean-architecture\">Go e Clean Architecture</h3><ul>  <li>Iniciando com Clean Architecture</li>  <li>Pontos importantes sobre arquitetura</li>  <li>Keep options opened</li>  <li>Use Cases</li>  <li>Limites arquiteturais</li>  <li>Input vs Output</li>  <li>DTOs</li>  <li>Entities</li>  <li>Desenvolvendo camada de domínio</li>  <li>Criando Use Cases</li>  <li>Criando adaptador para banco de dados</li>  <li>Criando adaptador para o RabbitMQ</li>  <li>Servindo endpoints HTTP</li>  <li>Consumindo mensagens com RabbitMQ</li>  <li>Criando CLI para iniciar a aplicação</li>  <li>Documentando aplicação</li>  <li>Go Doc</li></ul><h3 id=\"pacote-context\">Pacote Context</h3><ul>  <li>Entendendo o conceito de um context</li>  <li>Armazenando e recuperando valores</li>  <li>Background, Timeout, Deadline e Cancelations</li>  <li>Context na prática</li></ul><h3 id=\"testes-automatizados\">Testes automatizados</h3><ul>  <li>Iniciando com testes no Go</li>  <li>Formas de asserção</li>  <li>Pacotes úteis</li>  <li>Trabalhando com Mocks</li>  <li>Fuzzes e testes de mutação</li>  <li>Testes em batch</li>  <li>Benchmarking</li>  <li>Criando suite de testes com Testify</li>  <li>Testes End-to-end</li></ul><h3 id=\"bancos-de-dados\">Bancos de dados</h3><ul>  <li>Entendendo como Go trabalha com banco de dados</li>  <li>Estabelecendo conexão e realizando primeiras operações</li>  <li>Boas práticas de segurança</li>  <li>Realizando operações utilizando Context</li>  <li>Go puro vs ORM</li>  <li>Trabalhando com GORM</li>  <li>Migrations</li>  <li>SQLC: Geração automática de Queries</li></ul><h3 id=\"deploy\">Deploy</h3><ul>  <li>Entendendo processo de compilação</li>  <li>Gerando imagem Docker com multistage building</li>  <li>Criando manifestos Kubernetes</li>  <li>Realizando deploy no Kubernetes</li></ul><h3 id=\"marketing-pessoal\">Marketing pessoal</h3><ul>  <li>Imagem pessoal</li>  <li>Autoridade</li>  <li>Redes sociais</li>  <li>Networking</li>  <li>Seus projetos e sua marca pessoal</li></ul><h3 id=\"trabalho-em-equipe\">Trabalho em equipe</h3><ul>  <li>Dificuldades enfrentadas pelo trabalho em equipe</li>  <li>Como melhorar a formação de equipes</li>  <li>Comunicação assertiva</li>  <li>Perfil Comportamental</li></ul><h3 id=\"empreendedorismo\">Empreendedorismo</h3><ul>  <li>Empreendedorismo social</li>  <li>Empreendedorismo corporativo (intraempreendedorismo)</li>  <li>Empreendedorismo digital</li>  <li>Empreendedorismo Serial</li></ul>",
            "url": "/2024/02/24/roadmap.html",
            
            
            
            "tags": ["go","roadmap"],
            
            "date_published": "2024-02-24T00:00:00+00:00",
            "date_modified": "2024-02-24T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/02/20/tcpdump.html",
            "title": "cheatsheet/tcpdump",
            "summary": "Cheatsheet tcpdump",
            "content_text": "Cheatsheet tcpdump# Captura todos os pacotes na interface eth0tcpdump -i eth0# Captura apenas os primeiros 10 pacotestcpdump -i eth0 -c 10# Salva a captura em um arquivo chamado capture.pcaptcpdump -i eth0 -w capture.pcap# Lê pacotes de um arquivo de capturatcpdump -r capture.pcap# Captura pacotes TCP na porta 80tcpdump -i eth0 tcp port 80# Captura pacotes UDP na porta 53 (DNS)tcpdump -i eth0 udp port 53# Captura pacotes com o endereço IP de origem 192.168.1.1tcpdump -i eth0 src 192.168.1.1# Captura pacotes com o endereço IP de destino 192.168.1.1tcpdump -i eth0 dst 192.168.1.1# Captura pacotes contendo o endereço IP 192.168.1.1 (origem ou destino)tcpdump -i eth0 host 192.168.1.1# Captura pacotes entre os endereços IP 192.168.1.1 e 192.168.1.2tcpdump -i eth0 src 192.168.1.1 and dst 192.168.1.2# Captura pacotes TCP com a flag SYNtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-syn) != 0'# Captura pacotes TCP com a flag ACKtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-ack) != 0'# Captura pacotes TCP com a flag FINtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-fin) != 0'# Captura pacotes TCP com a flag RSTtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-rst) != 0'# Captura pacotes TCP com a flag PSHtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-psh) != 0'# Captura pacotes TCP com a flag URGtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-urg) != 0'# Captura pacotes com tamanho de pacote maior que 1000 bytestcpdump -i eth0 'greater 1000'# Captura pacotes com tamanho de pacote menor que 100 bytestcpdump -i eth0 'less 100'# Captura pacotes ARPtcpdump -i eth0 arp# Captura pacotes ICMPtcpdump -i eth0 icmp# Captura pacotes com endereço MAC de origem específicotcpdump -i eth0 ether src 00:11:22:33:44:55# Captura pacotes com endereço MAC de destino específicotcpdump -i eth0 ether dst 00:11:22:33:44:55# Captura pacotes VLAN com ID específicotcpdump -i eth0 vlan 100# Captura pacotes IP com Time to Live (TTL) específicotcpdump -i eth0 'ip[8] = 64'# Captura pacotes TCP com janela de recepção específicatcpdump -i eth0 'tcp[14:2] = 1024'# Captura pacotes com base em expressões regulares no conteúdo do pacotetcpdump -i eth0 -A 'tcp and src port 80 and (tcp[32:4] = 0x47455420 or tcp[32:4] = 0x504f5354)'# Captura pacotes IPv6tcpdump -i eth0 ip6# Captura pacotes com endereço IPv6 de origem específicotcpdump -i eth0 src host 2001:db8::1# Captura pacotes com endereço IPv6 de destino específicotcpdump -i eth0 dst host 2001:db8::1# Captura pacotes com base em extensões de cabeçalho IPv6tcpdump -i eth0 'ip6[6] = 58'# Captura pacotes com base em fluxos específicos de IPv6tcpdump -i eth0 'ip6[7] = 1'# Captura pacotes TCP com opções específicastcpdump -i eth0 'tcpO o tcpdump utiliza o Berkeley Packet Filter (BPF) para filtrar os pacotes de rede que devem ser capturados. O BPF é um mecanismo de filtragem de pacotes altamente eficiente que é implementado no nível do kernel do sistema operacional. Ele permite que o tcpdump especifique um conjunto de regras de filtragem que determinam quais pacotes de rede devem ser capturados e quais devem ser descartados.Quando você executa o tcpdump com um filtro específico, o comando é traduzido em instruções BPF que são carregadas no kernel. O kernel então usa essas instruções para filtrar os pacotes de rede em tempo real. Apenas os pacotes que correspondem ao filtro são copiados para o espaço do usuário para serem analisados e exibidos pelo tcpdump. Isso torna o processo de captura de pacotes muito eficiente, pois evita a cópia desnecessária de pacotes que não são de interesse para o espaço do usuário.Além disso, como o BPF opera no nível do kernel, ele pode processar pacotes muito rapidamente, o que é essencial para a captura de pacotes em redes de alta velocidade. Isso permite que o tcpdump capture e filtre pacotes em tempo real, mesmo em ambientes de rede com tráfego intenso.",
            "content_html": "<h2 id=\"cheatsheet-tcpdump\">Cheatsheet tcpdump</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Captura todos os pacotes na interface eth0tcpdump -i eth0# Captura apenas os primeiros 10 pacotestcpdump -i eth0 -c 10# Salva a captura em um arquivo chamado capture.pcaptcpdump -i eth0 -w capture.pcap# Lê pacotes de um arquivo de capturatcpdump -r capture.pcap# Captura pacotes TCP na porta 80tcpdump -i eth0 tcp port 80# Captura pacotes UDP na porta 53 (DNS)tcpdump -i eth0 udp port 53# Captura pacotes com o endereço IP de origem 192.168.1.1tcpdump -i eth0 src 192.168.1.1# Captura pacotes com o endereço IP de destino 192.168.1.1tcpdump -i eth0 dst 192.168.1.1# Captura pacotes contendo o endereço IP 192.168.1.1 (origem ou destino)tcpdump -i eth0 host 192.168.1.1# Captura pacotes entre os endereços IP 192.168.1.1 e 192.168.1.2tcpdump -i eth0 src 192.168.1.1 and dst 192.168.1.2# Captura pacotes TCP com a flag SYNtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-syn) != 0'# Captura pacotes TCP com a flag ACKtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-ack) != 0'# Captura pacotes TCP com a flag FINtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-fin) != 0'# Captura pacotes TCP com a flag RSTtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-rst) != 0'# Captura pacotes TCP com a flag PSHtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-psh) != 0'# Captura pacotes TCP com a flag URGtcpdump -i eth0 'tcp[tcpflags] &amp; (tcp-urg) != 0'# Captura pacotes com tamanho de pacote maior que 1000 bytestcpdump -i eth0 'greater 1000'# Captura pacotes com tamanho de pacote menor que 100 bytestcpdump -i eth0 'less 100'# Captura pacotes ARPtcpdump -i eth0 arp# Captura pacotes ICMPtcpdump -i eth0 icmp# Captura pacotes com endereço MAC de origem específicotcpdump -i eth0 ether src 00:11:22:33:44:55# Captura pacotes com endereço MAC de destino específicotcpdump -i eth0 ether dst 00:11:22:33:44:55# Captura pacotes VLAN com ID específicotcpdump -i eth0 vlan 100# Captura pacotes IP com Time to Live (TTL) específicotcpdump -i eth0 'ip[8] = 64'# Captura pacotes TCP com janela de recepção específicatcpdump -i eth0 'tcp[14:2] = 1024'# Captura pacotes com base em expressões regulares no conteúdo do pacotetcpdump -i eth0 -A 'tcp and src port 80 and (tcp[32:4] = 0x47455420 or tcp[32:4] = 0x504f5354)'# Captura pacotes IPv6tcpdump -i eth0 ip6# Captura pacotes com endereço IPv6 de origem específicotcpdump -i eth0 src host 2001:db8::1# Captura pacotes com endereço IPv6 de destino específicotcpdump -i eth0 dst host 2001:db8::1# Captura pacotes com base em extensões de cabeçalho IPv6tcpdump -i eth0 'ip6[6] = 58'# Captura pacotes com base em fluxos específicos de IPv6tcpdump -i eth0 'ip6[7] = 1'# Captura pacotes TCP com opções específicastcpdump -i eth0 'tcp</code></pre></div></div><p>O o tcpdump utiliza o Berkeley Packet Filter (BPF) para filtrar os pacotes de rede que devem ser capturados. O BPF é um mecanismo de filtragem de pacotes altamente eficiente que é implementado no nível do kernel do sistema operacional. Ele permite que o tcpdump especifique um conjunto de regras de filtragem que determinam quais pacotes de rede devem ser capturados e quais devem ser descartados.</p><p>Quando você executa o tcpdump com um filtro específico, o comando é traduzido em instruções BPF que são carregadas no kernel. O kernel então usa essas instruções para filtrar os pacotes de rede em tempo real. Apenas os pacotes que correspondem ao filtro são copiados para o espaço do usuário para serem analisados e exibidos pelo tcpdump. Isso torna o processo de captura de pacotes muito eficiente, pois evita a cópia desnecessária de pacotes que não são de interesse para o espaço do usuário.</p><p>Além disso, como o BPF opera no nível do kernel, ele pode processar pacotes muito rapidamente, o que é essencial para a captura de pacotes em redes de alta velocidade. Isso permite que o tcpdump capture e filtre pacotes em tempo real, mesmo em ambientes de rede com tráfego intenso.</p>",
            "url": "/2024/02/20/tcpdump.html",
            
            
            
            "tags": ["tcpdump","linux"],
            
            "date_published": "2024-02-20T00:00:00+00:00",
            "date_modified": "2024-02-20T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/02/20/regex.html",
            "title": "cheatsheet/regex",
            "summary": "Cheatsheet regex",
            "content_text": "Cheatsheet regex",
            "content_html": "<h2 id=\"cheatsheet-regex\">Cheatsheet regex</h2>",
            "url": "/2024/02/20/regex.html",
            
            
            
            "tags": ["regex","linux"],
            
            "date_published": "2024-02-20T00:00:00+00:00",
            "date_modified": "2024-02-20T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/02/20/openssh.html",
            "title": "cheatsheet/openssh",
            "summary": "Cheatsheet openssh",
            "content_text": "Cheatsheet openssh",
            "content_html": "<h2 id=\"cheatsheet-openssh\">Cheatsheet openssh</h2>",
            "url": "/2024/02/20/openssh.html",
            
            
            
            "tags": ["openssh","linux"],
            
            "date_published": "2024-02-20T00:00:00+00:00",
            "date_modified": "2024-02-20T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/02/20/nfs.html",
            "title": "cheatsheet/nfs",
            "summary": "Cheatsheet nfs",
            "content_text": "Cheatsheet nfs",
            "content_html": "<h2 id=\"cheatsheet-nfs\">Cheatsheet nfs</h2>",
            "url": "/2024/02/20/nfs.html",
            
            
            
            "tags": ["nfs","linux"],
            
            "date_published": "2024-02-20T00:00:00+00:00",
            "date_modified": "2024-02-20T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/02/20/grafana.html",
            "title": "cheatsheet/grafana",
            "summary": "Cheatsheet grafana",
            "content_text": "Cheatsheet grafanasudo docker exec -it afd21974a135 bashgrafana-cli admin reset-admin-password admin",
            "content_html": "<h2 id=\"cheatsheet-grafana\">Cheatsheet grafana</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>docker <span class=\"nb\">exec</span> <span class=\"nt\">-it</span> afd21974a135 bashgrafana-cli admin reset-admin-password admin</code></pre></div></div>",
            "url": "/2024/02/20/grafana.html",
            
            
            
            "tags": ["grafana","linux"],
            
            "date_published": "2024-02-20T00:00:00+00:00",
            "date_modified": "2024-02-20T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/02/20/certificates.html",
            "title": "cheatsheet/certificates",
            "summary": "Cheatsheet certificates",
            "content_text": "Cheatsheet certificateshttps://github.com/Hakky54/certificate-rippercrip print --url=https://stackoverflow.com/crip export pkcs12 -u=https://github.comcrip print -u=https://github.com -f=pemcrip print -f=pem \\-u=https://youtube.com \\-u=https://github.com \\-u=https://stackoverflow.com \\-u=https://facebook.com",
            "content_html": "<h2 id=\"cheatsheet-certificates\">Cheatsheet certificates</h2><p>https://github.com/Hakky54/certificate-ripper</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>crip print <span class=\"nt\">--url</span><span class=\"o\">=</span>https://stackoverflow.com/crip <span class=\"nb\">export </span>pkcs12 <span class=\"nt\">-u</span><span class=\"o\">=</span>https://github.comcrip print <span class=\"nt\">-u</span><span class=\"o\">=</span>https://github.com <span class=\"nt\">-f</span><span class=\"o\">=</span>pemcrip print <span class=\"nt\">-f</span><span class=\"o\">=</span>pem <span class=\"se\">\\</span><span class=\"nt\">-u</span><span class=\"o\">=</span>https://youtube.com <span class=\"se\">\\</span><span class=\"nt\">-u</span><span class=\"o\">=</span>https://github.com <span class=\"se\">\\</span><span class=\"nt\">-u</span><span class=\"o\">=</span>https://stackoverflow.com <span class=\"se\">\\</span><span class=\"nt\">-u</span><span class=\"o\">=</span>https://facebook.com</code></pre></div></div>",
            "url": "/2024/02/20/certificates.html",
            
            
            
            "tags": ["certificates","linux"],
            
            "date_published": "2024-02-20T00:00:00+00:00",
            "date_modified": "2024-02-20T00:00:00+00:00",
            
                "author": 
                ""
                
            
        }
    
    ]
}