{
    "version": "https://jsonfeed.org/version/1",
    "title": "apolzek",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "blog",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
"items": [
    
        {
            "id": "/2024/09/29/sre-kit-for-the-end-of-the-world.html",
            "title": "üõ†Ô∏è SRE Kit for the End of the World",
            "summary": "Chaos is Inevitable",
            "content_text": "kindapiVersion: kind.x-k8s.io/v1alpha4kind: Clusternodes:- role: control-plane  extraPortMappings:  - containerPort: 30092    hostPort: 30092    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"    protocol: tcp # Optional, defaults to tcp- role: worker- role: worker- role: worker",
            "content_html": "<p>kind</p><div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">kind.x-k8s.io/v1alpha4</span><span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Cluster</span><span class=\"na\">nodes</span><span class=\"pi\">:</span><span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s\">control-plane</span>  <span class=\"na\">extraPortMappings</span><span class=\"pi\">:</span>  <span class=\"pi\">-</span> <span class=\"na\">containerPort</span><span class=\"pi\">:</span> <span class=\"m\">30092</span>    <span class=\"na\">hostPort</span><span class=\"pi\">:</span> <span class=\"m\">30092</span>    <span class=\"na\">listenAddress</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0.0.0.0\"</span> <span class=\"c1\"># Optional, defaults to \"0.0.0.0\"</span>    <span class=\"na\">protocol</span><span class=\"pi\">:</span> <span class=\"s\">tcp</span> <span class=\"c1\"># Optional, defaults to tcp</span><span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s\">worker</span><span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s\">worker</span><span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s\">worker</span></code></pre></div></div>",
            "url": "/2024/09/29/sre-kit-for-the-end-of-the-world.html",
            
            
            
            "tags": ["tools","sre","toolbox","linux"],
            
            "date_published": "2024-09-29T00:00:00+00:00",
            "date_modified": "2024-09-29T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/29/spells-for-linux-shell.html",
            "title": "ü™Ñ Spells for Linux Shell",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "/2024/09/29/spells-for-linux-shell.html",
            
            
            
            "tags": ["linux","shell","script","bash"],
            
            "date_published": "2024-09-29T00:00:00+00:00",
            "date_modified": "2024-09-29T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/29/kafka-on-kubernetes-using-kind.html",
            "title": "Kafka on Kubernetes using Kind",
            "summary": null,
            "content_text": "Kafka on Kubernetes using KindRecently, I came across an article on Medium that explains how to set up a local environment with Kafka in a test folder, using the Kubernetes StatefulSet concept. I decided to bring it to my blog, adding some tips and additional information. Although my knowledge of Kafka is still basic, I already have a few applications in production using this tool ‚Äî and it‚Äôs amazing how well they perform. I was also responsible for creating a solution using Kafka Connect, Kafka, and CDC for the Boleto product.What follows is a simple and easy way to set up a local development environment with Kafka. I‚Äôll also provide a brief introduction to Kafka and explain how you can use this solution in your projects. It‚Äôs important to note that this article is not a ‚ÄúHow to run Kafka in production‚Äù guide, so keep that in mind. I may also add a Kafka command cheatsheet to make my life easier in the future.If you‚Äôre not familiar with Kind, it‚Äôs an easy way to run Kubernetes locally. With Kind, you can use specific Kubernetes versions, configure the network to expose the API server or ports to the host, upload images, and do many other things. Simply install Docker or Podman first, and then install Kind. It‚Äôs a straightforward and easy process.1) Create kind configurationkind-config.yamlapiVersion: kind.x-k8s.io/v1alpha4kind: Clusternodes:- role: control-plane  extraPortMappings:  - containerPort: 30092    hostPort: 30092    listenAddress: \"0.0.0.0\" # Optional, defaults to \"0.0.0.0\"    protocol: tcp # Optional, defaults to tcp- role: worker- role: worker- role: worker2) Create a kind clusterkind create cluster --config kind-config.yaml --name my-cluster3) Create kafka StatefulSet and Namespacekafka.yamlapiVersion: v1kind: Namespacemetadata:  name: kafka  labels:    name: kafka---apiVersion: apps/v1kind: StatefulSetmetadata:  name: kafka  namespace: kafka  labels:    app: kafka-appspec:  serviceName: kafka-svc  replicas: 3  selector:    matchLabels:      app: kafka-app  template:    metadata:      labels:        app: kafka-app    spec:      containers:        - name: kafka-container          image: doughgle/kafka-kraft          ports:            - containerPort: 9092            - containerPort: 9093          env:            - name: REPLICAS              value: '3'            - name: SERVICE              value: kafka-svc            - name: NAMESPACE              value: kafka            - name: SHARE_DIR              value: /mnt/kafka            - name: CLUSTER_ID              value: bXktY2x1c3Rlci0xMjM0NQ==            - name: DEFAULT_REPLICATION_FACTOR              value: '3'            - name: DEFAULT_MIN_INSYNC_REPLICAS              value: '2'          volumeMounts:            - name: data              mountPath: /mnt/kafka  volumeClaimTemplates:    - metadata:        name: data      spec:        accessModes:          - \"ReadWriteOnce\"        resources:          requests:            storage: \"1Gi\"---apiVersion: v1kind: Servicemetadata:  name: kafka-svc  namespace: kafka  labels:    app: kafka-appspec:  type: NodePort  ports:    - name: '9092'      port: 9092      protocol: TCP      targetPort: 9092      nodePort: 30092  selector:    app: kafka-appkubectl exec -it kafka-0 -n kafka -- bashkafka-topics.sh --create --topic my-topic --bootstrap-server kafka-svc:9092kafka-topics.sh --list --topic my-topic --bootstrap-server kafka-svc:9092kubectl exec -it kafka-1 -n kafka -- bashkafka-console-producer.sh  --bootstrap-server kafka-svc:9092 --topic my-topickafka-console-consumer.sh --bootstrap-server kafka-svc:9092 --topic my-topic4) Create topickafka-topics.sh --delete --topic my-topic --bootstrap-server kafka-svc:9092Kafka KRaft x Kafka with ZooKeeperKafka KRaft Installation: KRaft is Kafka‚Äôs new built-in consensus mechanism that eliminates the need for ZooKeeper. In a KRaft-based installation, Kafka brokers manage metadata and leader election directly, which simplifies the architecture by reducing dependencies. KRaft is becoming the default option in newer Kafka versions because it provides better scalability, faster failover, and an overall more streamlined operation.Kafka with ZooKeeper: In traditional Kafka deployments, ZooKeeper is used to manage the cluster‚Äôs metadata, such as broker details and topic configurations. ZooKeeper handles tasks like leader election and tracking which brokers are active. While this setup has been robust for years, it adds complexity by requiring an additional service (ZooKeeper) that must be installed, managed, and maintained alongside Kafka.",
            "content_html": "<h2 id=\"kafka-on-kubernetes-using-kind\">Kafka on Kubernetes using Kind</h2><p>Recently, I came across an article on Medium that explains how to set up a local environment with Kafka in a test folder, using the Kubernetes StatefulSet concept. I decided to bring it to my blog, adding some tips and additional information. Although my knowledge of Kafka is still basic, I already have a few applications in production using this tool ‚Äî and it‚Äôs amazing how well they perform. I was also responsible for creating a solution using Kafka Connect, Kafka, and CDC for the Boleto product.</p><p>What follows is a simple and easy way to set up a local development environment with Kafka. I‚Äôll also provide a brief introduction to Kafka and explain how you can use this solution in your projects. It‚Äôs important to note that this article is not a ‚ÄúHow to run Kafka in production‚Äù guide, so keep that in mind. I may also add a Kafka command cheatsheet to make my life easier in the future.</p><p>If you‚Äôre not familiar with Kind, it‚Äôs an easy way to run Kubernetes locally. With Kind, you can use specific Kubernetes versions, configure the network to expose the API server or ports to the host, upload images, and do many other things. Simply install Docker or Podman first, and then install Kind. It‚Äôs a straightforward and easy process.</p><p>1) Create kind configuration</p><p><em>kind-config.yaml</em></p><div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">kind.x-k8s.io/v1alpha4</span><span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Cluster</span><span class=\"na\">nodes</span><span class=\"pi\">:</span><span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s\">control-plane</span>  <span class=\"na\">extraPortMappings</span><span class=\"pi\">:</span>  <span class=\"pi\">-</span> <span class=\"na\">containerPort</span><span class=\"pi\">:</span> <span class=\"m\">30092</span>    <span class=\"na\">hostPort</span><span class=\"pi\">:</span> <span class=\"m\">30092</span>    <span class=\"na\">listenAddress</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0.0.0.0\"</span> <span class=\"c1\"># Optional, defaults to \"0.0.0.0\"</span>    <span class=\"na\">protocol</span><span class=\"pi\">:</span> <span class=\"s\">tcp</span> <span class=\"c1\"># Optional, defaults to tcp</span><span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s\">worker</span><span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s\">worker</span><span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s\">worker</span></code></pre></div></div><p>2) Create a kind cluster</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kind create cluster <span class=\"nt\">--config</span> kind-config.yaml <span class=\"nt\">--name</span> my-cluster</code></pre></div></div><p>3) Create kafka StatefulSet and Namespace</p><p><em>kafka.yaml</em></p><div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">v1</span><span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Namespace</span><span class=\"na\">metadata</span><span class=\"pi\">:</span>  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">kafka</span>  <span class=\"na\">labels</span><span class=\"pi\">:</span>    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">kafka</span><span class=\"nn\">---</span><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">apps/v1</span><span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">StatefulSet</span><span class=\"na\">metadata</span><span class=\"pi\">:</span>  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">kafka</span>  <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s\">kafka</span>  <span class=\"na\">labels</span><span class=\"pi\">:</span>    <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">kafka-app</span><span class=\"na\">spec</span><span class=\"pi\">:</span>  <span class=\"na\">serviceName</span><span class=\"pi\">:</span> <span class=\"s\">kafka-svc</span>  <span class=\"na\">replicas</span><span class=\"pi\">:</span> <span class=\"m\">3</span>  <span class=\"na\">selector</span><span class=\"pi\">:</span>    <span class=\"na\">matchLabels</span><span class=\"pi\">:</span>      <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">kafka-app</span>  <span class=\"na\">template</span><span class=\"pi\">:</span>    <span class=\"na\">metadata</span><span class=\"pi\">:</span>      <span class=\"na\">labels</span><span class=\"pi\">:</span>        <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">kafka-app</span>    <span class=\"na\">spec</span><span class=\"pi\">:</span>      <span class=\"na\">containers</span><span class=\"pi\">:</span>        <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">kafka-container</span>          <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">doughgle/kafka-kraft</span>          <span class=\"na\">ports</span><span class=\"pi\">:</span>            <span class=\"pi\">-</span> <span class=\"na\">containerPort</span><span class=\"pi\">:</span> <span class=\"m\">9092</span>            <span class=\"pi\">-</span> <span class=\"na\">containerPort</span><span class=\"pi\">:</span> <span class=\"m\">9093</span>          <span class=\"na\">env</span><span class=\"pi\">:</span>            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">REPLICAS</span>              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3'</span>            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">SERVICE</span>              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">kafka-svc</span>            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">NAMESPACE</span>              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">kafka</span>            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">SHARE_DIR</span>              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">/mnt/kafka</span>            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">CLUSTER_ID</span>              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">bXktY2x1c3Rlci0xMjM0NQ==</span>            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">DEFAULT_REPLICATION_FACTOR</span>              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3'</span>            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">DEFAULT_MIN_INSYNC_REPLICAS</span>              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">2'</span>          <span class=\"na\">volumeMounts</span><span class=\"pi\">:</span>            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">data</span>              <span class=\"na\">mountPath</span><span class=\"pi\">:</span> <span class=\"s\">/mnt/kafka</span>  <span class=\"na\">volumeClaimTemplates</span><span class=\"pi\">:</span>    <span class=\"pi\">-</span> <span class=\"na\">metadata</span><span class=\"pi\">:</span>        <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">data</span>      <span class=\"na\">spec</span><span class=\"pi\">:</span>        <span class=\"na\">accessModes</span><span class=\"pi\">:</span>          <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">ReadWriteOnce\"</span>        <span class=\"na\">resources</span><span class=\"pi\">:</span>          <span class=\"na\">requests</span><span class=\"pi\">:</span>            <span class=\"na\">storage</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">1Gi\"</span><span class=\"nn\">---</span><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">v1</span><span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Service</span><span class=\"na\">metadata</span><span class=\"pi\">:</span>  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">kafka-svc</span>  <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s\">kafka</span>  <span class=\"na\">labels</span><span class=\"pi\">:</span>    <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">kafka-app</span><span class=\"na\">spec</span><span class=\"pi\">:</span>  <span class=\"na\">type</span><span class=\"pi\">:</span> <span class=\"s\">NodePort</span>  <span class=\"na\">ports</span><span class=\"pi\">:</span>    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">9092'</span>      <span class=\"na\">port</span><span class=\"pi\">:</span> <span class=\"m\">9092</span>      <span class=\"na\">protocol</span><span class=\"pi\">:</span> <span class=\"s\">TCP</span>      <span class=\"na\">targetPort</span><span class=\"pi\">:</span> <span class=\"m\">9092</span>      <span class=\"na\">nodePort</span><span class=\"pi\">:</span> <span class=\"m\">30092</span>  <span class=\"na\">selector</span><span class=\"pi\">:</span>    <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">kafka-app</span></code></pre></div></div><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kubectl <span class=\"nb\">exec</span> <span class=\"nt\">-it</span> kafka-0 <span class=\"nt\">-n</span> kafka <span class=\"nt\">--</span> bashkafka-topics.sh <span class=\"nt\">--create</span> <span class=\"nt\">--topic</span> my-topic <span class=\"nt\">--bootstrap-server</span> kafka-svc:9092kafka-topics.sh <span class=\"nt\">--list</span> <span class=\"nt\">--topic</span> my-topic <span class=\"nt\">--bootstrap-server</span> kafka-svc:9092</code></pre></div></div><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kubectl <span class=\"nb\">exec</span> <span class=\"nt\">-it</span> kafka-1 <span class=\"nt\">-n</span> kafka <span class=\"nt\">--</span> bashkafka-console-producer.sh  <span class=\"nt\">--bootstrap-server</span> kafka-svc:9092 <span class=\"nt\">--topic</span> my-topickafka-console-consumer.sh <span class=\"nt\">--bootstrap-server</span> kafka-svc:9092 <span class=\"nt\">--topic</span> my-topic</code></pre></div></div><p>4) Create topic</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kafka-topics.sh <span class=\"nt\">--delete</span> <span class=\"nt\">--topic</span> my-topic <span class=\"nt\">--bootstrap-server</span> kafka-svc:9092</code></pre></div></div><h2 id=\"kafka-kraft-x-kafka-with-zookeeper\">Kafka KRaft x Kafka with ZooKeeper</h2><p><strong>Kafka KRaft Installation</strong>: KRaft is Kafka‚Äôs new built-in consensus mechanism that eliminates the need for ZooKeeper. In a KRaft-based installation, Kafka brokers manage metadata and leader election directly, which simplifies the architecture by reducing dependencies. KRaft is becoming the default option in newer Kafka versions because it provides better scalability, faster failover, and an overall more streamlined operation.</p><p><strong>Kafka with ZooKeeper</strong>: In traditional Kafka deployments, ZooKeeper is used to manage the cluster‚Äôs metadata, such as broker details and topic configurations. ZooKeeper handles tasks like leader election and tracking which brokers are active. While this setup has been robust for years, it adds complexity by requiring an additional service (ZooKeeper) that must be installed, managed, and maintained alongside Kafka.</p>",
            "url": "/2024/09/29/kafka-on-kubernetes-using-kind.html",
            
            
            
            "tags": ["kafka","kind","kubernetes"],
            
            "date_published": "2024-09-29T00:00:00+00:00",
            "date_modified": "2024-09-29T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/28/containers-mastery.html",
            "title": "üì¶ Containers Mastery",
            "summary": "Tips and Tricks for Containers",
            "content_text": "What is Linux container ?A Linux container is a lightweight and portable unit that encapsulates an application and its dependencies. Containers utilize key Linux kernel features for process isolation and resource management, including namespaces (for isolating resources like PID, network, and filesystem) and control groups (cgroups) (for limiting and prioritizing resource usage). Additionally, union file systems enable efficient layering and storage of container images. Together, these features allow containers to operate efficiently and securely on a shared host. Basically a container image is composed of  Dependencies  Application code  Container configuration  Base imageContainer runtimeA container runtime is a software component that is responsible for running and managing containers. Containers are lightweight, portable units that package an application and its dependencies, allowing them to run consistently across different environments.  Docker  containerd  CRI-O  runc  Podman  LXC/LXD  systemd-nspawn (Don‚Äôt be angry with me)Don‚Äôt compare Docker with KubernetesIt just doesn‚Äôt make sense.. comparing Docker and Kubernetes can be confusing for beginners because they serve different purposes: Docker implements the concept of containers, while Kubernetes orchestrates those containers. An analogy is comparing a car (Docker) to a traffic system (Kubernetes); the car allows you to drive (create and run containers), while the traffic system manages the flow of multiple cars (orchestrates the deployment and scaling of containers). This distinction is crucial, as it clarifies that Docker focuses on the containerization process itself, while Kubernetes handles the management of containerized applications at scale.Container SecurityHaving secure base images for containers is crucial for maintaining the overall security of the host system. Images without elevated privileges help minimize potential attack vectors, reducing the risk of container escape and unauthorized access to the host. While concerns about insecure images are valid, it‚Äôs important to note that this is not the worst-case scenario, as containers typically run in a private network. For an attacker to exploit these vulnerabilities significantly, they would need to compromise additional components of the infrastructure, making it a more complex attack path. Therefore, while secure base images are essential, the overall security posture can still be robust with proper network isolation and access controls in place.SAST (Static Application Security Testing) and SCA (Software Composition Analysis) are essential complementary approaches for ensuring application security. While SAST analyzes the source code for vulnerabilities before execution, SCA focuses on third-party libraries and dependencies, checking for known flaws. Integrating both practices is crucial, as it allows for the identification of internal code issues and external risks associated with software components. Tools like SonarQube and Fortify for SAST, and Black Duck and Snyk for SCA, provide robust solutions to mitigate vulnerabilities, offering more comprehensive security throughout the software development lifecycle.In summary, ensure that you use secure base images that prevent vulnerabilities and do not allow root access. Conduct thorough security testing and utilize a scanning tool with an up-to-date CVE database. Keep your images minimal, as even a simple curl command can be exploited by skilled attackers. Implement read-only filesystems to enhance security and adopt practices that make updating images simple and efficient.  Quay  trivy  Docker Desktop (Docker Scout) Vulnerability ScanContainer registryA container registry is a centralized repository where container images are stored, managed, and distributed. Examples of usage include:  Docker Hub  Google Container Registry (GCR)  Amazon Elastic Container Registry (ECR)  Azure Container Registry (ACR)  Harbor  Quay  GitLab Container Registry  JFrog Container RegistryTools for working with containers  dive  Docker CLI  ctr  lazydockerSpecial images  dbeaver/cloudbeaver  netdata/netdata  lscr.io/linuxserver/wireshark:latest  nicolargo/glances  minio/minioBuilding my imagesTypically, each programming language adheres to certain conventions for images. The goal is usually to create a lightweight and secure image. We can leverage concepts such as multi-stage builds and base images with community support. Some best practices include:  Use Multi-Stage Builds: This approach allows you to minimize the final image size by separating the build environment from the production environment.  Choose Official Base Images: Opt for official images from reputable sources to ensure security and reliability.  Keep Images Lightweight: Remove unnecessary files and dependencies to reduce the image size and improve performance.  Regularly Update Images: Stay current with updates to base images and dependencies to mitigate security vulnerabilities.  Use Specific Version Tags: Instead of using ‚Äúlatest,‚Äù specify the exact version of images to avoid unexpected changes in your application.  Scan for Vulnerabilities: Regularly scan your images for known vulnerabilities to maintain security.  Document Image Purpose and Usage: Include clear documentation about the image‚Äôs purpose, usage, and configuration to facilitate easier maintenance and onboarding.Docker processes on linuxlsnsls -l /proc/&lt;PID&gt;/nsls -l /proc/$(docker inspect --format '' &lt;container_name&gt;)/nsnsenter --target &lt;PID&gt; --mount --uts --ipc --net --pid",
            "content_html": "<h2 id=\"what-is-linux-container-\">What is Linux container ?</h2><p>A Linux container is a lightweight and portable unit that encapsulates an application and its dependencies. Containers utilize key Linux kernel features for process isolation and resource management, including namespaces (for isolating resources like PID, network, and filesystem) and control groups (cgroups) (for limiting and prioritizing resource usage). Additionally, union file systems enable efficient layering and storage of container images. Together, these features allow containers to operate efficiently and securely on a shared host. Basically a container image is composed of</p><ul>  <li>Dependencies</li>  <li>Application code</li>  <li>Container configuration</li>  <li>Base image</li></ul><h2 id=\"container-runtime\">Container runtime</h2><p>A container runtime is a software component that is responsible for running and managing containers. Containers are lightweight, portable units that package an application and its dependencies, allowing them to run consistently across different environments.</p><ul>  <li>Docker</li>  <li>containerd</li>  <li>CRI-O</li>  <li>runc</li>  <li>Podman</li>  <li>LXC/LXD</li>  <li>systemd-nspawn (Don‚Äôt be angry with me)</li></ul><h2 id=\"dont-compare-docker-with-kubernetes\">Don‚Äôt compare Docker with Kubernetes</h2><p>It just doesn‚Äôt make sense.. comparing Docker and Kubernetes can be confusing for beginners because they serve different purposes: Docker implements the concept of containers, while Kubernetes orchestrates those containers. An analogy is comparing a car (Docker) to a traffic system (Kubernetes); the car allows you to drive (create and run containers), while the traffic system manages the flow of multiple cars (orchestrates the deployment and scaling of containers). This distinction is crucial, as it clarifies that Docker focuses on the containerization process itself, while Kubernetes handles the management of containerized applications at scale.</p><h2 id=\"container-security\">Container Security</h2><p>Having secure base images for containers is crucial for maintaining the overall security of the host system. Images without elevated privileges help minimize potential attack vectors, reducing the risk of container escape and unauthorized access to the host. While concerns about insecure images are valid, it‚Äôs important to note that this is not the worst-case scenario, as containers typically run in a private network. For an attacker to exploit these vulnerabilities significantly, they would need to compromise additional components of the infrastructure, making it a more complex attack path. Therefore, while secure base images are essential, the overall security posture can still be robust with proper network isolation and access controls in place.</p><p>SAST (Static Application Security Testing) and SCA (Software Composition Analysis) are essential complementary approaches for ensuring application security. While SAST analyzes the source code for vulnerabilities before execution, SCA focuses on third-party libraries and dependencies, checking for known flaws. Integrating both practices is crucial, as it allows for the identification of internal code issues and external risks associated with software components. Tools like SonarQube and Fortify for SAST, and Black Duck and Snyk for SCA, provide robust solutions to mitigate vulnerabilities, offering more comprehensive security throughout the software development lifecycle.</p><p>In summary, ensure that you use secure base images that prevent vulnerabilities and do not allow root access. Conduct thorough security testing and utilize a scanning tool with an up-to-date CVE database. Keep your images minimal, as even a simple curl command can be exploited by skilled attackers. Implement read-only filesystems to enhance security and adopt practices that make updating images simple and efficient.</p><ul>  <li>Quay</li>  <li>trivy</li>  <li>Docker Desktop (Docker Scout) Vulnerability Scan</li></ul><h2 id=\"container-registry\">Container registry</h2><p>A container registry is a centralized repository where container images are stored, managed, and distributed. Examples of usage include:</p><ul>  <li>Docker Hub</li>  <li>Google Container Registry (GCR)</li>  <li>Amazon Elastic Container Registry (ECR)</li>  <li>Azure Container Registry (ACR)</li>  <li>Harbor</li>  <li>Quay</li>  <li>GitLab Container Registry</li>  <li>JFrog Container Registry</li></ul><h2 id=\"tools-for-working-with-containers\">Tools for working with containers</h2><ul>  <li>dive</li>  <li>Docker CLI</li>  <li>ctr</li>  <li>lazydocker</li></ul><h2 id=\"special-images\">Special images</h2><ul>  <li>dbeaver/cloudbeaver</li>  <li>netdata/netdata</li>  <li>lscr.io/linuxserver/wireshark:latest</li>  <li>nicolargo/glances</li>  <li>minio/minio</li></ul><h2 id=\"building-my-images\">Building my images</h2><p>Typically, each programming language adheres to certain conventions for images. The goal is usually to create a lightweight and secure image. We can leverage concepts such as multi-stage builds and base images with community support. Some best practices include:</p><ul>  <li>Use Multi-Stage Builds: This approach allows you to minimize the final image size by separating the build environment from the production environment.</li>  <li>Choose Official Base Images: Opt for official images from reputable sources to ensure security and reliability.</li>  <li>Keep Images Lightweight: Remove unnecessary files and dependencies to reduce the image size and improve performance.</li>  <li>Regularly Update Images: Stay current with updates to base images and dependencies to mitigate security vulnerabilities.</li>  <li>Use Specific Version Tags: Instead of using ‚Äúlatest,‚Äù specify the exact version of images to avoid unexpected changes in your application.</li>  <li>Scan for Vulnerabilities: Regularly scan your images for known vulnerabilities to maintain security.</li>  <li>Document Image Purpose and Usage: Include clear documentation about the image‚Äôs purpose, usage, and configuration to facilitate easier maintenance and onboarding.</li></ul><h2 id=\"docker-processes-on-linux\">Docker processes on linux</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lsnsls -l /proc/&lt;PID&gt;/nsls -l /proc/$(docker inspect --format '' &lt;container_name&gt;)/nsnsenter --target &lt;PID&gt; --mount --uts --ipc --net --pid</code></pre></div></div>",
            "url": "/2024/09/28/containers-mastery.html",
            
            
            
            "tags": ["linux","containers","docker"],
            
            "date_published": "2024-09-28T00:00:00+00:00",
            "date_modified": "2024-09-28T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/27/l0calh0t-startup-day1.html",
            "title": "üí° l0calh0t Startup - day 1",
            "summary": "Building the l0calh0t Startup",
            "content_text": "About the projectI recently saw a project on YouTube where the YouTuber created a complete technology environment to support a fake product. I liked the idea and thought about creating a real project‚Ä¶ starting from localhost to production. I don‚Äôt consider myself a good programmer, but I‚Äôm looking for a well-made bean and rice. My main focus is to launch a stable product with acceptable security standards and that simply implements the idea as it is now in my mind. I present to you the l0calh0t startup. You can follow the progress of this through a series of articles on this blog!note: don‚Äôt take me too seriouslyI know there are already similar projects on the internet, but most of them focus on development and not on operations. I have two main goals. The first is to test technologies, discuss decisions and show concerns that usually arise when our project goes into production. The second is to perhaps make some money with this. My initial focus is Brazilian software developers. In general, I get along well with developers. I believe it is because every day I help them solve problems. Developers change, but the problems are usually the same.Let‚Äôs get started. What follows is information about the startup. To be quite honest, what I intend to build already exists, something similar to render.com. But my ideas go a little further. Let‚Äôs go together and for any tips or corrections, contact me on Telegram @apolzek.l0calh0t üöÄüöÄüöÄAbout the startupl0calh0t is an innovative startup that simplifies container-based application hosting, designed for developers of all levels, SREs, DevOps, and QAs. By abstracting infrastructure and networking, it enables fast, cost-effective container deployment. Users can make applications publicly accessible or control access as needed. Unlike traditional solutions focused on large enterprises with strict SLAs, l0calh0t prioritizes simplicity and accessibility, creating an agile environment for rapid testing and iteration, without the complexity of managing traditional servers.About the ideaThe idea is basically a render.com with some differences. I want to do something more ‚Äúapi first‚Äù. I want to do it in a way that is similar to the way people work with containers locally and I also want to offer a way for them to have details about their applications by adding components to the infrastructure that abstract away the complexity of doing so.What do I need?Considering that I have no money, no computing resources, and no advanced programming skills (that makes it hard ü§£ü§£), I need to focus on something simple that works. I want to create a business abstraction on top of Kubernetes and put all the complexity into it using tools I have experience with. I need a cheap domain like localhot.io. I need a payment method and reasonable bandwidth. I want to physically separate the servers where the startup‚Äôs applications are from the servers where the end-user containers will be. I need to think about security and a business model that is viable for Brazilian developers.For the first poc‚Äôs, the simpler the better. I intend to use python or golang for this. I will use kind as the local kubernetes environment, the local registry of my machine for the images and also my local network (I run a certain risk).The networking part is very important in this project, but first I want a functional MVP.About my localhost (workstation)My computer settings are  Intel(R) Core(TM) i5-9400 CPU @ 2.90GHz;  16 RAM;  440G SSD;  EndeavourOSLet‚Äôs see how long it will be viable to run locally. In general, I think the best route, if there‚Äôs enough money, would be to go for on-premises. But to validate the idea in the market (in production), I could use a cloud solution. I haven‚Äôt decided on this yet, so applying some project management now is essential to avoid going crazy!End(?)So, that‚Äôs it. I‚Äôve reached the end of my first article. I hope I‚Äôve been clear about my idea. In the end, even if everything goes wrong, I will have gained valuable knowledge. These notes may be useful to someone else, and even to my future self. What‚Äôs coming next? A series of reflections, articles about random tools, and some not-so-professional code.",
            "content_html": "<h2 id=\"about-the-project\">About the project</h2><p>I recently saw a project on YouTube where the YouTuber created a complete technology environment to support a fake product. I liked the idea and thought about creating a real project‚Ä¶ starting from localhost to production. I don‚Äôt consider myself a good programmer, but I‚Äôm looking for a well-made bean and rice. My main focus is to launch a stable product with acceptable security standards and that simply implements the idea as it is now in my mind. I present to you the <strong>l0calh0t</strong> startup. You can follow the progress of this through a series of articles on this blog!</p><p><strong>note</strong>: <em>don‚Äôt take me too seriously</em></p><p>I know there are already similar projects on the internet, but most of them focus on <em>development</em> and not on <em>operations</em>. I have two main goals. The first is to test technologies, discuss decisions and show concerns that usually arise when our project goes into production. The second is to perhaps make some money with this. My initial focus is Brazilian software developers. In general, I get along well with developers. I believe it is because every day I help them solve problems. Developers change, but the problems are usually the same.</p><p>Let‚Äôs get started. What follows is information about the startup. To be quite honest, what I intend to build already exists, something similar to <em>render.com</em>. But my ideas go a little further. Let‚Äôs go together and for any tips or corrections, contact me on Telegram <strong>@apolzek</strong>.</p><h2 id=\"l0calh0t-\">l0calh0t üöÄüöÄüöÄ</h2><h3 id=\"about-the-startup\">About the startup</h3><p><strong>l0calh0t</strong> is an innovative startup that simplifies container-based application hosting, designed for developers of all levels, SREs, DevOps, and QAs. By abstracting infrastructure and networking, it enables fast, cost-effective container deployment. Users can make applications publicly accessible or control access as needed. Unlike traditional solutions focused on large enterprises with strict SLAs, <strong>l0calh0t</strong> prioritizes simplicity and accessibility, creating an agile environment for rapid testing and iteration, without the complexity of managing traditional servers.</p><h3 id=\"about-the-idea\">About the idea</h3><p>The idea is basically a <em>render.com</em> with some differences. I want to do something more ‚Äúapi first‚Äù. I want to do it in a way that is similar to the way people work with containers locally and I also want to offer a way for them to have details about their applications by adding components to the infrastructure that abstract away the complexity of doing so.</p><h3 id=\"what-do-i-need\">What do I need?</h3><p>Considering that I have no money, no computing resources, and no advanced programming skills (that makes it hard ü§£ü§£), I need to focus on something simple that works. I want to create a business abstraction on top of Kubernetes and put all the complexity into it using tools I have experience with. I need a cheap domain like <strong>localhot.io</strong>. I need a payment method and reasonable bandwidth. I want to physically separate the servers where the startup‚Äôs applications are from the servers where the end-user containers will be. I need to think about security and a business model that is viable for Brazilian developers.</p><p>For the first poc‚Äôs, the simpler the better. I intend to use python or golang for this. I will use kind as the local kubernetes environment, the local registry of my machine for the images and also my local network (I run a certain risk).The networking part is very important in this project, but first I want a functional MVP.</p><h3 id=\"about-my-localhost-workstation\">About my localhost (workstation)</h3><p>My computer settings are</p><ul>  <li>Intel(R) Core(TM) i5-9400 CPU @ 2.90GHz;</li>  <li>16 RAM;</li>  <li>440G SSD;</li>  <li>EndeavourOS</li></ul><p>Let‚Äôs see how long it will be viable to run locally. In general, I think the best route, if there‚Äôs enough money, would be to go for on-premises. But to validate the idea in the market (in production), I could use a cloud solution. I haven‚Äôt decided on this yet, so applying some project management now is essential to avoid going crazy!</p><h3 id=\"end\">End(?)</h3><p>So, that‚Äôs it. I‚Äôve reached the end of my first article. I hope I‚Äôve been clear about my idea. In the end, even if everything goes wrong, I will have gained valuable knowledge. These notes may be useful to someone else, and even to my future self. What‚Äôs coming next? A series of reflections, articles about random tools, and some not-so-professional code.</p>",
            "url": "/2024/09/27/l0calh0t-startup-day1.html",
            
            
            
            "tags": ["devops","sre","project","startup"],
            
            "date_published": "2024-09-27T00:00:00+00:00",
            "date_modified": "2024-09-27T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/26/DISCLAIMER.html",
            "title": "‚ö†Ô∏è DISCLAIMER",
            "summary": "DISCLAIMER and GOALS",
            "content_text": "DISCLAIMER  My first language is Brazilian Portuguese, but I‚Äôm learning English and will use it here. You will likely see some writing mistakes; it‚Äôs part of learning  I have worked as a Reliability Engineer only in Brazil (until now)  I plan to discuss reliability topics and other subjects like security, processes, governance, and soft skills  Feedback is always welcome as long as it‚Äôs constructive. Feel free to contact me on Telegram or Discord, but please be respectful (@apolzek)  Remember, everything here is open to discussion. You should form your own opinionsGOALS  Talk about tools that are not well-known but have great potential  Track my studies with short reflective articles  Share my views on technologies, processes, and products  Soon, I will revisit my notes to see how my views on certain topics have changedREMEMBERüáßüá∑ ‚ÄúA √∫nica maneira de fazer as coisas funcionarem bem √© entendendo o motivo pelo qual elas quebram.‚Äùüá∫üá∏ ‚ÄúThe only way to make things work well is by understanding why they break.‚Äù",
            "content_html": "<h2 id=\"disclaimer\">DISCLAIMER</h2><ul>  <li>My first language is Brazilian Portuguese, but I‚Äôm learning English and will use it here. You will likely see some writing mistakes; it‚Äôs part of learning</li>  <li>I have worked as a Reliability Engineer only in Brazil (<em>until now</em>)</li>  <li>I plan to discuss reliability topics and other subjects like security, processes, governance, and soft skills</li>  <li>Feedback is always welcome as long as it‚Äôs constructive. Feel free to contact me on Telegram or Discord, but please be respectful (<em>@apolzek</em>)</li>  <li>Remember, everything here is open to discussion. You should form your <strong>own opinions</strong></li></ul><h2 id=\"goals\">GOALS</h2><ul>  <li>Talk about tools that are not well-known but have great potential</li>  <li>Track my studies with short reflective articles</li>  <li>Share my views on technologies, processes, and products</li>  <li>Soon, I will revisit my notes to see how my views on certain topics have changed</li></ul><h2 id=\"remember\">REMEMBER</h2><p>üáßüá∑ ‚ÄúA √∫nica maneira de fazer as coisas funcionarem bem √© entendendo o motivo pelo qual elas quebram.‚Äù</p><p>üá∫üá∏ ‚ÄúThe only way to make things work well is by understanding why they break.‚Äù</p>",
            "url": "/2024/09/26/DISCLAIMER.html",
            
            
            
            "tags": ["disclaimer","goals"],
            
            "date_published": "2024-09-26T00:00:00+00:00",
            "date_modified": "2024-09-26T00:00:00+00:00",
            
                "author": 
                ""
                
            
        }
    
    ]
}