{
    "version": "https://jsonfeed.org/version/1",
    "title": "apolzek",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "blog",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
"items": [
    
        {
            "id": "/2024/12/01/cka.html",
            "title": "tools/k8s/cka",
            "summary": "CKA",
            "content_text": "CKA",
            "content_html": "<h2 id=\"cka\">CKA</h2>",
            "url": "/2024/12/01/cka.html",
            
            
            
            "tags": ["cka","certification"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/acronym-confusion.html",
            "title": "opinions/acronym-confusion",
            "summary": "Acronym confusion",
            "content_text": "Acronym confusion“Por favor, note que neste artigo, evitarei fazer comparações entre os itens mencionados, concentrando-me em analisá-los individualmente.”SOLID:Sigla:S: Single Responsibility PrincipleO: Open/Closed PrincipleL: Liskov Substitution PrincipleI: Interface Segregation PrincipleD: Dependency Inversion PrincipleEstes são princípios de design de software que visam criar código mais fácil de entender, manter e estender.YAGNI:Sigla:Y: You Ain’t Gonna Need ItPrincípio que sugere que você não deve adicionar funcionalidades ou complexidades ao seu código até que realmente precise delas. Evita o excesso de engenharia.BDD:B: Behavior-Driven DevelopmentD: DevelopmentMetodologia de desenvolvimento que se concentra no comportamento esperado do software, envolvendo colaboração entre desenvolvedores, testadores e partes interessadas.OOD:Sigla:O: Object-Oriented DesignD: DevelopmentRefere-se ao processo de usar princípios de design orientado a objetos durante o desenvolvimento de software para criar sistemas mais flexíveis e reutilizáveis.ACID:Sigla:A: AtomicityC: ConsistencyI: IsolationD: DurabilityPrincípios de transação em banco de dados que garantem a integridade dos dados mesmo em face de falhas.ORM:Sigla:O: Object-Relational MappingTécnica de programação que converte dados entre tipos de sistemas incompatíveis em linguagens de programação orientadas a objetos.MVC:Sigla:M: ModelV: ViewC: ControllerPadrão de arquitetura de software que separa a lógica de apresentação dos dados de um aplicativo.KISS:TDD:",
            "content_html": "<h2 id=\"acronym-confusion\">Acronym confusion</h2><p>“Por favor, note que neste artigo, evitarei fazer comparações entre os itens mencionados, concentrando-me em analisá-los individualmente.”</p><h4 id=\"solid\">SOLID:</h4><p><strong>Sigla</strong>:</p><p>S: Single Responsibility PrincipleO: Open/Closed PrincipleL: Liskov Substitution PrincipleI: Interface Segregation PrincipleD: Dependency Inversion Principle</p><p>Estes são princípios de design de software que visam criar código mais fácil de entender, manter e estender.</p><h4 id=\"yagni\">YAGNI:</h4><p><strong>Sigla</strong>:</p><p>Y: You Ain’t Gonna Need ItPrincípio que sugere que você não deve adicionar funcionalidades ou complexidades ao seu código até que realmente precise delas. Evita o excesso de engenharia.BDD:B: Behavior-Driven DevelopmentD: Development</p><p>Metodologia de desenvolvimento que se concentra no comportamento esperado do software, envolvendo colaboração entre desenvolvedores, testadores e partes interessadas.</p><h4 id=\"ood\">OOD:</h4><p><strong>Sigla</strong>:</p><p>O: Object-Oriented DesignD: Development</p><p>Refere-se ao processo de usar princípios de design orientado a objetos durante o desenvolvimento de software para criar sistemas mais flexíveis e reutilizáveis.</p><h4 id=\"acid\">ACID:</h4><p><strong>Sigla</strong>:</p><p>A: AtomicityC: ConsistencyI: IsolationD: Durability</p><p>Princípios de transação em banco de dados que garantem a integridade dos dados mesmo em face de falhas.</p><h4 id=\"orm\">ORM:</h4><p><strong>Sigla</strong>:</p><p>O: Object-Relational Mapping</p><p>Técnica de programação que converte dados entre tipos de sistemas incompatíveis em linguagens de programação orientadas a objetos.</p><h4 id=\"mvc\">MVC:</h4><p><strong>Sigla</strong>:</p><p>M: ModelV: ViewC: Controller</p><p>Padrão de arquitetura de software que separa a lógica de apresentação dos dados de um aplicativo.</p><h4 id=\"kiss\">KISS:</h4><h4 id=\"tdd\">TDD:</h4>",
            "url": "/2024/12/01/acronym-confusion.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/linux-processes.html",
            "title": "operating-system/processes",
            "summary": "Processes",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/linux-processes.html",
            
            
            
            "tags": ["linux","processes"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/linux-network.html",
            "title": "operating-system/processes",
            "summary": "Processes",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/linux-network.html",
            
            
            
            "tags": ["linux","processes"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/basicao.html",
            "title": "development/ruby/basicao",
            "summary": "Overview",
            "content_text": "",
            "content_html": "",
            "url": "/2024/12/01/basicao.html",
            
            
            
            "tags": ["ruby","overview"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/python/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/overview.html",
            "title": "development/java/overview",
            "summary": "Overview",
            "content_text": "Overview",
            "content_html": "<h2 id=\"overview\">Overview</h2>",
            "url": "/2024/12/01/overview.html",
            
            
            
            "tags": ["java","overview"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/slices.html",
            "title": "development/golang/slices",
            "summary": "Slices",
            "content_text": "Slicespackage mainimport \"fmt\"func main() {\tvar s = []int{1, 2, 3}\tmodifySlice(s)\tfmt.Println(s)}func modifySlice(i []int) {\ti[0] = 3\ti = append(i, 4)\ti[2] = 4}O motivo é que o na verdade isso é um ponteiro, quando você deu append o ponteiro antigo foi descartado e um novo foi gerado contendo todo que havia no antigo i mais o novo elemento. Como s ainda aponta para o ponteiro antigo print vai imprimir o conteúdo antigo que teve apenas o primeiro elemento alterado.package mainimport \"fmt\"func main() {\tvar s = []int{1, 2, 3}\tmodifySlice(&amp;s)\tfmt.Println(s)}func modifySlice(i *[]int) {\t// Corrija o slice usando o ponteiro\t(*i)[0] = 3\t*i = append(*i, 4)\t(*i)[2] = 4}",
            "content_html": "<h2 id=\"slices\">Slices</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">}</span>\t<span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">i</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">3</span>\t<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">)</span>\t<span class=\"n\">i</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">4</span><span class=\"p\">}</span></code></pre></div></div><p>O motivo é que o na verdade isso é um ponteiro, quando você deu append o ponteiro antigo foi descartado e um novo foi gerado contendo todo que havia no antigo i mais o novo elemento. Como s ainda aponta para o ponteiro antigo print vai imprimir o conteúdo antigo que teve apenas o primeiro elemento alterado.</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">}</span>\t<span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">modifySlice</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span><span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"c\">// Corrija o slice usando o ponteiro</span>\t<span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">3</span>\t<span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">)</span>\t<span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)[</span><span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">4</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/12/01/slices.html",
            
            
            
            "tags": ["go","slices"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/frameworks.html",
            "title": "development/golang/frameworks",
            "summary": "Frameworks",
            "content_text": "FrameworksGoFrGinhttps://medium.com/@chaithra.shetty/introducing-gofr-the-go-framework-541252fabc42",
            "content_html": "<h2 id=\"frameworks\">Frameworks</h2><p>GoFrGin</p><p>https://medium.com/@chaithra.shetty/introducing-gofr-the-go-framework-541252fabc42</p>",
            "url": "/2024/12/01/frameworks.html",
            
            
            
            "tags": ["go","frameworks"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/factory.html",
            "title": "development/padroes-de-projeto/factory",
            "summary": "Factory",
            "content_text": "Factory",
            "content_html": "<h2 id=\"factory\">Factory</h2>",
            "url": "/2024/12/01/factory.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/pilha.html",
            "title": "development/estrutura-de-dados/pilha",
            "summary": "Pilha",
            "content_text": "Pilha",
            "content_html": "<h2 id=\"pilha\">Pilha</h2>",
            "url": "/2024/12/01/pilha.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/fila.html",
            "title": "development/estrutura-de-dados/fila",
            "summary": "Fila",
            "content_text": "Fila",
            "content_html": "<h2 id=\"fila\">Fila</h2>",
            "url": "/2024/12/01/fila.html",
            
            
            
            "tags": ["fila","queue"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/redis.html",
            "title": "data/redis",
            "summary": "Redis",
            "content_text": "Redis",
            "content_html": "<h2 id=\"redis\">Redis</h2>",
            "url": "/2024/12/01/redis.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/rabbitmq.html",
            "title": "data/rabbitmq",
            "summary": null,
            "content_text": "RabbitMQ",
            "content_html": "<h2 id=\"rabbitmq\">RabbitMQ</h2>",
            "url": "/2024/12/01/rabbitmq.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/postgres.html",
            "title": "data/postgres",
            "summary": "Postgres",
            "content_text": "Postgres",
            "content_html": "<h2 id=\"postgres\">Postgres</h2>",
            "url": "/2024/12/01/postgres.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/kafka.html",
            "title": "data/kafka",
            "summary": "Kafka",
            "content_text": "Kafka",
            "content_html": "<h2 id=\"kafka\">Kafka</h2>",
            "url": "/2024/12/01/kafka.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/kafka-connect.html",
            "title": "data/kafka-connect",
            "summary": "Kafka Connect",
            "content_text": "Kafka Connect",
            "content_html": "<h2 id=\"kafka-connect\">Kafka Connect</h2>",
            "url": "/2024/12/01/kafka-connect.html",
            
            
            
            "tags": ["kafka","kafka-connect"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/ufw.html",
            "title": "cheatsheet/ufw",
            "summary": "Cheatsheet ufw",
            "content_text": "Cheatsheet ufw# Habilitar o Firewallsudo ufw enable# Desabilitar o Firewallsudo ufw disable# Verificar o Status do Firewallsudo ufw status# Adicionar uma Regra de Permissão de Porta (por exemplo, porta 80/tcp)sudo ufw allow 80/tcp# Adicionar uma Regra de Permissão para um Range de Portas (por exemplo, portas de 8000 a 8010/tcp)sudo ufw allow 8000:8010/tcp# Adicionar uma Regra de Permissão para um Aplicativo Específico (por exemplo, OpenSSH)sudo ufw allow OpenSSH# Negar uma Porta (por exemplo, porta 22/tcp)sudo ufw deny 22/tcp# Limitar a taxa de conexões para um determinado serviço (por exemplo, SSH)sudo ufw limit ssh# Excluir uma Regra (por exemplo, excluir a regra que permite o tráfego na porta 80/tcp)sudo ufw delete allow 80/tcp# Habilitar ou Desabilitar o Loggingsudo ufw logging onsudo ufw logging off# Regras de IPv6 (substitua allow ou deny por allow6 ou deny6 para IPv6)sudo ufw allow6 80/tcpsudo ufw deny6 22/tcp# Permitir tráfego de uma porta UDP específicasudo ufw allow 53/udp",
            "content_html": "<h2 id=\"cheatsheet-ufw\">Cheatsheet ufw</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Habilitar o Firewallsudo ufw enable# Desabilitar o Firewallsudo ufw disable# Verificar o Status do Firewallsudo ufw status# Adicionar uma Regra de Permissão de Porta (por exemplo, porta 80/tcp)sudo ufw allow 80/tcp# Adicionar uma Regra de Permissão para um Range de Portas (por exemplo, portas de 8000 a 8010/tcp)sudo ufw allow 8000:8010/tcp# Adicionar uma Regra de Permissão para um Aplicativo Específico (por exemplo, OpenSSH)sudo ufw allow OpenSSH# Negar uma Porta (por exemplo, porta 22/tcp)sudo ufw deny 22/tcp# Limitar a taxa de conexões para um determinado serviço (por exemplo, SSH)sudo ufw limit ssh# Excluir uma Regra (por exemplo, excluir a regra que permite o tráfego na porta 80/tcp)sudo ufw delete allow 80/tcp# Habilitar ou Desabilitar o Loggingsudo ufw logging onsudo ufw logging off# Regras de IPv6 (substitua allow ou deny por allow6 ou deny6 para IPv6)sudo ufw allow6 80/tcpsudo ufw deny6 22/tcp# Permitir tráfego de uma porta UDP específicasudo ufw allow 53/udp</code></pre></div></div>",
            "url": "/2024/12/01/ufw.html",
            
            
            
            "tags": ["ufw","ubuntu","firewall"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/python.html",
            "title": "cheatsheet/python",
            "summary": "Cheatsheet python",
            "content_text": "Cheatsheet python",
            "content_html": "<h2 id=\"cheatsheet-python\">Cheatsheet python</h2>",
            "url": "/2024/12/01/python.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/lpi2.html",
            "title": "cheatsheet/lpi2",
            "summary": "Cheatsheet lpi2",
            "content_text": "Cheatsheet lpi2",
            "content_html": "<h2 id=\"cheatsheet-lpi2\">Cheatsheet lpi2</h2>",
            "url": "/2024/12/01/lpi2.html",
            
            
            
            "tags": ["lpi2","linux"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/lpi1.html",
            "title": "cheatsheet/lpi1",
            "summary": "Cheatsheet lpi1",
            "content_text": "Cheatsheet lpi1",
            "content_html": "<h2 id=\"cheatsheet-lpi1\">Cheatsheet lpi1</h2>",
            "url": "/2024/12/01/lpi1.html",
            
            
            
            "tags": ["lpi1","linux"],
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/kubectl.html",
            "title": "cheatsheet/kubectl",
            "summary": "Cheatsheet kubectl",
            "content_text": "Cheatsheet kubectl",
            "content_html": "<h2 id=\"cheatsheet-kubectl\">Cheatsheet kubectl</h2>",
            "url": "/2024/12/01/kubectl.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/12/01/ansible.html",
            "title": "cheatsheet/ansible",
            "summary": "Cheatsheet ansible",
            "content_text": "Cheatsheet ansible",
            "content_html": "<h2 id=\"cheatsheet-ansible\">Cheatsheet ansible</h2>",
            "url": "/2024/12/01/ansible.html",
            
            
            
            
            
            "date_published": "2024-12-01T00:00:00+00:00",
            "date_modified": "2024-12-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/11/24/reverse-ssh-tunneling.html",
            "title": "development/golang/reverse-ssh-tunneling",
            "summary": "Reverse SSH Tunneling",
            "content_text": "Reverse SSH Tunnelingpackage mainimport (\t\"fmt\"\t\"io\"\t\"io/ioutil\"\t\"log\"\t\"net\"\t\"golang.org/x/crypto/ssh\")type Endpoint struct {\tHost string\tPort int}func (endpoint *Endpoint) String() string {\treturn fmt.Sprintf(\"%s:%d\", endpoint.Host, endpoint.Port)}func handleClient(client net.Conn, remote net.Conn) {\tdefer client.Close()\tchDone := make(chan bool)\t// Start remote -&gt; local data transfer\tgo func() {\t\t_, err := io.Copy(client, remote)\t\tif err != nil {\t\t\tlog.Printf(\"error while copy remote-&gt;local: %s\", err)\t\t}\t\tchDone &lt;- true\t}()\t// Start local -&gt; remote data transfer\tgo func() {\t\t_, err := io.Copy(remote, client)\t\tif err != nil {\t\t\tlog.Println(fmt.Sprintf(\"error while copy local-&gt;remote: %s\", err))\t\t}\t\tchDone &lt;- true\t}()\t&lt;-chDone}func publicKeyFile(file string) ssh.AuthMethod {\tbuffer, err := ioutil.ReadFile(file)\tif err != nil {\t\tlog.Fatalln(fmt.Sprintf(\"Cannot read SSH public key file %s\", file))\t\treturn nil\t}\tkey, err := ssh.ParsePrivateKey(buffer)\tif err != nil {\t\tlog.Fatalln(fmt.Sprintf(\"Cannot parse SSH public key file %s\", file))\t\treturn nil\t}\treturn ssh.PublicKeys(key)}// local service to be forwardedvar localEndpoint = Endpoint{\tHost: \"localhost\",\tPort: 8000,}// remote SSH servervar serverEndpoint = Endpoint{\tHost: \"192.168.100.19\",\tPort: 22,}// remote forwarding port (on remote SSH server network)var remoteEndpoint = Endpoint{\tHost: \"localhost\",\tPort: 9000,}func main() {\t// refer to https://godoc.org/golang.org/x/crypto/ssh for other authentication types\tsshConfig := &amp;ssh.ClientConfig{\t\t// SSH connection username\t\tUser: \"&lt;your-user&gt;\",\t\tAuth: []ssh.AuthMethod{\t\t\t// put here your private key path\t\t\t//publicKeyFile(\"/home/apolzek/.ssh/id_ed25519\"),\t\t\tssh.Password(\"&lt;your-password&gt;\"),\t\t},\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\t}\t// Connect to SSH remote server using serverEndpoint\tserverConn, err := ssh.Dial(\"tcp\", serverEndpoint.String(), sshConfig)\tif err != nil {\t\tlog.Fatalln(fmt.Printf(\"Dial INTO remote server error: %s\", err))\t}\t// Listen on remote server port\tlistener, err := serverConn.Listen(\"tcp\", remoteEndpoint.String())\tif err != nil {\t\tlog.Fatalln(fmt.Printf(\"Listen open port ON remote server error: %s\", err))\t}\tdefer listener.Close()\t// handle incoming connections on reverse forwarded tunnel\tfor {\t\t// Open a (local) connection to localEndpoint whose content will be forwarded so serverEndpoint\t\tlocal, err := net.Dial(\"tcp\", localEndpoint.String())\t\tif err != nil {\t\t\tlog.Fatalln(fmt.Printf(\"Dial INTO local service error: %s\", err))\t\t}\t\tclient, err := listener.Accept()\t\tif err != nil {\t\t\tlog.Fatalln(err)\t\t}\t\thandleClient(client, local)\t}}",
            "content_html": "<h2 id=\"reverse-ssh-tunneling\">Reverse SSH Tunneling</h2><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"io\"</span>\t<span class=\"s\">\"io/ioutil\"</span>\t<span class=\"s\">\"log\"</span>\t<span class=\"s\">\"net\"</span>\t<span class=\"s\">\"golang.org/x/crypto/ssh\"</span><span class=\"p\">)</span><span class=\"k\">type</span> <span class=\"n\">Endpoint</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">Host</span> <span class=\"kt\">string</span>\t<span class=\"n\">Port</span> <span class=\"kt\">int</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">endpoint</span> <span class=\"o\">*</span><span class=\"n\">Endpoint</span><span class=\"p\">)</span> <span class=\"n\">String</span><span class=\"p\">()</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"%s:%d\"</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">.</span><span class=\"n\">Host</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">.</span><span class=\"n\">Port</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">handleClient</span><span class=\"p\">(</span><span class=\"n\">client</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Conn</span><span class=\"p\">,</span> <span class=\"n\">remote</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Conn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">defer</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"n\">chDone</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">chan</span> <span class=\"kt\">bool</span><span class=\"p\">)</span>\t<span class=\"c\">// Start remote -&gt; local data transfer</span>\t<span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t\t<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"p\">)</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"error while copy remote-&gt;local: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">chDone</span> <span class=\"o\">&lt;-</span> <span class=\"no\">true</span>\t<span class=\"p\">}()</span>\t<span class=\"c\">// Start local -&gt; remote data transfer</span>\t<span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t\t<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">remote</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">)</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"error while copy local-&gt;remote: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">chDone</span> <span class=\"o\">&lt;-</span> <span class=\"no\">true</span>\t<span class=\"p\">}()</span>\t<span class=\"o\">&lt;-</span><span class=\"n\">chDone</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">publicKeyFile</span><span class=\"p\">(</span><span class=\"n\">file</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">AuthMethod</span> <span class=\"p\">{</span>\t<span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ioutil</span><span class=\"o\">.</span><span class=\"n\">ReadFile</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"Cannot read SSH public key file %s\"</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">))</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span>\t<span class=\"p\">}</span>\t<span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">ParsePrivateKey</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"Cannot parse SSH public key file %s\"</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">))</span>\t\t<span class=\"k\">return</span> <span class=\"no\">nil</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">PublicKeys</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"c\">// local service to be forwarded</span><span class=\"k\">var</span> <span class=\"n\">localEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"localhost\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">8000</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"c\">// remote SSH server</span><span class=\"k\">var</span> <span class=\"n\">serverEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"192.168.100.19\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">22</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"c\">// remote forwarding port (on remote SSH server network)</span><span class=\"k\">var</span> <span class=\"n\">remoteEndpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">{</span>\t<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"s\">\"localhost\"</span><span class=\"p\">,</span>\t<span class=\"n\">Port</span><span class=\"o\">:</span> <span class=\"m\">9000</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// refer to https://godoc.org/golang.org/x/crypto/ssh for other authentication types</span>\t<span class=\"n\">sshConfig</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">ClientConfig</span><span class=\"p\">{</span>\t\t<span class=\"c\">// SSH connection username</span>\t\t<span class=\"n\">User</span><span class=\"o\">:</span> <span class=\"s\">\"&lt;your-user&gt;\"</span><span class=\"p\">,</span>\t\t<span class=\"n\">Auth</span><span class=\"o\">:</span> <span class=\"p\">[]</span><span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">AuthMethod</span><span class=\"p\">{</span>\t\t\t<span class=\"c\">// put here your private key path</span>\t\t\t<span class=\"c\">//publicKeyFile(\"/home/apolzek/.ssh/id_ed25519\"),</span>\t\t\t<span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">Password</span><span class=\"p\">(</span><span class=\"s\">\"&lt;your-password&gt;\"</span><span class=\"p\">),</span>\t\t<span class=\"p\">},</span>\t\t<span class=\"n\">HostKeyCallback</span><span class=\"o\">:</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">InsecureIgnoreHostKey</span><span class=\"p\">(),</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// Connect to SSH remote server using serverEndpoint</span>\t<span class=\"n\">serverConn</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">Dial</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">serverEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span> <span class=\"n\">sshConfig</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Dial INTO remote server error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// Listen on remote server port</span>\t<span class=\"n\">listener</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">serverConn</span><span class=\"o\">.</span><span class=\"n\">Listen</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">remoteEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">())</span>\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Listen open port ON remote server error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t<span class=\"p\">}</span>\t<span class=\"k\">defer</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\t<span class=\"c\">// handle incoming connections on reverse forwarded tunnel</span>\t<span class=\"k\">for</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// Open a (local) connection to localEndpoint whose content will be forwarded so serverEndpoint</span>\t\t<span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Dial</span><span class=\"p\">(</span><span class=\"s\">\"tcp\"</span><span class=\"p\">,</span> <span class=\"n\">localEndpoint</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">())</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Dial INTO local service error: %s\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">Accept</span><span class=\"p\">()</span>\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">handleClient</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">local</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/11/24/reverse-ssh-tunneling.html",
            
            
            
            "tags": ["go","golang"],
            
            "date_published": "2024-11-24T00:00:00+00:00",
            "date_modified": "2024-11-24T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/10/25/iam.html",
            "title": "aws/iam",
            "summary": "IAM",
            "content_text": "IAMA IAM (Identity and Access Management) é um serviço fundamental da AWS (Amazon Web Services) que permite gerenciar de forma segura o acesso aos recursos da AWS. Com a IAM, você pode criar e gerenciar usuários, grupos e funções, além de definir permissões detalhadas para controlar quem tem acesso a quais recursos e ações dentro da sua conta da AWS. Aqui estão alguns conceitos importantes e exemplos práticos de uso da IAM:UsuáriosUm usuário é uma identidade que você cria para alguém ou algo (como uma aplicação) que precisa acessar sua conta da AWS. Cada usuário possui um nome de usuário exclusivo e credenciais de login. Aqui está um exemplo de criação de um usuário na IAM:aws iam create-user --user-name myuserGruposUm grupo é um conjunto de permissões que você pode aplicar a vários usuários. Você atribui políticas (conjuntos de permissões) aos grupos, e os usuários que pertencem ao grupo herdam essas permissões. Aqui está um exemplo de criação de um grupo na IAM e associação de um usuário a ele:aws iam create-group --group-name mygroupaws iam add-user-to-group --group-name mygroup --user-name myuserPolíticasAs políticas definem as permissões de acesso em formato JSON. Elas especificam o que um usuário, grupo ou função pode fazer com recursos específicos. Aqui está um exemplo de criação de uma política que permite a leitura de um bucket S3:{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Effect\": \"Allow\",            \"Action\": \"s3:GetObject\",            \"Resource\": \"arn:aws:s3:::my-bucket/*\"        }    ]}FunçõesAs funções permitem conceder permissões temporárias a serviços da AWS ou entidades confiáveis. Isso é útil para permitir que serviços acessem outros recursos em seu nome, sem a necessidade de compartilhar credenciais de acesso direto. Aqui está um exemplo de criação de uma função que permite que uma instância EC2 acesse um bucket S3:aws iam create-role --role-name myrole --assume-role-policy-document file://trust-policy.jsonAssume Role Policy DocumentO documento de política de confiança é um JSON que define quais entidades ou serviços podem assumir uma função. Aqui está um exemplo simplificado:{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Effect\": \"Allow\",            \"Principal\": {                \"Service\": \"ec2.amazonaws.com\"            },            \"Action\": \"sts:AssumeRole\"        }    ]}",
            "content_html": "<h2 id=\"iam\">IAM</h2><p>A IAM (Identity and Access Management) é um serviço fundamental da AWS (Amazon Web Services) que permite gerenciar de forma segura o acesso aos recursos da AWS. Com a IAM, você pode criar e gerenciar usuários, grupos e funções, além de definir permissões detalhadas para controlar quem tem acesso a quais recursos e ações dentro da sua conta da AWS. Aqui estão alguns conceitos importantes e exemplos práticos de uso da IAM:</p><h4 id=\"usuários\">Usuários</h4><p>Um usuário é uma identidade que você cria para alguém ou algo (como uma aplicação) que precisa acessar sua conta da AWS. Cada usuário possui um nome de usuário exclusivo e credenciais de login. Aqui está um exemplo de criação de um usuário na IAM:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>aws iam create-user --user-name myuser</code></pre></div></div><h4 id=\"grupos\">Grupos</h4><p>Um grupo é um conjunto de permissões que você pode aplicar a vários usuários. Você atribui políticas (conjuntos de permissões) aos grupos, e os usuários que pertencem ao grupo herdam essas permissões. Aqui está um exemplo de criação de um grupo na IAM e associação de um usuário a ele:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>aws iam create-group --group-name mygroupaws iam add-user-to-group --group-name mygroup --user-name myuser</code></pre></div></div><h4 id=\"políticas\">Políticas</h4><p>As políticas definem as permissões de acesso em formato JSON. Elas especificam o que um usuário, grupo ou função pode fazer com recursos específicos. Aqui está um exemplo de criação de uma política que permite a leitura de um bucket S3:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Effect\": \"Allow\",            \"Action\": \"s3:GetObject\",            \"Resource\": \"arn:aws:s3:::my-bucket/*\"        }    ]}</code></pre></div></div><h4 id=\"funções\">Funções</h4><p>As funções permitem conceder permissões temporárias a serviços da AWS ou entidades confiáveis. Isso é útil para permitir que serviços acessem outros recursos em seu nome, sem a necessidade de compartilhar credenciais de acesso direto. Aqui está um exemplo de criação de uma função que permite que uma instância EC2 acesse um bucket S3:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>aws iam create-role --role-name myrole --assume-role-policy-document file://trust-policy.json</code></pre></div></div><h4 id=\"assume-role-policy-document\">Assume Role Policy Document</h4><p>O documento de política de confiança é um JSON que define quais entidades ou serviços podem assumir uma função. Aqui está um exemplo simplificado:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Effect\": \"Allow\",            \"Principal\": {                \"Service\": \"ec2.amazonaws.com\"            },            \"Action\": \"sts:AssumeRole\"        }    ]}</code></pre></div></div>",
            "url": "/2024/10/25/iam.html",
            
            
            
            "tags": ["iam","aws","security"],
            
            "date_published": "2024-10-25T00:00:00+00:00",
            "date_modified": "2024-10-25T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/10/25/eks.html",
            "title": "cloud/aws/eks",
            "summary": "EKS",
            "content_text": "EKS",
            "content_html": "<h1 id=\"eks\">EKS</h1>",
            "url": "/2024/10/25/eks.html",
            
            
            
            "tags": ["eks","aws","kubernetes"],
            
            "date_published": "2024-10-25T00:00:00+00:00",
            "date_modified": "2024-10-25T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/09/02/terraform.html",
            "title": "cheatsheet/terraform",
            "summary": "Cheatsheet terraform",
            "content_text": "Cheatsheet terraformterraform initterraform validateterraform fmtterraform planterraform applyterraform destroyterraform workspace new devterraform workspace listterraform workspace select devterraform import aws_s3_bucket.example my-bucketterraform state listterraform output example_outputterraform graph | dot -Tpng &gt; graph.pngterraform taint aws_instance.exampleterraform untaint aws_instance.exampleterraform init: Este comando é usado para inicializar um novo diretório de configuração do Terraform. Ele baixa os provedores e módulos especificados no arquivo de configuração.terraform plan: Este comando cria um plano de execução que mostra o que o Terraform fará antes de efetivamente fazer qualquer alteração na infraestrutura. É uma boa prática executar isso antes de aplicar qualquer configuração.terraform apply: Este comando é usado para aplicar as alterações definidas em seu código do Terraform à infraestrutura. Ele criará, atualizará ou destruirá recursos conforme necessário.terraform destroy: Este comando é usado para destruir todos os recursos definidos em seu código do Terraform. Use com cuidado, pois isso pode resultar na perda de recursos.terraform validate: Este comando verifica a sintaxe do arquivo de configuração do Terraform e verifica se há erros.terraform fmt: Este comando formata seu código Terraform de acordo com as convenções de estilo do Terraform.terraform workspace: Este comando permite que você gerencie workspaces (espaços de trabalho) no Terraform, o que é útil para lidar com configurações diferentes em um único diretório.terraform import: Este comando é usado para importar um recurso existente em um provedor para o estado do Terraform. Isso é útil quando você deseja começar a gerenciar recursos que já existem.terraform state: Este comando permite manipular diretamente o estado do Terraform, que é útil em situações avançadas de gerenciamento de estado.terraform output: Este comando exibe os valores de saída definidos em seu arquivo de configuração do Terraform.terraform graph: Este comando gera uma representação visual do gráfico de recursos do Terraform, mostrando as dependências entre recursos.terraform taint: Este comando marca um recurso como “sujo” no estado, o que faz com que o Terraform o reconstrua na próxima vez que você executar o terraform apply.terraform untaint: Este comando remove a marcação de “sujeira” de um recurso no estado.",
            "content_html": "<h2 id=\"cheatsheet-terraform\">Cheatsheet terraform</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>terraform initterraform validateterraform fmtterraform planterraform applyterraform destroyterraform workspace new devterraform workspace listterraform workspace select devterraform import aws_s3_bucket.example my-bucketterraform state listterraform output example_outputterraform graph | dot -Tpng &gt; graph.pngterraform taint aws_instance.exampleterraform untaint aws_instance.example</code></pre></div></div><p><strong>terraform init</strong>: Este comando é usado para inicializar um novo diretório de configuração do Terraform. Ele baixa os provedores e módulos especificados no arquivo de configuração.</p><p><strong>terraform plan</strong>: Este comando cria um plano de execução que mostra o que o Terraform fará antes de efetivamente fazer qualquer alteração na infraestrutura. É uma boa prática executar isso antes de aplicar qualquer configuração.</p><p><strong>terraform apply</strong>: Este comando é usado para aplicar as alterações definidas em seu código do Terraform à infraestrutura. Ele criará, atualizará ou destruirá recursos conforme necessário.</p><p><strong>terraform destroy</strong>: Este comando é usado para destruir todos os recursos definidos em seu código do Terraform. Use com cuidado, pois isso pode resultar na perda de recursos.</p><p><strong>terraform validate</strong>: Este comando verifica a sintaxe do arquivo de configuração do Terraform e verifica se há erros.</p><p><strong>terraform fmt</strong>: Este comando formata seu código Terraform de acordo com as convenções de estilo do Terraform.</p><p><strong>terraform workspace</strong>: Este comando permite que você gerencie workspaces (espaços de trabalho) no Terraform, o que é útil para lidar com configurações diferentes em um único diretório.</p><p><strong>terraform import</strong>: Este comando é usado para importar um recurso existente em um provedor para o estado do Terraform. Isso é útil quando você deseja começar a gerenciar recursos que já existem.</p><p><strong>terraform state</strong>: Este comando permite manipular diretamente o estado do Terraform, que é útil em situações avançadas de gerenciamento de estado.</p><p><strong>terraform output</strong>: Este comando exibe os valores de saída definidos em seu arquivo de configuração do Terraform.</p><p><strong>terraform graph</strong>: Este comando gera uma representação visual do gráfico de recursos do Terraform, mostrando as dependências entre recursos.</p><p><strong>terraform taint</strong>: Este comando marca um recurso como “sujo” no estado, o que faz com que o Terraform o reconstrua na próxima vez que você executar o terraform apply.</p><p><strong>terraform untaint</strong>: Este comando remove a marcação de “sujeira” de um recurso no estado.</p>",
            "url": "/2024/09/02/terraform.html",
            
            
            
            
            
            "date_published": "2024-09-02T00:00:00+00:00",
            "date_modified": "2024-09-02T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/08/01/self-assessment.html",
            "title": "opinions/self-assessment",
            "summary": "self-assessment",
            "content_text": "",
            "content_html": "",
            "url": "/2024/08/01/self-assessment.html",
            
            
            
            
            
            "date_published": "2024-08-01T00:00:00+00:00",
            "date_modified": "2024-08-01T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/01/28/closures.html",
            "title": "development/golang/closures",
            "summary": "Closures",
            "content_text": "ClosuresClosures são úteis em diversos cenários, especialmente em situações em que é necessário encapsular comportamentos específicos, criar funções de alta ordem (funções que aceitam outras funções como argumentos ou retornam funções) e lidar com estados. Aqui estão alguns cenários e exemplos de aplicações do mundo real onde closures podem ser particularmente úteis:Callback Functions:Closures são frequentemente usadas como callbacks em eventos assíncronos, como manipulação de eventos de interface gráfica (GUI) ou operações de I/O.package mainimport (    \"fmt\"    \"time\")func main() {    // Exemplo de callback com closure    performAsyncOperation(func() {        fmt.Println(\"Operação assíncrona concluída!\")    })    // Espera para visualizar o resultado    time.Sleep(2 * time.Second)}func performAsyncOperation(callback func()) {    go func() {        // Simula uma operação assíncrona        time.Sleep(1 * time.Second)        // Chama o callback        callback()    }()}Iteração Funcional:Closures são úteis em iterações funcionais sobre coleções de dados, onde a lógica pode ser passada como argumento.package mainimport \"fmt\"func main() {    numbers := []int{1, 2, 3, 4, 5}    // Exemplo de iteração funcional com closure    processNumbers(numbers, func(n int) {        fmt.Println(n * 2)    })}func processNumbers(numbers []int, callback func(int)) {    for _, num := range numbers {        callback(num)    }}Encapsulamento de Estado:Closures podem encapsular e manter o estado, permitindo a criação de construtores de funções.package mainimport \"fmt\"func main() {    counter := newCounter()    fmt.Println(counter()) // Saída: 1    fmt.Println(counter()) // Saída: 2}func newCounter() func() int {    count := 0    return func() int {        count++        return count    }}Memoização:Closures podem ser usadas para implementar técnicas de memoização, armazenando resultados de chamadas de função para entradas específicas.package mainimport \"fmt\"func main() {    fibonacci := memoize(func(n int) int {        if n &lt;= 1 {            return n        }        return fibonacci(n-1) + fibonacci(n-2)    })    fmt.Println(fibonacci(5)) // Saída: 5    fmt.Println(fibonacci(10)) // Saída: 55}func memoize(fn func(int) int) func(int) int {    cache := make(map[int]int)    return func(n int) int {        if result, found := cache[n]; found {            return result        }        result := fn(n)        cache[n] = result        return result    }}",
            "content_html": "<h2 id=\"closures\">Closures</h2><p>Closures são úteis em diversos cenários, especialmente em situações em que é necessário encapsular comportamentos específicos, criar funções de alta ordem (funções que aceitam outras funções como argumentos ou retornam funções) e lidar com estados. Aqui estão alguns cenários e exemplos de aplicações do mundo real onde closures podem ser particularmente úteis:</p><p>Callback Functions:</p><p>Closures são frequentemente usadas como callbacks em eventos assíncronos, como manipulação de eventos de interface gráfica (GUI) ou operações de I/O.</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>    <span class=\"s\">\"fmt\"</span>    <span class=\"s\">\"time\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c\">// Exemplo de callback com closure</span>    <span class=\"n\">performAsyncOperation</span><span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Operação assíncrona concluída!\"</span><span class=\"p\">)</span>    <span class=\"p\">})</span>    <span class=\"c\">// Espera para visualizar o resultado</span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"m\">2</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">performAsyncOperation</span><span class=\"p\">(</span><span class=\"n\">callback</span> <span class=\"k\">func</span><span class=\"p\">())</span> <span class=\"p\">{</span>    <span class=\"k\">go</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"c\">// Simula uma operação assíncrona</span>        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"m\">1</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span>        <span class=\"c\">// Chama o callback</span>        <span class=\"n\">callback</span><span class=\"p\">()</span>    <span class=\"p\">}()</span><span class=\"p\">}</span></code></pre></div></div><p>Iteração Funcional:</p><p>Closures são úteis em iterações funcionais sobre coleções de dados, onde a lógica pode ser passada como argumento.</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">numbers</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">}</span>    <span class=\"c\">// Exemplo de iteração funcional com closure</span>    <span class=\"n\">processNumbers</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">,</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"m\">2</span><span class=\"p\">)</span>    <span class=\"p\">})</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">processNumbers</span><span class=\"p\">(</span><span class=\"n\">numbers</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">callback</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">))</span> <span class=\"p\">{</span>    <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">numbers</span> <span class=\"p\">{</span>        <span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Encapsulamento de Estado:</p><p>Closures podem encapsular e manter o estado, permitindo a criação de construtores de funções.</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">counter</span> <span class=\"o\">:=</span> <span class=\"n\">newCounter</span><span class=\"p\">()</span>    <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">())</span> <span class=\"c\">// Saída: 1</span>    <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">())</span> <span class=\"c\">// Saída: 2</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">newCounter</span><span class=\"p\">()</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>    <span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"m\">0</span>    <span class=\"k\">return</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>        <span class=\"n\">count</span><span class=\"o\">++</span>        <span class=\"k\">return</span> <span class=\"n\">count</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Memoização:</p><p>Closures podem ser usadas para implementar técnicas de memoização, armazenando resultados de chamadas de função para entradas específicas.</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">fibonacci</span> <span class=\"o\">:=</span> <span class=\"n\">memoize</span><span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"m\">1</span> <span class=\"p\">{</span>            <span class=\"k\">return</span> <span class=\"n\">n</span>        <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"m\">2</span><span class=\"p\">)</span>    <span class=\"p\">})</span>    <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"m\">5</span><span class=\"p\">))</span> <span class=\"c\">// Saída: 5</span>    <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">))</span> <span class=\"c\">// Saída: 55</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">memoize</span><span class=\"p\">(</span><span class=\"n\">fn</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>    <span class=\"n\">cache</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"k\">map</span><span class=\"p\">[</span><span class=\"kt\">int</span><span class=\"p\">]</span><span class=\"kt\">int</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">found</span> <span class=\"o\">:=</span> <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">];</span> <span class=\"n\">found</span> <span class=\"p\">{</span>            <span class=\"k\">return</span> <span class=\"n\">result</span>        <span class=\"p\">}</span>        <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>        <span class=\"n\">cache</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span>        <span class=\"k\">return</span> <span class=\"n\">result</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "/2024/01/28/closures.html",
            
            
            
            "tags": ["go","closures"],
            
            "date_published": "2024-01-28T00:00:00+00:00",
            "date_modified": "2024-01-28T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/01/20/learning-english.html",
            "title": "english/learning-english",
            "summary": "Learning English",
            "content_text": "",
            "content_html": "",
            "url": "/2024/01/20/learning-english.html",
            
            
            
            
            
            "date_published": "2024-01-20T00:00:00+00:00",
            "date_modified": "2024-01-20T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/01/05/my-toolbox.html",
            "title": "tools/my-toolbox",
            "summary": "My toolbox",
            "content_text": "My toolboxMy environment            Tool      Description                  Docker      Platform for developing, shipping, and running applications in containers.              Git      Distributed version control system for tracking changes in source code during software development.              VS Code      Lightweight and powerful code editor developed by Microsoft with support for various programming languages.              tailspin      A log file highlighter              vim                     Slack                     Anki                     OpenLens                     Spotify                     HexChat                     DBeaver                     gitg                     Chrome                     Firefox                     Bruno                     asdf                     HTTPie                     Virtualbox                     visidata      https://www.visidata.org/install/              kubectl                     kubectx                     Insomnia                     Sublime Merge             Productive environment            Tool      Description                  Kubernetes      Open-source container orchestration platform for automating deployment, scaling, and management of containerized applications.              Apache Kafka      Distributed event streaming platform for building real-time data pipelines and streaming applications.              PostgreSQL      Powerful, open-source relational database system known for its reliability and robust feature set.              Terraform      Infrastructure as Code (IaC) tool for building, changing, and versioning infrastructure efficiently.              Ansible      Open-source automation tool for configuration management, application deployment, and task automation.              MongoDB      NoSQL database that provides high performance, scalability, and flexibility for handling unstructured data.              Jenkins      Open-source automation server for building, testing, and deploying software.              Nginx      Web server and reverse proxy server known for its high performance, scalability, and ease of configuration.      Extensions for Visual Studio Code",
            "content_html": "<h2 id=\"my-toolbox\">My toolbox</h2><h3 id=\"my-environment\">My environment</h3><table>  <thead>    <tr>      <th>Tool</th>      <th>Description</th>    </tr>  </thead>  <tbody>    <tr>      <td>Docker</td>      <td>Platform for developing, shipping, and running applications in containers.</td>    </tr>    <tr>      <td>Git</td>      <td>Distributed version control system for tracking changes in source code during software development.</td>    </tr>    <tr>      <td>VS Code</td>      <td>Lightweight and powerful code editor developed by Microsoft with support for various programming languages.</td>    </tr>    <tr>      <td>tailspin</td>      <td>A log file highlighter</td>    </tr>    <tr>      <td>vim</td>      <td> </td>    </tr>    <tr>      <td>Slack</td>      <td> </td>    </tr>    <tr>      <td>Anki</td>      <td> </td>    </tr>    <tr>      <td>OpenLens</td>      <td> </td>    </tr>    <tr>      <td>Spotify</td>      <td> </td>    </tr>    <tr>      <td>HexChat</td>      <td> </td>    </tr>    <tr>      <td>DBeaver</td>      <td> </td>    </tr>    <tr>      <td>gitg</td>      <td> </td>    </tr>    <tr>      <td>Chrome</td>      <td> </td>    </tr>    <tr>      <td>Firefox</td>      <td> </td>    </tr>    <tr>      <td>Bruno</td>      <td> </td>    </tr>    <tr>      <td>asdf</td>      <td> </td>    </tr>    <tr>      <td>HTTPie</td>      <td> </td>    </tr>    <tr>      <td>Virtualbox</td>      <td> </td>    </tr>    <tr>      <td>visidata</td>      <td>https://www.visidata.org/install/</td>    </tr>    <tr>      <td>kubectl</td>      <td> </td>    </tr>    <tr>      <td>kubectx</td>      <td> </td>    </tr>    <tr>      <td>Insomnia</td>      <td> </td>    </tr>    <tr>      <td>Sublime Merge</td>      <td> </td>    </tr>  </tbody></table><h3 id=\"productive-environment\">Productive environment</h3><table>  <thead>    <tr>      <th>Tool</th>      <th>Description</th>    </tr>  </thead>  <tbody>    <tr>      <td>Kubernetes</td>      <td>Open-source container orchestration platform for automating deployment, scaling, and management of containerized applications.</td>    </tr>    <tr>      <td>Apache Kafka</td>      <td>Distributed event streaming platform for building real-time data pipelines and streaming applications.</td>    </tr>    <tr>      <td>PostgreSQL</td>      <td>Powerful, open-source relational database system known for its reliability and robust feature set.</td>    </tr>    <tr>      <td>Terraform</td>      <td>Infrastructure as Code (IaC) tool for building, changing, and versioning infrastructure efficiently.</td>    </tr>    <tr>      <td>Ansible</td>      <td>Open-source automation tool for configuration management, application deployment, and task automation.</td>    </tr>    <tr>      <td>MongoDB</td>      <td>NoSQL database that provides high performance, scalability, and flexibility for handling unstructured data.</td>    </tr>    <tr>      <td>Jenkins</td>      <td>Open-source automation server for building, testing, and deploying software.</td>    </tr>    <tr>      <td>Nginx</td>      <td>Web server and reverse proxy server known for its high performance, scalability, and ease of configuration.</td>    </tr>  </tbody></table><h3 id=\"extensions-for-visual-studio-code\">Extensions for Visual Studio Code</h3>",
            "url": "/2024/01/05/my-toolbox.html",
            
            
            
            
            
            "date_published": "2024-01-05T00:00:00+00:00",
            "date_modified": "2024-01-05T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/01/05/linux-kernel-params.html",
            "title": "operating-system/linux-kernel-params",
            "summary": "Linux Kernel Params",
            "content_text": "Linux Kernel ParamsPara ajustar os parâmetros do kernel no Linux, você pode usar o comando sysctl para modificar configurações em tempo de execução. Para tornar as alterações permanentes, adicione as configurações ao arquivo de configuração /etc/sysctl.conf ou a um arquivo em /etc/sysctl.d/.Aqui estão os comandos para alterar cada um dos parâmetros mencionados, junto com uma breve descrição do que cada um faz:      fs.file-max: Limite o número máximo de descritores de arquivos para o sistema.    sysctl -w fs.file-max=6815744            kernel.sem: Configuração de IPC (Inter-Process Communication).    sysctl -w kernel.sem=\"250 32000 100 128\"            kernel.shmmni: Define o número máximo de identificadores de semáforos, memória compartilhada e segmentos de memória no sistema.    sysctl -w kernel.shmmni=4096            kernel.shmall: Define o número total de páginas de memória compartilhada disponíveis para o sistema.    sysctl -w kernel.shmall=1073741824            kernel.shmmax: Define o tamanho máximo do segmento de memória compartilhada que o sistema pode alocar.    sysctl -w kernel.shmmax=4398046511104            kernel.panic_on_oops: Se definido como 1, o sistema entra em pânico em vez de reiniciar após um “oops” do kernel.    sysctl -w kernel.panic_on_oops=1            net.core.rmem_default: Define o tamanho padrão do buffer de recebimento (em bytes) para soquetes de rede.    sysctl -w net.core.rmem_default=262144            net.core.rmem_max: Define o tamanho máximo do buffer de recebimento (em bytes) para soquetes de rede.    sysctl -w net.core.rmem_max=4194304            net.core.wmem_default: Define o tamanho padrão do buffer de envio (em bytes) para soquetes de rede.    sysctl -w net.core.wmem_default=262144            net.core.wmem_max: Define o tamanho máximo do buffer de envio (em bytes) para soquetes de rede.    sysctl -w net.core.wmem_max=1048576            net.ipv4.conf.all.rp_filter: Ativa ou desativa a filtragem de pacotes de resposta invertida.    sysctl -w net.ipv4.conf.all.rp_filter=2            net.ipv4.conf.default.rp_filter: Ativa ou desativa a filtragem de pacotes de resposta invertida para a interface padrão.    sysctl -w net.ipv4.conf.default.rp_filter=2            fs.aio-max-nr: Define o número máximo de solicitações assíncronas de I/O (AIO).    sysctl -w fs.aio-max-nr=1048576            net.ipv4.ip_local_port_range: Define o intervalo de portas locais disponíveis para conexões TCP e UDP.    sysctl -w net.ipv4.ip_local_port_range=\"9000 65500\"      Após alterar esses valores usando sysctl -w, você pode verificar se as configurações foram aplicadas usando sysctl -a. Para tornar as alterações permanentes, adicione as linhas correspondentes ao arquivo /etc/sysctl.conf ou a um arquivo em /etc/sysctl.d/ e execute sysctl -p para recarregar as configurações.",
            "content_html": "<h2 id=\"linux-kernel-params\">Linux Kernel Params</h2><p>Para ajustar os parâmetros do kernel no Linux, você pode usar o comando <code class=\"language-plaintext highlighter-rouge\">sysctl</code> para modificar configurações em tempo de execução. Para tornar as alterações permanentes, adicione as configurações ao arquivo de configuração <code class=\"language-plaintext highlighter-rouge\">/etc/sysctl.conf</code> ou a um arquivo em <code class=\"language-plaintext highlighter-rouge\">/etc/sysctl.d/</code>.</p><p>Aqui estão os comandos para alterar cada um dos parâmetros mencionados, junto com uma breve descrição do que cada um faz:</p><ol>  <li>    <p><strong>fs.file-max:</strong> Limite o número máximo de descritores de arquivos para o sistema.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> fs.file-max<span class=\"o\">=</span>6815744</code></pre></div>    </div>  </li>  <li>    <p><strong>kernel.sem:</strong> Configuração de IPC (Inter-Process Communication).</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> kernel.sem<span class=\"o\">=</span><span class=\"s2\">\"250 32000 100 128\"</span></code></pre></div>    </div>  </li>  <li>    <p><strong>kernel.shmmni:</strong> Define o número máximo de identificadores de semáforos, memória compartilhada e segmentos de memória no sistema.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> kernel.shmmni<span class=\"o\">=</span>4096</code></pre></div>    </div>  </li>  <li>    <p><strong>kernel.shmall:</strong> Define o número total de páginas de memória compartilhada disponíveis para o sistema.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> kernel.shmall<span class=\"o\">=</span>1073741824</code></pre></div>    </div>  </li>  <li>    <p><strong>kernel.shmmax:</strong> Define o tamanho máximo do segmento de memória compartilhada que o sistema pode alocar.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> kernel.shmmax<span class=\"o\">=</span>4398046511104</code></pre></div>    </div>  </li>  <li>    <p><strong>kernel.panic_on_oops:</strong> Se definido como 1, o sistema entra em pânico em vez de reiniciar após um “oops” do kernel.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> kernel.panic_on_oops<span class=\"o\">=</span>1</code></pre></div>    </div>  </li>  <li>    <p><strong>net.core.rmem_default:</strong> Define o tamanho padrão do buffer de recebimento (em bytes) para soquetes de rede.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> net.core.rmem_default<span class=\"o\">=</span>262144</code></pre></div>    </div>  </li>  <li>    <p><strong>net.core.rmem_max:</strong> Define o tamanho máximo do buffer de recebimento (em bytes) para soquetes de rede.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> net.core.rmem_max<span class=\"o\">=</span>4194304</code></pre></div>    </div>  </li>  <li>    <p><strong>net.core.wmem_default:</strong> Define o tamanho padrão do buffer de envio (em bytes) para soquetes de rede.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> net.core.wmem_default<span class=\"o\">=</span>262144</code></pre></div>    </div>  </li>  <li>    <p><strong>net.core.wmem_max:</strong> Define o tamanho máximo do buffer de envio (em bytes) para soquetes de rede.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> net.core.wmem_max<span class=\"o\">=</span>1048576</code></pre></div>    </div>  </li>  <li>    <p><strong>net.ipv4.conf.all.rp_filter:</strong> Ativa ou desativa a filtragem de pacotes de resposta invertida.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> net.ipv4.conf.all.rp_filter<span class=\"o\">=</span>2</code></pre></div>    </div>  </li>  <li>    <p><strong>net.ipv4.conf.default.rp_filter:</strong> Ativa ou desativa a filtragem de pacotes de resposta invertida para a interface padrão.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> net.ipv4.conf.default.rp_filter<span class=\"o\">=</span>2</code></pre></div>    </div>  </li>  <li>    <p><strong>fs.aio-max-nr:</strong> Define o número máximo de solicitações assíncronas de I/O (AIO).</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> fs.aio-max-nr<span class=\"o\">=</span>1048576</code></pre></div>    </div>  </li>  <li>    <p><strong>net.ipv4.ip_local_port_range:</strong> Define o intervalo de portas locais disponíveis para conexões TCP e UDP.</p>    <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sysctl <span class=\"nt\">-w</span> net.ipv4.ip_local_port_range<span class=\"o\">=</span><span class=\"s2\">\"9000 65500\"</span></code></pre></div>    </div>  </li></ol><p>Após alterar esses valores usando <code class=\"language-plaintext highlighter-rouge\">sysctl -w</code>, você pode verificar se as configurações foram aplicadas usando <code class=\"language-plaintext highlighter-rouge\">sysctl -a</code>. Para tornar as alterações permanentes, adicione as linhas correspondentes ao arquivo <code class=\"language-plaintext highlighter-rouge\">/etc/sysctl.conf</code> ou a um arquivo em <code class=\"language-plaintext highlighter-rouge\">/etc/sysctl.d/</code> e execute <code class=\"language-plaintext highlighter-rouge\">sysctl -p</code> para recarregar as configurações.</p>",
            "url": "/2024/01/05/linux-kernel-params.html",
            
            
            
            "tags": ["linux","params","sysctl"],
            
            "date_published": "2024-01-05T00:00:00+00:00",
            "date_modified": "2024-01-05T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2024/01/05/overview.html",
            "title": "development/golang/overview",
            "summary": "Overview",
            "content_text": "OverviewPacotes e MódulosPacote (Package):Um pacote em Go é o conceito básico de organização de código. Ele é uma coleção de arquivos Go relacionados que fornecem funcionalidades específicas.Os pacotes são a unidade básica de encapsulamento em Go, ajudando a organizar o código de maneira modular e reutilizável.Um pacote pode consistir em vários arquivos, mas todos esses arquivos devem pertencer ao mesmo diretório.Módulo (Module):Um módulo em Go é uma unidade de organização de código em nível mais alto, que lida com a dependência e versionamento do código.Módulos são usados para gerenciar dependências externas e versionar o código de uma maneira que facilita a colaboração e a construção de aplicações distribuídas.Um módulo é geralmente associado a um repositório Git e contém informações sobre as dependências, versões e outras configurações relacionadas ao gerenciamento de dependências.Declaração de variáveispackage mainimport \"fmt\"func main() {\tvar var1 string = \"apolzek\"\tfmt.Println(var1)\tvar2 := \"goku\"\tfmt.Println(var2)\tvar (\t\tvar3 string = \"var3\"\t\tvar4 string = \"var4\"\t)\tfmt.Println(var3, var4)\tvar5, var6 := \"var5\", \"var6\"\tfmt.Println(var5, var6)\tconst c string = \"immutable\"\tfmt.Println(c)\tvar5, var6 = var6, var5\tfmt.Println(var5, var6)}Tipos de dados (básicos)package mainimport (\t\"errors\"\t\"fmt\")func main() {\t// int8, int16, int32, int64\t// int == arch 32 or 64\tvar num int16 = 100\tfmt.Println(num)\t// uint = int sem sinal\tvar unum uint32 = 100\tfmt.Println(unum)\t// alias int32 = rune\tvar numRune rune = 1235\tfmt.Println(numRune)\t// alias byte = utin8\tvar numByte byte = 66\tfmt.Println(numByte)\tvar float1 float32 = 123.123\tvar float2 float64 = 123000.000001\tfmt.Println(float1, float2)\tvar str string = \"string xd\"\tfmt.Println(str)\tchar := 'A' // 65 =&gt; num da tabela ASCII\tfmt.Println(char)\tvar emptyText string\tfmt.Println(emptyText)\tvar emptyInt int\tfmt.Println(emptyInt)\tvar emptyFloat float32\tfmt.Println(emptyFloat)\tvar bool1 bool = true\tfmt.Println(bool1)\tvar bool2 bool\tfmt.Println(bool2)\tvar erro error\tfmt.Println(erro)\tvar newErro error = errors.New(\"Internal Server Error\")\tfmt.Println(newErro)}FunçõesOBS: Funções também são um tipo em Golangpackage mainimport \"fmt\"func sum(n1, n2 int8) int8 {\treturn n1 + n2}func calc(n1, n2 int16) (int16, int16) {\tsum := n1 + n2\tsub := n1 - n2\treturn sum, sub}func main() {\tfmt.Println(sum(20, 30))\tvar f = func(txt string) string { // assinatura da func\t\tfmt.Println(\"Print func:\", txt)\t\treturn \"sucess !\"\t}\tresult := f(\"func is a type\")\tfmt.Println(result)\tr1, r2 := calc(21, 33)\tfmt.Println(r1, \"\\n\", r2)\tr3, _ := calc(100, 200)\tfmt.Println(r3)}Operadorespackage mainimport (\t\"fmt\")func main() {\tfmt.Println(\"Aritmeticos:\")\tsum := 1 + 2\tsub := 1 - 2\tmult := 10 * 2\tdivision := 5 / 4\tmodulus := 7 % 3\tfmt.Println(sum, sub, mult, division, modulus)\tfmt.Println(\"\\nOperacoes de msm tipo:\")\tvar n1 int16 = 10\tvar n2 int32 = 20\t// Convertendo n1 para int32 antes de somar\tsumNum := int32(n1) + n2\tfmt.Println(sumNum)\t// Atribuição\tfmt.Println(\"\\nAtribuicao:\")\tvar v1 string = \"str1\"\tv2 := \"str2\"\tfmt.Println(v1, v2)\t// Relacionais\tfmt.Println(\"\\nRelacionais:\")\tif 10 &gt; 2 {\t\tfmt.Println(\"True\")\t}\tfmt.Println(2 &lt; 1)\t// &lt; &gt; != &lt;= &gt;= ==\t// Lógicos\tfmt.Println(\"\\nLogicos:\")\tfmt.Println(!true)\tfmt.Println(false || true)\tfmt.Println(false &amp;&amp; false)\tfmt.Println(\"\\nUnitários:\")\trandNum := 10\trandNum++\trandNum += 10\t//--randNum Errado\tfmt.Println(randNum)\tfmt.Println(\"\\nTernário(n tem):\")\tvar txt string\tif randNum &gt; 5 {\t\ttxt = \"Maior que 5\"\t} else {\t\ttxt = \"Menor que 5\"\t}\tfmt.Println(txt)}Structspackage mainimport \"fmt\"type user struct {\tname    string\tage     uint8\taddress address // Aninhamento de structs}type address struct {\tstreet string\tnumber int16}func main() {\tvar u1 user\tu1.age = 10\tu1.name = \"apolzek\"\tfmt.Println(u1)\tu2 := user{name: \"Vinicius\", age: 10}\tfmt.Println(u2)\taddress1 := address{\"Street1\", 10}\t// Deve-se add de acordo com a órdem declarada\tu3 := user{\"John\", 11, address1}\tfmt.Println(u3)\t// Se não quiser respeitar a órdem, deixar explicito\tu4 := user{age: 12}\tfmt.Println(u4)}“Herança” sqnpackage mainimport \"fmt\"type pessoa struct {\tnome      string\tsobrenome string\tidade     uint8\taltura    uint8}type estudante struct {\tpessoa\tcurso     string\tfaculdade string}func main() {\t// Pessoa 1\tp1 := pessoa{\"John\", \"Cena\", 20, 178}\tfmt.Println(p1)\te1 := estudante{p1, \"Eng\", \"UFV\"}\tfmt.Println(e1)\tfmt.Println(e1.nome)\t// Estudante 2\te2 := estudante{pessoa{\"Edson\", \"Arantes\", 20, 178}, \"Eng\", \"UFV\"}\tfmt.Println(e2)\tfmt.Println(e2.pessoa.sobrenome) // Corrigindo a linha 33}Ponteirospackage mainimport \"fmt\"func main() {\tvar var1 int = 10\tvar var2 int = var1\tvar2++\tfmt.Println(var1, var2)\t// Ponteiro\tvar var3 int = 100\tvar ponteiro *int\tfmt.Println(var3, ponteiro)\tponteiro = &amp;var3\tvar3 = 120\tfmt.Println(var3, ponteiro, *ponteiro)}package mainimport \"fmt\"func main() {\t// Declarando uma variável do tipo int\tvar num int = 42\t// Declarando um ponteiro para int e atribuindo o endereço da variável num\tvar ptr1 *int = &amp;num\t// Declarando um ponteiro para ponteiro para int e atribuindo o endereço do ponteiro ptr1\tvar ptr2 **int = &amp;ptr1\t// Imprimindo os valores\tfmt.Printf(\"Valor de num: %d\\n\", num)\tfmt.Printf(\"Valor apontado por ptr1: %d\\n\", *ptr1)\tfmt.Printf(\"Valor apontado por ptr2: %d\\n\", **ptr2)\t// Modificando o valor através do ponteiro ptr1\t*ptr1 = 84\tfmt.Printf(\"Novo valor de num: %d\\n\", num)\t// Modificando o valor através do ponteiro ptr2\t**ptr2 = 120\tfmt.Printf(\"Novo valor de num: %d\\n\", num)}Arrays e Slicespackage mainimport (\t\"fmt\"\t\"reflect\")func main() {\tvar array1 [5]int\tfmt.Println(array1)\tarray1[0] = 1\tarray1[4] = 10\tfmt.Println(array1)\tarray2 := [5]string{\"Joh\", \"Marry\", \"Stuarty\", \"Sirius\", \"Cyntia\"}\tarray2[0] = \"John\"\tfmt.Println(array2)\tarray3 := [...]int{1, 2, 3, 4, 5, 6, 7, 8}\tfmt.Println(array3)\t// Slice(fatia de um array)\tslice1 := []float32{10.2, 12.12, 13.32}\tfmt.Println(slice1)\tfmt.Println(\"Slice e Array são tipos diferentes\")\tfmt.Println(reflect.TypeOf(slice1))\tfmt.Println(reflect.TypeOf(array1))\tslice2 := []float32{10.0, 11.1, 12.2}\tfmt.Println(slice2)\tslice2 = append(slice2, 13.3)\tfmt.Println(slice2)\tslice3 := array2[2:4] // Primeiro INCLUSIVO, Segundo EXCLUSIVO\tfmt.Println(slice3)\tslice3[1] = \"Xuxa\"\tfmt.Println(slice3)}Arrays Internospackage mainimport \"fmt\"func main() {\tslice0 := []float32{1.0, 2.0, 3.0, 4.0, 5.0, 6.0}\tslice1 := make([]float32, 10.0, 15.0) // cria um array interno\tfmt.Println(slice1)\tfmt.Println(\"Tamanho e Capacidade\")\tfmt.Println(len(slice1))\tfmt.Println(cap(slice1))\tslice1 = append(slice1, slice0...)\tfmt.Println(slice1)\tfmt.Println(len(slice1))\tfmt.Println(cap(slice1))}Mapspackage mainimport \"fmt\"func main() {\t// chaves msm tipo e valores msm tipo\tuser := map[string]string{\"username\": \"apolzek\", \"password\": \"12345\"}\tfmt.Println(user)\tfmt.Println(user[\"username\"])\tbank := map[string]map[string]string{\t\t\"Itau\": {\t\t\t\"ag\":    \"0001\",\t\t\t\"conta\": \"123456789\",\t\t},\t\t\"PagBank\": {\t\t\t\"ag\":    \"0002\",\t\t\t\"conta\": \"123456789\",\t\t},\t}\tfmt.Println(bank[\"PagBank\"])\tfmt.Println(bank[\"PagBank\"][\"ag\"])\t// Remover\tdelete(bank, \"Itau\")\tfmt.Println(bank)\t// Adicionar\tbank[\"Caixa\"] = map[string]string{\t\t\"ag\":    \"0003\",\t\t\"conta\": \"987654321\",\t}\tfmt.Println(bank)}Estruturas de Controlepackage mainimport \"fmt\"func main() {\tnum := 100\tif num &gt; 101 {\t\tfmt.Println(\"&gt; 100\")\t} else {\t\tfmt.Println(\"&lt; 100\")\t}\tif num == 100 {\t\tfmt.Println(\"one hundred\")\t}\t// temp Só pode ser acessado ao escopo do if\tif temp := num; temp &lt; 200 {\t\tfmt.Println(\"is ok\")\t}\t// temp Só pode ser acessado ao escopo do if\tif temp := num; temp &gt; 200 {\t\tfmt.Println(\"&gt; 200\")\t} else if num &lt; 200 {\t\tfmt.Println(\"&lt; 200\")\t} else {\t\tfmt.Println(\"idk..\")\t}}Switchpackage mainimport \"fmt\"func dayOfTheWeek(num int) string {\tswitch num {\tcase 1:\t\treturn \"Sunday\"\tcase 2:\t\treturn \"Monday\"\tcase 3:\t\treturn \"Tuesday\"\tcase 4:\t\treturn \"Wednesday\"\tcase 5:\t\treturn \"Thursday\"\tcase 6:\t\treturn \"Thursday\"\tcase 7:\t\treturn \"Thursday\"\tdefault:\t\treturn \"Invalid\"\t}\t//return \"Invalid\"}func dayOfTheWeek2(num int) string {\tswitch {\tcase num == 1:\t\treturn \"Sunday\"\tcase num == 2:\t\treturn \"Monday\"\tcase num == 3:\t\treturn \"Tuesday\"\tcase num == 4:\t\treturn \"Wednesday\"\tcase num == 5:\t\treturn \"Thursday\"\tcase num == 6:\t\treturn \"Thursday\"\tcase num == 7:\t\treturn \"Thursday\"\tdefault:\t\treturn \"Invalid\"\t}\t//return \"Invalid\"}func dayOfTheWeek3(num int) string {\tvar day string\tswitch {\tcase num == 1:\t\tday = \"Sunday\"\t\tfallthrough\tcase num == 2:\t\tday = \"Monday\" // Entra aqui\tcase num == 3:\t\tday = \"Tuesday\"\tcase num == 4:\t\tday = \"Wednesday\"\tcase num == 5:\t\tday = \"Thursday\"\tcase num == 6:\t\tday = \"Thursday\"\tcase num == 7:\t\tday = \"Thursday\"\tdefault:\t\tday = \"Invalid\"\t}\treturn day}func main() {\tday := dayOfTheWeek(2)\tfmt.Println(day)\tday2 := dayOfTheWeek(7)\tfmt.Println(day2)\tday3 := dayOfTheWeek(8)\tfmt.Println(day3)\tday4 := dayOfTheWeek2(2)\tfmt.Println(day4)\tday5 := dayOfTheWeek2(7)\tfmt.Println(day5)\tday6 := dayOfTheWeek2(1)\tfmt.Println(day6)\tfmt.Println(\"\\nfallthrough\")\tday7 := dayOfTheWeek3(1)\tfmt.Println(day7)}Estruturas de repetição (loop)package mainimport (\t\"fmt\"\t\"time\")func main() {\ti := 0\tfor i &lt; 10 {\t\t//time.Sleep(time.Second)\t\tfmt.Println(\"Incrementando i\")\t\ti++\t}\tfor j := 0; j &lt; 10; j += 2 {\t\tfmt.Println(\"Incrementando j em 2\")\t}\t//fmt.Println(j) Não funciona, j só existe no escopo do for\tnames := [3]string{\"joao\", \"maria\", \"jesus\"}\tfor index, value := range names {\t\tfmt.Printf(\"%d: %s\\n\", index, value) // Most\t}\tfor _, name := range names {\t\tfmt.Println(name)\t}\tfor index, letter := range \"WORD\" {\t\tfmt.Println(index, letter) // ASCII number\t}\tfor index, letter := range \"WORD\" {\t\tfmt.Println(index, string(letter)) // letras\t}\tuser := map[string]string{\"username\": \"apolzek\", \"password\": \"12345\"}\tfor key, value := range user {\t\tfmt.Println(key, value)\t}\t// Não pode usar range em structs\tfor {\t\tfmt.Println(\"Infinito\")\t\ttime.Sleep(time.Second)\t}}Funções com Retorno Nomeadopackage mainimport \"fmt\"func calc(n1, n2 int) (sum int, sub int) {\tsum = n1 + n2 // Não precisa usar :=\tsub = n1 - n2\treturn}func calc2(n1, n2 int) (int, int) {\tsum := n1 + n2\tsub := n1 - n2\treturn sum, sub}func main() {\tfmt.Println(calc(2, 4))\tfmt.Println(calc(10, 5))}Funções Variáticaspackage mainimport (\t\"fmt\"\t\"reflect\")func sumN(num ...int) int {\tfmt.Println(num)\tfmt.Println(reflect.TypeOf(num))\ttotal := 0\tfor _, n := range num {\t\ttotal += n\t}\treturn total}// OBS: Só pode haver um parâmetro variático(por func) e deve ser o últimofunc writeMsgNumbers(text string, num ...int) {\tfor _, n := range num {\t\tfmt.Println(text, n)\t}}func main() {\tsumN(1, 2, 3, 4, 5) //\tfmt.Println(sumN(12, 22, 33))\twriteMsgNumbers(\"drawn number:\", 1, 4, 6, 7, 2, 1)}Funções Anônimaspackage mainimport \"fmt\"func main() {\tfunc(text string) {\t\tfmt.Println(\"hi\", text, \"!\")\t}(\"apolzek\") // Executa\t// Passando parâmetro e retornando string\treturnFun := func(text string) string {\t\treturn \"name is: \" + text\t}(\"apolzek\") // Executa\tfmt.Println(returnFun)}Funções Recursivaspackage mainimport \"fmt\"func fibonacci(pos uint) uint {\tif pos &lt;= 1 {\t\treturn pos\t}\treturn fibonacci(pos-2) + fibonacci(pos-1)}func main() {\t// 1 1 2 3 5 8 13\tpos := uint(13)\tfor i := uint(1); i &lt;= pos; i++ {\t\tfmt.Println(fibonacci(i))\t}}Deferpackage mainimport \"fmt\"func func1() {\tfmt.Println(\"executing function 1\")}func func2() {\tfmt.Println(\"executing function 2\")}func main() {\t// defer == adiar, postergar\t// Pode ser usado para executar algo antes do defer\tdefer func1() // Joga execução por último\tfmt.Println(\"print\")\tfunc2()}Panic e Recoverpackage mainimport \"fmt\"func recoverExec() {\tif r := recover(); r != nil { // recupera\t\tfmt.Println(\"trying to recover\")\t}}func alunoStatus(n1, n2 float64) bool {\tdefer recoverExec()\tmedia := (n1 + n2) / 2\tif media &gt; 6.0 {\t\treturn true\t} else if media &lt; 6 {\t\treturn false\t}\tpanic(\"media == 6 :/\") // Mata execução se não tiver um recover}func main() {\t// Panic != Error\tfmt.Println(alunoStatus(6, 7))\tfmt.Println(alunoStatus(6, 6))\tfmt.Println(\"end !\")}Função Closurepackage mainimport \"fmt\"func closure() func() {\ttext := \"Closure func internal\"\tnewFunc := func() {\t\tfmt.Println(text)\t}\treturn newFunc}func main() {\ttext := \"Main func internal\"\tfmt.Println(text)\tnewFuncMain := closure()\tnewFuncMain()}  Embora o Go não use o termo “closure” diretamente, a capacidade de criar funções anônimas que capturam variáveis locais proporciona um comportamento similar ao de closures em outras linguagens de programação.Funções com Ponteirospackage mainimport \"fmt\"func inverteSinal(num int) int {\treturn num * -1}func inverteSinalPonteiro(num *int) {\t*num = *num * -1}func main() {\tnum := 20\tnumInv := inverteSinal(num)\tfmt.Println(numInv)\tfmt.Println(num)\tnum2 := 40\tinverteSinalPonteiro(&amp;num2) // Passagem por referência\tfmt.Println(num2)}Função Initpackage mainimport \"fmt\"var x int// OBS: pode-se ter uma função init por arquivofunc init() {\tfmt.Println(\"exec init()\")\tx = 10}func main() {\tfmt.Println(\"exec main()\")\tfmt.Println(x)}Métodospackage mainimport \"fmt\"type user struct {\tname string\tage  uint8}// Métodofunc (u user) save() {\tfmt.Println(\"saving user\", u.name)}func (u *user) defaultName() {\tu.name = \"Smith\"}func main() {\tuser1 := user{\"apolzek\", 28}\tfmt.Println(user1)\tuser1.save()\tuser2 := user{\"erik\", 20}\tfmt.Println(\"\\n\", user2)\tuser2.save()\tuser2.defaultName()\tfmt.Println(user2)}Interfacespackage mainimport (\t\"fmt\"\t\"math\")type forma interface {\tarea() float64}type retangulo struct {\taltura  float64\tlargura float64}type circulo struct {\traio float64}func escreverArea(f forma) {\tfmt.Println(\"Area da forma eh:\", f.area())}func (r retangulo) area() float64 {\treturn r.altura * r.largura}func (c circulo) area() float64 {\treturn math.Pi * math.Pow(c.raio, 2)}func main() {\tr := retangulo{10, 15}\tescreverArea(r)\tc := circulo{10}\tescreverArea(c)}Interfaces como Tipo Genéricopackage mainimport \"fmt\"func generic(interf interface{}) { // Aceita tudo\tfmt.Println(interf)}func main() {\tgeneric(\"string\")\tgeneric(10)\tgeneric(true)\tfmt.Println(1, 2, \"string\", false, true, float32(32), int(213))\t// bagunça\tmapa := map[interface{}]interface{}{\t\t1:      \"test\",\t\t\"test\": 1.1,\t\ttrue:   1,\t\tfalse:  0,\t}\tfmt.Println(mapa)}  Danger",
            "content_html": "<h2 id=\"overview\">Overview</h2><h3 id=\"pacotes-e-módulos\">Pacotes e Módulos</h3><p><strong>Pacote (Package)</strong>:</p><p>Um pacote em Go é o conceito básico de organização de código. Ele é uma coleção de arquivos Go relacionados que fornecem funcionalidades específicas.Os pacotes são a unidade básica de encapsulamento em Go, ajudando a organizar o código de maneira modular e reutilizável.Um pacote pode consistir em vários arquivos, mas todos esses arquivos devem pertencer ao mesmo diretório.</p><p><strong>Módulo (Module)</strong>:</p><p>Um módulo em Go é uma unidade de organização de código em nível mais alto, que lida com a dependência e versionamento do código.Módulos são usados para gerenciar dependências externas e versionar o código de uma maneira que facilita a colaboração e a construção de aplicações distribuídas.Um módulo é geralmente associado a um repositório Git e contém informações sobre as dependências, versões e outras configurações relacionadas ao gerenciamento de dependências.</p><h3 id=\"declaração-de-variáveis\">Declaração de variáveis</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">var1</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s\">\"apolzek\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">)</span>\t<span class=\"n\">var2</span> <span class=\"o\">:=</span> <span class=\"s\">\"goku\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"p\">(</span>\t\t<span class=\"n\">var3</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s\">\"var3\"</span>\t\t<span class=\"n\">var4</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s\">\"var4\"</span>\t<span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">var3</span><span class=\"p\">,</span> <span class=\"n\">var4</span><span class=\"p\">)</span>\t<span class=\"n\">var5</span><span class=\"p\">,</span> <span class=\"n\">var6</span> <span class=\"o\">:=</span> <span class=\"s\">\"var5\"</span><span class=\"p\">,</span> <span class=\"s\">\"var6\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">var5</span><span class=\"p\">,</span> <span class=\"n\">var6</span><span class=\"p\">)</span>\t<span class=\"k\">const</span> <span class=\"n\">c</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s\">\"immutable\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\t<span class=\"n\">var5</span><span class=\"p\">,</span> <span class=\"n\">var6</span> <span class=\"o\">=</span> <span class=\"n\">var6</span><span class=\"p\">,</span> <span class=\"n\">var5</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">var5</span><span class=\"p\">,</span> <span class=\"n\">var6</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"tipos-de-dados-básicos\">Tipos de dados (básicos)</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"errors\"</span>\t<span class=\"s\">\"fmt\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// int8, int16, int32, int64</span>\t<span class=\"c\">// int == arch 32 or 64</span>\t<span class=\"k\">var</span> <span class=\"n\">num</span> <span class=\"kt\">int16</span> <span class=\"o\">=</span> <span class=\"m\">100</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\t<span class=\"c\">// uint = int sem sinal</span>\t<span class=\"k\">var</span> <span class=\"n\">unum</span> <span class=\"kt\">uint32</span> <span class=\"o\">=</span> <span class=\"m\">100</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">unum</span><span class=\"p\">)</span>\t<span class=\"c\">// alias int32 = rune</span>\t<span class=\"k\">var</span> <span class=\"n\">numRune</span> <span class=\"kt\">rune</span> <span class=\"o\">=</span> <span class=\"m\">1235</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">numRune</span><span class=\"p\">)</span>\t<span class=\"c\">// alias byte = utin8</span>\t<span class=\"k\">var</span> <span class=\"n\">numByte</span> <span class=\"kt\">byte</span> <span class=\"o\">=</span> <span class=\"m\">66</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">numByte</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">float1</span> <span class=\"kt\">float32</span> <span class=\"o\">=</span> <span class=\"m\">123.123</span>\t<span class=\"k\">var</span> <span class=\"n\">float2</span> <span class=\"kt\">float64</span> <span class=\"o\">=</span> <span class=\"m\">123000.000001</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">float1</span><span class=\"p\">,</span> <span class=\"n\">float2</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">str</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s\">\"string xd\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span>\t<span class=\"n\">char</span> <span class=\"o\">:=</span> <span class=\"sc\">'A'</span> <span class=\"c\">// 65 =&gt; num da tabela ASCII</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">emptyText</span> <span class=\"kt\">string</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">emptyText</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">emptyInt</span> <span class=\"kt\">int</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">emptyInt</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">emptyFloat</span> <span class=\"kt\">float32</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">emptyFloat</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">bool1</span> <span class=\"kt\">bool</span> <span class=\"o\">=</span> <span class=\"no\">true</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">bool1</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">bool2</span> <span class=\"kt\">bool</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">bool2</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">erro</span> <span class=\"kt\">error</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">erro</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">newErro</span> <span class=\"kt\">error</span> <span class=\"o\">=</span> <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">New</span><span class=\"p\">(</span><span class=\"s\">\"Internal Server Error\"</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">newErro</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"funções\">Funções</h3><p><em>OBS</em>: Funções também são um <strong>tipo</strong> em Golang</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"kt\">int8</span><span class=\"p\">)</span> <span class=\"kt\">int8</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"kt\">int16</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">int16</span><span class=\"p\">,</span> <span class=\"kt\">int16</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\t<span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span> <span class=\"o\">-</span> <span class=\"n\">n2</span>\t<span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">sub</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"m\">20</span><span class=\"p\">,</span> <span class=\"m\">30</span><span class=\"p\">))</span>\t<span class=\"k\">var</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">txt</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span> <span class=\"c\">// assinatura da func</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Print func:\"</span><span class=\"p\">,</span> <span class=\"n\">txt</span><span class=\"p\">)</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"sucess !\"</span>\t<span class=\"p\">}</span>\t<span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s\">\"func is a type\"</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\t<span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"n\">r2</span> <span class=\"o\">:=</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">21</span><span class=\"p\">,</span> <span class=\"m\">33</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">r2</span><span class=\"p\">)</span>\t<span class=\"n\">r3</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">100</span><span class=\"p\">,</span> <span class=\"m\">200</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"operadores\">Operadores</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Aritmeticos:\"</span><span class=\"p\">)</span>\t<span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"m\">1</span> <span class=\"o\">+</span> <span class=\"m\">2</span>\t<span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"m\">1</span> <span class=\"o\">-</span> <span class=\"m\">2</span>\t<span class=\"n\">mult</span> <span class=\"o\">:=</span> <span class=\"m\">10</span> <span class=\"o\">*</span> <span class=\"m\">2</span>\t<span class=\"n\">division</span> <span class=\"o\">:=</span> <span class=\"m\">5</span> <span class=\"o\">/</span> <span class=\"m\">4</span>\t<span class=\"n\">modulus</span> <span class=\"o\">:=</span> <span class=\"m\">7</span> <span class=\"o\">%</span> <span class=\"m\">3</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">sub</span><span class=\"p\">,</span> <span class=\"n\">mult</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">modulus</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Operacoes de msm tipo:\"</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">n1</span> <span class=\"kt\">int16</span> <span class=\"o\">=</span> <span class=\"m\">10</span>\t<span class=\"k\">var</span> <span class=\"n\">n2</span> <span class=\"kt\">int32</span> <span class=\"o\">=</span> <span class=\"m\">20</span>\t<span class=\"c\">// Convertendo n1 para int32 antes de somar</span>\t<span class=\"n\">sumNum</span> <span class=\"o\">:=</span> <span class=\"kt\">int32</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">sumNum</span><span class=\"p\">)</span>\t<span class=\"c\">// Atribuição</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Atribuicao:\"</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">v1</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s\">\"str1\"</span>\t<span class=\"n\">v2</span> <span class=\"o\">:=</span> <span class=\"s\">\"str2\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">)</span>\t<span class=\"c\">// Relacionais</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Relacionais:\"</span><span class=\"p\">)</span>\t<span class=\"k\">if</span> <span class=\"m\">10</span> <span class=\"o\">&gt;</span> <span class=\"m\">2</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"True\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"m\">2</span> <span class=\"o\">&lt;</span> <span class=\"m\">1</span><span class=\"p\">)</span>\t<span class=\"c\">// &lt; &gt; != &lt;= &gt;= ==</span>\t<span class=\"c\">// Lógicos</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Logicos:\"</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"no\">true</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"no\">false</span> <span class=\"o\">||</span> <span class=\"no\">true</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"no\">false</span> <span class=\"o\">&amp;&amp;</span> <span class=\"no\">false</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Unitários:\"</span><span class=\"p\">)</span>\t<span class=\"n\">randNum</span> <span class=\"o\">:=</span> <span class=\"m\">10</span>\t<span class=\"n\">randNum</span><span class=\"o\">++</span>\t<span class=\"n\">randNum</span> <span class=\"o\">+=</span> <span class=\"m\">10</span>\t<span class=\"c\">//--randNum Errado</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">randNum</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Ternário(n tem):\"</span><span class=\"p\">)</span>\t<span class=\"k\">var</span> <span class=\"n\">txt</span> <span class=\"kt\">string</span>\t<span class=\"k\">if</span> <span class=\"n\">randNum</span> <span class=\"o\">&gt;</span> <span class=\"m\">5</span> <span class=\"p\">{</span>\t\t<span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"s\">\"Maior que 5\"</span>\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t<span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"s\">\"Menor que 5\"</span>\t<span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"structs\">Structs</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">type</span> <span class=\"n\">user</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">name</span>    <span class=\"kt\">string</span>\t<span class=\"n\">age</span>     <span class=\"kt\">uint8</span>\t<span class=\"n\">address</span> <span class=\"n\">address</span> <span class=\"c\">// Aninhamento de structs</span><span class=\"p\">}</span><span class=\"k\">type</span> <span class=\"n\">address</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">street</span> <span class=\"kt\">string</span>\t<span class=\"n\">number</span> <span class=\"kt\">int16</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">u1</span> <span class=\"n\">user</span>\t<span class=\"n\">u1</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"m\">10</span>\t<span class=\"n\">u1</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"apolzek\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">u1</span><span class=\"p\">)</span>\t<span class=\"n\">u2</span> <span class=\"o\">:=</span> <span class=\"n\">user</span><span class=\"p\">{</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"s\">\"Vinicius\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">:</span> <span class=\"m\">10</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">u2</span><span class=\"p\">)</span>\t<span class=\"n\">address1</span> <span class=\"o\">:=</span> <span class=\"n\">address</span><span class=\"p\">{</span><span class=\"s\">\"Street1\"</span><span class=\"p\">,</span> <span class=\"m\">10</span><span class=\"p\">}</span>\t<span class=\"c\">// Deve-se add de acordo com a órdem declarada</span>\t<span class=\"n\">u3</span> <span class=\"o\">:=</span> <span class=\"n\">user</span><span class=\"p\">{</span><span class=\"s\">\"John\"</span><span class=\"p\">,</span> <span class=\"m\">11</span><span class=\"p\">,</span> <span class=\"n\">address1</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">u3</span><span class=\"p\">)</span>\t<span class=\"c\">// Se não quiser respeitar a órdem, deixar explicito</span>\t<span class=\"n\">u4</span> <span class=\"o\">:=</span> <span class=\"n\">user</span><span class=\"p\">{</span><span class=\"n\">age</span><span class=\"o\">:</span> <span class=\"m\">12</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">u4</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"herança-sqn\">“Herança” sqn</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">type</span> <span class=\"n\">pessoa</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">nome</span>      <span class=\"kt\">string</span>\t<span class=\"n\">sobrenome</span> <span class=\"kt\">string</span>\t<span class=\"n\">idade</span>     <span class=\"kt\">uint8</span>\t<span class=\"n\">altura</span>    <span class=\"kt\">uint8</span><span class=\"p\">}</span><span class=\"k\">type</span> <span class=\"n\">estudante</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">pessoa</span>\t<span class=\"n\">curso</span>     <span class=\"kt\">string</span>\t<span class=\"n\">faculdade</span> <span class=\"kt\">string</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// Pessoa 1</span>\t<span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">pessoa</span><span class=\"p\">{</span><span class=\"s\">\"John\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cena\"</span><span class=\"p\">,</span> <span class=\"m\">20</span><span class=\"p\">,</span> <span class=\"m\">178</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">)</span>\t<span class=\"n\">e1</span> <span class=\"o\">:=</span> <span class=\"n\">estudante</span><span class=\"p\">{</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"s\">\"Eng\"</span><span class=\"p\">,</span> <span class=\"s\">\"UFV\"</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">e1</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">e1</span><span class=\"o\">.</span><span class=\"n\">nome</span><span class=\"p\">)</span>\t<span class=\"c\">// Estudante 2</span>\t<span class=\"n\">e2</span> <span class=\"o\">:=</span> <span class=\"n\">estudante</span><span class=\"p\">{</span><span class=\"n\">pessoa</span><span class=\"p\">{</span><span class=\"s\">\"Edson\"</span><span class=\"p\">,</span> <span class=\"s\">\"Arantes\"</span><span class=\"p\">,</span> <span class=\"m\">20</span><span class=\"p\">,</span> <span class=\"m\">178</span><span class=\"p\">},</span> <span class=\"s\">\"Eng\"</span><span class=\"p\">,</span> <span class=\"s\">\"UFV\"</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">e2</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">e2</span><span class=\"o\">.</span><span class=\"n\">pessoa</span><span class=\"o\">.</span><span class=\"n\">sobrenome</span><span class=\"p\">)</span> <span class=\"c\">// Corrigindo a linha 33</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"ponteiros\">Ponteiros</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">var1</span> <span class=\"kt\">int</span> <span class=\"o\">=</span> <span class=\"m\">10</span>\t<span class=\"k\">var</span> <span class=\"n\">var2</span> <span class=\"kt\">int</span> <span class=\"o\">=</span> <span class=\"n\">var1</span>\t<span class=\"n\">var2</span><span class=\"o\">++</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"n\">var2</span><span class=\"p\">)</span>\t<span class=\"c\">// Ponteiro</span>\t<span class=\"k\">var</span> <span class=\"n\">var3</span> <span class=\"kt\">int</span> <span class=\"o\">=</span> <span class=\"m\">100</span>\t<span class=\"k\">var</span> <span class=\"n\">ponteiro</span> <span class=\"o\">*</span><span class=\"kt\">int</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">var3</span><span class=\"p\">,</span> <span class=\"n\">ponteiro</span><span class=\"p\">)</span>\t<span class=\"n\">ponteiro</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">var3</span>\t<span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"m\">120</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">var3</span><span class=\"p\">,</span> <span class=\"n\">ponteiro</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ponteiro</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// Declarando uma variável do tipo int</span>\t<span class=\"k\">var</span> <span class=\"n\">num</span> <span class=\"kt\">int</span> <span class=\"o\">=</span> <span class=\"m\">42</span>\t<span class=\"c\">// Declarando um ponteiro para int e atribuindo o endereço da variável num</span>\t<span class=\"k\">var</span> <span class=\"n\">ptr1</span> <span class=\"o\">*</span><span class=\"kt\">int</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">num</span>\t<span class=\"c\">// Declarando um ponteiro para ponteiro para int e atribuindo o endereço do ponteiro ptr1</span>\t<span class=\"k\">var</span> <span class=\"n\">ptr2</span> <span class=\"o\">**</span><span class=\"kt\">int</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">ptr1</span>\t<span class=\"c\">// Imprimindo os valores</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Valor de num: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Valor apontado por ptr1: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ptr1</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Valor apontado por ptr2: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">ptr2</span><span class=\"p\">)</span>\t<span class=\"c\">// Modificando o valor através do ponteiro ptr1</span>\t<span class=\"o\">*</span><span class=\"n\">ptr1</span> <span class=\"o\">=</span> <span class=\"m\">84</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Novo valor de num: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">)</span>\t<span class=\"c\">// Modificando o valor através do ponteiro ptr2</span>\t<span class=\"o\">**</span><span class=\"n\">ptr2</span> <span class=\"o\">=</span> <span class=\"m\">120</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Novo valor de num: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"arrays-e-slices\">Arrays e Slices</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"reflect\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">array1</span> <span class=\"p\">[</span><span class=\"m\">5</span><span class=\"p\">]</span><span class=\"kt\">int</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">array1</span><span class=\"p\">)</span>\t<span class=\"n\">array1</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\t<span class=\"n\">array1</span><span class=\"p\">[</span><span class=\"m\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"m\">10</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">array1</span><span class=\"p\">)</span>\t<span class=\"n\">array2</span> <span class=\"o\">:=</span> <span class=\"p\">[</span><span class=\"m\">5</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span><span class=\"s\">\"Joh\"</span><span class=\"p\">,</span> <span class=\"s\">\"Marry\"</span><span class=\"p\">,</span> <span class=\"s\">\"Stuarty\"</span><span class=\"p\">,</span> <span class=\"s\">\"Sirius\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cyntia\"</span><span class=\"p\">}</span>\t<span class=\"n\">array2</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">\"John\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">array2</span><span class=\"p\">)</span>\t<span class=\"n\">array3</span> <span class=\"o\">:=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span><span class=\"kt\">int</span><span class=\"p\">{</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">,</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">7</span><span class=\"p\">,</span> <span class=\"m\">8</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">array3</span><span class=\"p\">)</span>\t<span class=\"c\">// Slice(fatia de um array)</span>\t<span class=\"n\">slice1</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">float32</span><span class=\"p\">{</span><span class=\"m\">10.2</span><span class=\"p\">,</span> <span class=\"m\">12.12</span><span class=\"p\">,</span> <span class=\"m\">13.32</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Slice e Array são tipos diferentes\"</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">reflect</span><span class=\"o\">.</span><span class=\"n\">TypeOf</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">))</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">reflect</span><span class=\"o\">.</span><span class=\"n\">TypeOf</span><span class=\"p\">(</span><span class=\"n\">array1</span><span class=\"p\">))</span>\t<span class=\"n\">slice2</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">float32</span><span class=\"p\">{</span><span class=\"m\">10.0</span><span class=\"p\">,</span> <span class=\"m\">11.1</span><span class=\"p\">,</span> <span class=\"m\">12.2</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">slice2</span><span class=\"p\">)</span>\t<span class=\"n\">slice2</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">slice2</span><span class=\"p\">,</span> <span class=\"m\">13.3</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">slice2</span><span class=\"p\">)</span>\t<span class=\"n\">slice3</span> <span class=\"o\">:=</span> <span class=\"n\">array2</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"o\">:</span><span class=\"m\">4</span><span class=\"p\">]</span> <span class=\"c\">// Primeiro INCLUSIVO, Segundo EXCLUSIVO</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">slice3</span><span class=\"p\">)</span>\t<span class=\"n\">slice3</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">\"Xuxa\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">slice3</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"arrays-internos\">Arrays Internos</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">slice0</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">float32</span><span class=\"p\">{</span><span class=\"m\">1.0</span><span class=\"p\">,</span> <span class=\"m\">2.0</span><span class=\"p\">,</span> <span class=\"m\">3.0</span><span class=\"p\">,</span> <span class=\"m\">4.0</span><span class=\"p\">,</span> <span class=\"m\">5.0</span><span class=\"p\">,</span> <span class=\"m\">6.0</span><span class=\"p\">}</span>\t<span class=\"n\">slice1</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">float32</span><span class=\"p\">,</span> <span class=\"m\">10.0</span><span class=\"p\">,</span> <span class=\"m\">15.0</span><span class=\"p\">)</span> <span class=\"c\">// cria um array interno</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Tamanho e Capacidade\"</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">))</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"nb\">cap</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">))</span>\t<span class=\"n\">slice1</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">,</span> <span class=\"n\">slice0</span><span class=\"o\">...</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">))</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"nb\">cap</span><span class=\"p\">(</span><span class=\"n\">slice1</span><span class=\"p\">))</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"maps\">Maps</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// chaves msm tipo e valores msm tipo</span>\t<span class=\"n\">user</span> <span class=\"o\">:=</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span><span class=\"s\">\"username\"</span><span class=\"o\">:</span> <span class=\"s\">\"apolzek\"</span><span class=\"p\">,</span> <span class=\"s\">\"password\"</span><span class=\"o\">:</span> <span class=\"s\">\"12345\"</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s\">\"username\"</span><span class=\"p\">])</span>\t<span class=\"n\">bank</span> <span class=\"o\">:=</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"k\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span>\t\t<span class=\"s\">\"Itau\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\t\t\t<span class=\"s\">\"ag\"</span><span class=\"o\">:</span>    <span class=\"s\">\"0001\"</span><span class=\"p\">,</span>\t\t\t<span class=\"s\">\"conta\"</span><span class=\"o\">:</span> <span class=\"s\">\"123456789\"</span><span class=\"p\">,</span>\t\t<span class=\"p\">},</span>\t\t<span class=\"s\">\"PagBank\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\t\t\t<span class=\"s\">\"ag\"</span><span class=\"o\">:</span>    <span class=\"s\">\"0002\"</span><span class=\"p\">,</span>\t\t\t<span class=\"s\">\"conta\"</span><span class=\"o\">:</span> <span class=\"s\">\"123456789\"</span><span class=\"p\">,</span>\t\t<span class=\"p\">},</span>\t<span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">bank</span><span class=\"p\">[</span><span class=\"s\">\"PagBank\"</span><span class=\"p\">])</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">bank</span><span class=\"p\">[</span><span class=\"s\">\"PagBank\"</span><span class=\"p\">][</span><span class=\"s\">\"ag\"</span><span class=\"p\">])</span>\t<span class=\"c\">// Remover</span>\t<span class=\"nb\">delete</span><span class=\"p\">(</span><span class=\"n\">bank</span><span class=\"p\">,</span> <span class=\"s\">\"Itau\"</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">bank</span><span class=\"p\">)</span>\t<span class=\"c\">// Adicionar</span>\t<span class=\"n\">bank</span><span class=\"p\">[</span><span class=\"s\">\"Caixa\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span>\t\t<span class=\"s\">\"ag\"</span><span class=\"o\">:</span>    <span class=\"s\">\"0003\"</span><span class=\"p\">,</span>\t\t<span class=\"s\">\"conta\"</span><span class=\"o\">:</span> <span class=\"s\">\"987654321\"</span><span class=\"p\">,</span>\t<span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">bank</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"estruturas-de-controle\">Estruturas de Controle</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"m\">100</span>\t<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"m\">101</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"&gt; 100\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"&lt; 100\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">100</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"one hundred\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// temp Só pode ser acessado ao escopo do if</span>\t<span class=\"k\">if</span> <span class=\"n\">temp</span> <span class=\"o\">:=</span> <span class=\"n\">num</span><span class=\"p\">;</span> <span class=\"n\">temp</span> <span class=\"o\">&lt;</span> <span class=\"m\">200</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"is ok\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// temp Só pode ser acessado ao escopo do if</span>\t<span class=\"k\">if</span> <span class=\"n\">temp</span> <span class=\"o\">:=</span> <span class=\"n\">num</span><span class=\"p\">;</span> <span class=\"n\">temp</span> <span class=\"o\">&gt;</span> <span class=\"m\">200</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"&gt; 200\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"m\">200</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"&lt; 200\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"idk..\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"switch\">Switch</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">dayOfTheWeek</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\t<span class=\"k\">switch</span> <span class=\"n\">num</span> <span class=\"p\">{</span>\t<span class=\"k\">case</span> <span class=\"m\">1</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Sunday\"</span>\t<span class=\"k\">case</span> <span class=\"m\">2</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Monday\"</span>\t<span class=\"k\">case</span> <span class=\"m\">3</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Tuesday\"</span>\t<span class=\"k\">case</span> <span class=\"m\">4</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Wednesday\"</span>\t<span class=\"k\">case</span> <span class=\"m\">5</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">case</span> <span class=\"m\">6</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">case</span> <span class=\"m\">7</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Invalid\"</span>\t<span class=\"p\">}</span>\t<span class=\"c\">//return \"Invalid\"</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">dayOfTheWeek2</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\t<span class=\"k\">switch</span> <span class=\"p\">{</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">1</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Sunday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">2</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Monday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">3</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Tuesday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">4</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Wednesday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">5</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">6</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">7</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"Invalid\"</span>\t<span class=\"p\">}</span>\t<span class=\"c\">//return \"Invalid\"</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">dayOfTheWeek3</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\t<span class=\"k\">var</span> <span class=\"n\">day</span> <span class=\"kt\">string</span>\t<span class=\"k\">switch</span> <span class=\"p\">{</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">1</span><span class=\"o\">:</span>\t\t<span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"s\">\"Sunday\"</span>\t\t<span class=\"k\">fallthrough</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">2</span><span class=\"o\">:</span>\t\t<span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"s\">\"Monday\"</span> <span class=\"c\">// Entra aqui</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">3</span><span class=\"o\">:</span>\t\t<span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"s\">\"Tuesday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">4</span><span class=\"o\">:</span>\t\t<span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"s\">\"Wednesday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">5</span><span class=\"o\">:</span>\t\t<span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">6</span><span class=\"o\">:</span>\t\t<span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">case</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"m\">7</span><span class=\"o\">:</span>\t\t<span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"s\">\"Thursday\"</span>\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t<span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"s\">\"Invalid\"</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">day</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">day</span> <span class=\"o\">:=</span> <span class=\"n\">dayOfTheWeek</span><span class=\"p\">(</span><span class=\"m\">2</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">day</span><span class=\"p\">)</span>\t<span class=\"n\">day2</span> <span class=\"o\">:=</span> <span class=\"n\">dayOfTheWeek</span><span class=\"p\">(</span><span class=\"m\">7</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">day2</span><span class=\"p\">)</span>\t<span class=\"n\">day3</span> <span class=\"o\">:=</span> <span class=\"n\">dayOfTheWeek</span><span class=\"p\">(</span><span class=\"m\">8</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">day3</span><span class=\"p\">)</span>\t<span class=\"n\">day4</span> <span class=\"o\">:=</span> <span class=\"n\">dayOfTheWeek2</span><span class=\"p\">(</span><span class=\"m\">2</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">day4</span><span class=\"p\">)</span>\t<span class=\"n\">day5</span> <span class=\"o\">:=</span> <span class=\"n\">dayOfTheWeek2</span><span class=\"p\">(</span><span class=\"m\">7</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">day5</span><span class=\"p\">)</span>\t<span class=\"n\">day6</span> <span class=\"o\">:=</span> <span class=\"n\">dayOfTheWeek2</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">day6</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">fallthrough\"</span><span class=\"p\">)</span>\t<span class=\"n\">day7</span> <span class=\"o\">:=</span> <span class=\"n\">dayOfTheWeek3</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">day7</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"estruturas-de-repetição-loop\">Estruturas de repetição (loop)</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"time\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"m\">10</span> <span class=\"p\">{</span>\t\t<span class=\"c\">//time.Sleep(time.Second)</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Incrementando i\"</span><span class=\"p\">)</span>\t\t<span class=\"n\">i</span><span class=\"o\">++</span>\t<span class=\"p\">}</span>\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"m\">10</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"m\">2</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Incrementando j em 2\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"c\">//fmt.Println(j) Não funciona, j só existe no escopo do for</span>\t<span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span><span class=\"s\">\"joao\"</span><span class=\"p\">,</span> <span class=\"s\">\"maria\"</span><span class=\"p\">,</span> <span class=\"s\">\"jesus\"</span><span class=\"p\">}</span>\t<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">names</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"%d: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"c\">// Most</span>\t<span class=\"p\">}</span>\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">names</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"s\">\"WORD\"</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">letter</span><span class=\"p\">)</span> <span class=\"c\">// ASCII number</span>\t<span class=\"p\">}</span>\t<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">letter</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"s\">\"WORD\"</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"p\">))</span> <span class=\"c\">// letras</span>\t<span class=\"p\">}</span>\t<span class=\"n\">user</span> <span class=\"o\">:=</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"kt\">string</span><span class=\"p\">{</span><span class=\"s\">\"username\"</span><span class=\"o\">:</span> <span class=\"s\">\"apolzek\"</span><span class=\"p\">,</span> <span class=\"s\">\"password\"</span><span class=\"o\">:</span> <span class=\"s\">\"12345\"</span><span class=\"p\">}</span>\t<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">user</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// Não pode usar range em structs</span>\t<span class=\"k\">for</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Infinito\"</span><span class=\"p\">)</span>\t\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"funções-com-retorno-nomeado\">Funções com Retorno Nomeado</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">sum</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">sub</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span> <span class=\"c\">// Não precisa usar :=</span>\t<span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">-</span> <span class=\"n\">n2</span>\t<span class=\"k\">return</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">calc2</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\t<span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">n1</span> <span class=\"o\">-</span> <span class=\"n\">n2</span>\t<span class=\"k\">return</span> <span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">sub</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">))</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">))</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"funções-variáticas\">Funções Variáticas</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"reflect\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">sumN</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">...</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">reflect</span><span class=\"o\">.</span><span class=\"n\">TypeOf</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">))</span>\t<span class=\"n\">total</span> <span class=\"o\">:=</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">num</span> <span class=\"p\">{</span>\t\t<span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">n</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">total</span><span class=\"p\">}</span><span class=\"c\">// OBS: Só pode haver um parâmetro variático(por func) e deve ser o último</span><span class=\"k\">func</span> <span class=\"n\">writeMsgNumbers</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">...</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">num</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">sumN</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">5</span><span class=\"p\">)</span> <span class=\"c\">//</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">sumN</span><span class=\"p\">(</span><span class=\"m\">12</span><span class=\"p\">,</span> <span class=\"m\">22</span><span class=\"p\">,</span> <span class=\"m\">33</span><span class=\"p\">))</span>\t<span class=\"n\">writeMsgNumbers</span><span class=\"p\">(</span><span class=\"s\">\"drawn number:\"</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">7</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"funções-anônimas\">Funções Anônimas</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"hi\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s\">\"!\"</span><span class=\"p\">)</span>\t<span class=\"p\">}(</span><span class=\"s\">\"apolzek\"</span><span class=\"p\">)</span> <span class=\"c\">// Executa</span>\t<span class=\"c\">// Passando parâmetro e retornando string</span>\t<span class=\"n\">returnFun</span> <span class=\"o\">:=</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\t\t<span class=\"k\">return</span> <span class=\"s\">\"name is: \"</span> <span class=\"o\">+</span> <span class=\"n\">text</span>\t<span class=\"p\">}(</span><span class=\"s\">\"apolzek\"</span><span class=\"p\">)</span> <span class=\"c\">// Executa</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">returnFun</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"funções-recursivas\">Funções Recursivas</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">pos</span> <span class=\"kt\">uint</span><span class=\"p\">)</span> <span class=\"kt\">uint</span> <span class=\"p\">{</span>\t<span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"o\">&lt;=</span> <span class=\"m\">1</span> <span class=\"p\">{</span>\t\t<span class=\"k\">return</span> <span class=\"n\">pos</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">-</span><span class=\"m\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// 1 1 2 3 5 8 13</span>\t<span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"kt\">uint</span><span class=\"p\">(</span><span class=\"m\">13</span><span class=\"p\">)</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kt\">uint</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">);</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">pos</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"defer\">Defer</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">func1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"executing function 1\"</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">func2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"executing function 2\"</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// defer == adiar, postergar</span>\t<span class=\"c\">// Pode ser usado para executar algo antes do defer</span>\t<span class=\"k\">defer</span> <span class=\"n\">func1</span><span class=\"p\">()</span> <span class=\"c\">// Joga execução por último</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"print\"</span><span class=\"p\">)</span>\t<span class=\"n\">func2</span><span class=\"p\">()</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"panic-e-recover\">Panic e Recover</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">recoverExec</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"nb\">recover</span><span class=\"p\">();</span> <span class=\"n\">r</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span> <span class=\"c\">// recupera</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"trying to recover\"</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">alunoStatus</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"kt\">float64</span><span class=\"p\">)</span> <span class=\"kt\">bool</span> <span class=\"p\">{</span>\t<span class=\"k\">defer</span> <span class=\"n\">recoverExec</span><span class=\"p\">()</span>\t<span class=\"n\">media</span> <span class=\"o\">:=</span> <span class=\"p\">(</span><span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"m\">2</span>\t<span class=\"k\">if</span> <span class=\"n\">media</span> <span class=\"o\">&gt;</span> <span class=\"m\">6.0</span> <span class=\"p\">{</span>\t\t<span class=\"k\">return</span> <span class=\"no\">true</span>\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">media</span> <span class=\"o\">&lt;</span> <span class=\"m\">6</span> <span class=\"p\">{</span>\t\t<span class=\"k\">return</span> <span class=\"no\">false</span>\t<span class=\"p\">}</span>\t<span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"s\">\"media == 6 :/\"</span><span class=\"p\">)</span> <span class=\"c\">// Mata execução se não tiver um recover</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// Panic != Error</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">alunoStatus</span><span class=\"p\">(</span><span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">7</span><span class=\"p\">))</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">alunoStatus</span><span class=\"p\">(</span><span class=\"m\">6</span><span class=\"p\">,</span> <span class=\"m\">6</span><span class=\"p\">))</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"end !\"</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"função-closure\">Função Closure</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">closure</span><span class=\"p\">()</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">text</span> <span class=\"o\">:=</span> <span class=\"s\">\"Closure func internal\"</span>\t<span class=\"n\">newFunc</span> <span class=\"o\">:=</span> <span class=\"k\">func</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">newFunc</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">text</span> <span class=\"o\">:=</span> <span class=\"s\">\"Main func internal\"</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\t<span class=\"n\">newFuncMain</span> <span class=\"o\">:=</span> <span class=\"n\">closure</span><span class=\"p\">()</span>\t<span class=\"n\">newFuncMain</span><span class=\"p\">()</span><span class=\"p\">}</span></code></pre></div></div><blockquote>  <p>Embora o Go não use o termo “closure” diretamente, a capacidade de criar funções anônimas que capturam variáveis locais proporciona um comportamento similar ao de closures em outras linguagens de programação.</p></blockquote><h3 id=\"funções-com-ponteiros\">Funções com Ponteiros</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">inverteSinal</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">inverteSinalPonteiro</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">*</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"o\">*</span><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"m\">20</span>\t<span class=\"n\">numInv</span> <span class=\"o\">:=</span> <span class=\"n\">inverteSinal</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">numInv</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\t<span class=\"n\">num2</span> <span class=\"o\">:=</span> <span class=\"m\">40</span>\t<span class=\"n\">inverteSinalPonteiro</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">num2</span><span class=\"p\">)</span> <span class=\"c\">// Passagem por referência</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">num2</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"função-init\">Função Init</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">var</span> <span class=\"n\">x</span> <span class=\"kt\">int</span><span class=\"c\">// OBS: pode-se ter uma função init por arquivo</span><span class=\"k\">func</span> <span class=\"n\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"exec init()\"</span><span class=\"p\">)</span>\t<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"m\">10</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"exec main()\"</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"métodos\">Métodos</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">type</span> <span class=\"n\">user</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">name</span> <span class=\"kt\">string</span>\t<span class=\"n\">age</span>  <span class=\"kt\">uint8</span><span class=\"p\">}</span><span class=\"c\">// Método</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"n\">save</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"saving user\"</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">*</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"n\">defaultName</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Smith\"</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">user1</span> <span class=\"o\">:=</span> <span class=\"n\">user</span><span class=\"p\">{</span><span class=\"s\">\"apolzek\"</span><span class=\"p\">,</span> <span class=\"m\">28</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">user1</span><span class=\"p\">)</span>\t<span class=\"n\">user1</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\t<span class=\"n\">user2</span> <span class=\"o\">:=</span> <span class=\"n\">user</span><span class=\"p\">{</span><span class=\"s\">\"erik\"</span><span class=\"p\">,</span> <span class=\"m\">20</span><span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">user2</span><span class=\"p\">)</span>\t<span class=\"n\">user2</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\t<span class=\"n\">user2</span><span class=\"o\">.</span><span class=\"n\">defaultName</span><span class=\"p\">()</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">user2</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"interfaces\">Interfaces</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"math\"</span><span class=\"p\">)</span><span class=\"k\">type</span> <span class=\"n\">forma</span> <span class=\"k\">interface</span> <span class=\"p\">{</span>\t<span class=\"n\">area</span><span class=\"p\">()</span> <span class=\"kt\">float64</span><span class=\"p\">}</span><span class=\"k\">type</span> <span class=\"n\">retangulo</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">altura</span>  <span class=\"kt\">float64</span>\t<span class=\"n\">largura</span> <span class=\"kt\">float64</span><span class=\"p\">}</span><span class=\"k\">type</span> <span class=\"n\">circulo</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\t<span class=\"n\">raio</span> <span class=\"kt\">float64</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">escreverArea</span><span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">forma</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Area da forma eh:\"</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">area</span><span class=\"p\">())</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"n\">retangulo</span><span class=\"p\">)</span> <span class=\"n\">area</span><span class=\"p\">()</span> <span class=\"kt\">float64</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">altura</span> <span class=\"o\">*</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">largura</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"n\">circulo</span><span class=\"p\">)</span> <span class=\"n\">area</span><span class=\"p\">()</span> <span class=\"kt\">float64</span> <span class=\"p\">{</span>\t<span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Pi</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">Pow</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">raio</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">retangulo</span><span class=\"p\">{</span><span class=\"m\">10</span><span class=\"p\">,</span> <span class=\"m\">15</span><span class=\"p\">}</span>\t<span class=\"n\">escreverArea</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\t<span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">circulo</span><span class=\"p\">{</span><span class=\"m\">10</span><span class=\"p\">}</span>\t<span class=\"n\">escreverArea</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"interfaces-como-tipo-genérico\">Interfaces como Tipo Genérico</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span><span class=\"k\">func</span> <span class=\"n\">generic</span><span class=\"p\">(</span><span class=\"n\">interf</span> <span class=\"k\">interface</span><span class=\"p\">{})</span> <span class=\"p\">{</span> <span class=\"c\">// Aceita tudo</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">interf</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">generic</span><span class=\"p\">(</span><span class=\"s\">\"string\"</span><span class=\"p\">)</span>\t<span class=\"n\">generic</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">)</span>\t<span class=\"n\">generic</span><span class=\"p\">(</span><span class=\"no\">true</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"s\">\"string\"</span><span class=\"p\">,</span> <span class=\"no\">false</span><span class=\"p\">,</span> <span class=\"no\">true</span><span class=\"p\">,</span> <span class=\"kt\">float32</span><span class=\"p\">(</span><span class=\"m\">32</span><span class=\"p\">),</span> <span class=\"kt\">int</span><span class=\"p\">(</span><span class=\"m\">213</span><span class=\"p\">))</span>\t<span class=\"c\">// bagunça</span>\t<span class=\"n\">mapa</span> <span class=\"o\">:=</span> <span class=\"k\">map</span><span class=\"p\">[</span><span class=\"k\">interface</span><span class=\"p\">{}]</span><span class=\"k\">interface</span><span class=\"p\">{}{</span>\t\t<span class=\"m\">1</span><span class=\"o\">:</span>      <span class=\"s\">\"test\"</span><span class=\"p\">,</span>\t\t<span class=\"s\">\"test\"</span><span class=\"o\">:</span> <span class=\"m\">1.1</span><span class=\"p\">,</span>\t\t<span class=\"no\">true</span><span class=\"o\">:</span>   <span class=\"m\">1</span><span class=\"p\">,</span>\t\t<span class=\"no\">false</span><span class=\"o\">:</span>  <span class=\"m\">0</span><span class=\"p\">,</span>\t<span class=\"p\">}</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">mapa</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><blockquote>  <p>Danger</p></blockquote>",
            "url": "/2024/01/05/overview.html",
            
            
            
            "tags": ["go","overview"],
            
            "date_published": "2024-01-05T00:00:00+00:00",
            "date_modified": "2024-01-05T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2023/11/19/install-k8s.html",
            "title": "tools/k8s/install-k8s",
            "summary": "Install k8s",
            "content_text": "Install k8s  Version: 1.26.5-00Disable swap (pre-reqsudo sed -i '/ swap / s/^/#/' /etc/fstabLoad kernel modulescat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.confoverlaybr_netfilterEOFsudo modprobe overlaysudo modprobe br_netfilter# sysctl params required by setup, params persist across rebootscat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-iptables  = 1net.bridge.bridge-nf-call-ip6tables = 1net.ipv4.ip_forward                 = 1EOF# Apply sysctl params without rebootsudo sysctl --systemInstall container runtime, and k8s componentssudo apt-get updatesudo apt-get install -y apt-transport-https ca-certificates curlsudo mkdir /etc/apt/keyringscurl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpgecho \"deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.listsudo apt-get updatesudo apt install -y kubelet=1.26.5-00 kubeadm=1.26.5-00 kubectl=1.26.5-00sudo apt install docker.iosudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.tomlsudo systemctl restart containerd.servicesudo systemctl restart kubelet.servicesudo systemctl enable kubelet.servicesudo kubeadm config images pullsudo kubeadm init --pod-network-cidr=10.10.0.0/16Configure k8s accessmkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/configConfigure calicokubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yamlcurl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -Osed -i 's/cidr: 192\\.168\\.0\\.0\\/16/cidr: 10.10.0.0\\/16/g' custom-resources.yamlkubectl create -f custom-resources.yamlConfigure metallbkubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yamlkubectl get all --namespace metallb-systemipaddresspool.yamlapiVersion: metallb.io/v1beta1kind: IPAddressPoolmetadata:  name: default-pool  namespace: metallb-systemspec:  addresses:  - 192.168.100.240-192.168.1.250l2advertisement.yamlapiVersion: metallb.io/v1beta1kind: L2Advertisementmetadata:  name: default  namespace: metallb-systemspec:  ipAddressPools:  - default-poolApply metallb config fileskubectl apply -f ipaddresspool.yamlkubectl apply -f l2advertisement.yamlTest cluster k8s and metallbkubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:1.0kubectl expose deployment hello-server --type LoadBalancer --port 80 --target-port 8080kubectl scale --replicas=3 deployment hello-serverfor i in {1..5}; do curl http://192.168.100.240; done",
            "content_html": "<h2 id=\"install-k8s\">Install k8s</h2><blockquote>  <p>Version: 1.26.5-00</p></blockquote><p>Disable swap (pre-req</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo sed</span> <span class=\"nt\">-i</span> <span class=\"s1\">'/ swap / s/^/#/'</span> /etc/fstab</code></pre></div></div><p>Load kernel modules</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat</span> <span class=\"o\">&lt;&lt;</span><span class=\"no\">EOF</span><span class=\"sh\"> | sudo tee /etc/modules-load.d/k8s.confoverlaybr_netfilter</span><span class=\"no\">EOF</span><span class=\"nb\">sudo </span>modprobe overlay<span class=\"nb\">sudo </span>modprobe br_netfilter<span class=\"c\"># sysctl params required by setup, params persist across reboots</span><span class=\"nb\">cat</span> <span class=\"o\">&lt;&lt;</span><span class=\"no\">EOF</span><span class=\"sh\"> | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-iptables  = 1net.bridge.bridge-nf-call-ip6tables = 1net.ipv4.ip_forward                 = 1</span><span class=\"no\">EOF</span><span class=\"c\"># Apply sysctl params without reboot</span><span class=\"nb\">sudo </span>sysctl <span class=\"nt\">--system</span></code></pre></div></div><p>Install container runtime, and k8s components</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get update<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install</span> <span class=\"nt\">-y</span> apt-transport-https ca-certificates curl<span class=\"nb\">sudo mkdir</span> /etc/apt/keyringscurl <span class=\"nt\">-fsSL</span> https://packages.cloud.google.com/apt/doc/apt-key.gpg | <span class=\"nb\">sudo </span>gpg <span class=\"nt\">--dearmor</span> <span class=\"nt\">-o</span> /etc/apt/keyrings/kubernetes-archive-keyring.gpg<span class=\"nb\">echo</span> <span class=\"s2\">\"deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\"</span> | <span class=\"nb\">sudo tee</span> /etc/apt/sources.list.d/kubernetes.list<span class=\"nb\">sudo </span>apt-get update<span class=\"nb\">sudo </span>apt <span class=\"nb\">install</span> <span class=\"nt\">-y</span> <span class=\"nv\">kubelet</span><span class=\"o\">=</span>1.26.5-00 <span class=\"nv\">kubeadm</span><span class=\"o\">=</span>1.26.5-00 <span class=\"nv\">kubectl</span><span class=\"o\">=</span>1.26.5-00<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>docker.io<span class=\"nb\">sudo sed</span> <span class=\"nt\">-i</span> <span class=\"s1\">'s/ SystemdCgroup = false/ SystemdCgroup = true/'</span> /etc/containerd/config.toml<span class=\"nb\">sudo </span>systemctl restart containerd.service<span class=\"nb\">sudo </span>systemctl restart kubelet.service<span class=\"nb\">sudo </span>systemctl <span class=\"nb\">enable </span>kubelet.service<span class=\"nb\">sudo </span>kubeadm config images pull<span class=\"nb\">sudo </span>kubeadm init <span class=\"nt\">--pod-network-cidr</span><span class=\"o\">=</span>10.10.0.0/16</code></pre></div></div><p>Configure k8s access</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"nv\">$HOME</span>/.kube<span class=\"nb\">sudo cp</span> <span class=\"nt\">-i</span> /etc/kubernetes/admin.conf <span class=\"nv\">$HOME</span>/.kube/config<span class=\"nb\">sudo chown</span> <span class=\"si\">$(</span><span class=\"nb\">id</span> <span class=\"nt\">-u</span><span class=\"si\">)</span>:<span class=\"si\">$(</span><span class=\"nb\">id</span> <span class=\"nt\">-g</span><span class=\"si\">)</span> <span class=\"nv\">$HOME</span>/.kube/config</code></pre></div></div><p>Configure calico</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kubectl create <span class=\"nt\">-f</span> https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yamlcurl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml <span class=\"nt\">-O</span><span class=\"nb\">sed</span> <span class=\"nt\">-i</span> <span class=\"s1\">'s/cidr: 192\\.168\\.0\\.0\\/16/cidr: 10.10.0.0\\/16/g'</span> custom-resources.yamlkubectl create <span class=\"nt\">-f</span> custom-resources.yaml</code></pre></div></div><p>Configure metallb</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kubectl apply <span class=\"nt\">-f</span> https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yamlkubectl get all <span class=\"nt\">--namespace</span> metallb-system</code></pre></div></div><p><em>ipaddresspool.yaml</em></p><div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">metallb.io/v1beta1</span><span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">IPAddressPool</span><span class=\"na\">metadata</span><span class=\"pi\">:</span>  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">default-pool</span>  <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s\">metallb-system</span><span class=\"na\">spec</span><span class=\"pi\">:</span>  <span class=\"na\">addresses</span><span class=\"pi\">:</span>  <span class=\"pi\">-</span> <span class=\"s\">192.168.100.240-192.168.1.250</span></code></pre></div></div><p><em>l2advertisement.yaml</em></p><div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">metallb.io/v1beta1</span><span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">L2Advertisement</span><span class=\"na\">metadata</span><span class=\"pi\">:</span>  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">default</span>  <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s\">metallb-system</span><span class=\"na\">spec</span><span class=\"pi\">:</span>  <span class=\"na\">ipAddressPools</span><span class=\"pi\">:</span>  <span class=\"pi\">-</span> <span class=\"s\">default-pool</span></code></pre></div></div><p>Apply metallb config files</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kubectl apply <span class=\"nt\">-f</span> ipaddresspool.yamlkubectl apply <span class=\"nt\">-f</span> l2advertisement.yaml</code></pre></div></div><p>Test cluster k8s and metallb</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kubectl create deployment hello-server <span class=\"nt\">--image</span><span class=\"o\">=</span>gcr.io/google-samples/hello-app:1.0kubectl expose deployment hello-server <span class=\"nt\">--type</span> LoadBalancer <span class=\"nt\">--port</span> 80 <span class=\"nt\">--target-port</span> 8080kubectl scale <span class=\"nt\">--replicas</span><span class=\"o\">=</span>3 deployment hello-server<span class=\"k\">for </span>i <span class=\"k\">in</span> <span class=\"o\">{</span>1..5<span class=\"o\">}</span><span class=\"p\">;</span> <span class=\"k\">do </span>curl http://192.168.100.240<span class=\"p\">;</span> <span class=\"k\">done</span></code></pre></div></div>",
            "url": "/2023/11/19/install-k8s.html",
            
            
            
            "tags": ["cka","kubernetes","k8s"],
            
            "date_published": "2023-11-19T00:00:00+00:00",
            "date_modified": "2023-11-19T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2023/10/24/context.html",
            "title": "development/golang/context",
            "summary": "Context",
            "content_text": "ContextEm Go (ou Golang), o contexto (context) é uma poderosa ferramenta que permite controlar a execução de operações concorrentes e paralelas. Ele é comumente usado para lidar com prazos, cancelamento de operações e valores associados com uma determinada goroutine (uma unidade leve de execução em Go). O contexto é especialmente útil em situações onde várias goroutines estão sendo executadas e você precisa coordenar ou gerenciar seu comportamento. Contextos basicamente utilizam channels por debaixo dos panos, nos quais, os processos que os utilizam precisam ficar ouvindo os sinais que recebem deste contexto em questao.Onde usar ?  Context de tracing  Context do request  Context em query SQL3 tipos de contexto em GoDeadlines: tempo maximo para o codigo terminar de ser executado(definir o ponto final)  WithDeadline: passa o horario final para terminar(horario maximo)  WithTimeout: daqui a quanto tempo vai terminarCancellation Signals: todos que estiverem escutando o contexto sao cancelados  WithCancelRequest-scoped values  WithValue: definir e mapear valores(em memoria)1. Controlando Prazos (Timeouts):package mainimport (    \"context\"    \"fmt\"    \"time\")func main() {    ctx, cancel := context.WithTimeout(context.Background(), time.Second*2)    defer cancel()    select {    case &lt;-time.After(time.Second * 3):        fmt.Println(\"Operação demorou muito!\")    case &lt;-ctx.Done():        fmt.Println(\"Operação cancelada devido ao prazo expirado.\")    }}2. Cancelamento de Operações:\\package mainimport (    \"context\"    \"fmt\"    \"time\")func worker(ctx context.Context) {    for {        select {        case &lt;-ctx.Done():            fmt.Println(\"Goroutine cancelada.\")            return        default:            fmt.Println(\"Trabalhando...\")            time.Sleep(time.Second)        }    }}func main() {    ctx, cancel := context.WithCancel(context.Background())    go worker(ctx)    // Aguarde por algum tempo e então cancele a operação    time.Sleep(time.Second * 3)    cancel()    // Aguarde um pouco para ver a saída    time.Sleep(time.Second)}3. Comunicação de Valores entre Goroutines:package mainimport (    \"context\"    \"fmt\"    \"sync\")type key stringfunc worker(ctx context.Context, wg *sync.WaitGroup) {    defer wg.Done()    // Recupera o valor associado à chave do contexto    userID := ctx.Value(key(\"userID\")).(string)    fmt.Println(\"Goroutine recebeu UserID:\", userID)}func main() {    // Crie um contexto com um valor associado à chave \"userID\"    ctx := context.WithValue(context.Background(), key(\"userID\"), \"12345\")    var wg sync.WaitGroup    // Inicie duas goroutines que compartilham o mesmo contexto    for i := 0; i &lt; 2; i++ {        wg.Add(1)        go worker(ctx, &amp;wg)    }    // Aguarde até que todas as goroutines terminem    wg.Wait()}Logo a seguir estao alguns tipos de contexts..Context - WithCancelpackage mainimport (\t\"context\"\t\"fmt\"\t\"time\")func main() {\tctx, cancel := context.WithCancel(\t\tcontext.Background(),\t)\tgo printUntilCancel(ctx)\ttime.Sleep(3 * time.Second)\tcancel()\ttime.Sleep(10 * time.Second)}func printUntilCancel(ctx context.Context) {\tcount := 0\tfor {\t\tselect {\t\tcase &lt;-ctx.Done():\t\t\tfmt.Println(\"Cancel signal received, exiting\")\t\t\treturn\t\tdefault:\t\t\tfmt.Printf(\"I'm here\\n\")\t\t\ttime.Sleep(1 * time.Second)\t\t\tfmt.Printf(\"Printing until cancel, number = %d \\n\", count)\t\t\tcount += 1\t\t}\t}}Context - WithDeadlinepackage mainimport (\t\"context\"\t\"fmt\"\t\"time\")func main() {\t// time.Sleep(10 * time.Second)\tctx, cancel := context.WithDeadline(\t\tcontext.Background(),\t\ttime.Now().Add(20*time.Second),\t)\tdefer cancel()\tprintUntilCancel(ctx)\t// go printUntilCancel(ctx)\t// time.Sleep(5 * time.Second)\t// cancel()}func printUntilCancel(ctx context.Context) {\tcount := 0\tfor {\t\tselect {\t\tcase &lt;-ctx.Done():\t\t\tfmt.Println(\"Cancel signal received, exiting\")\t\t\treturn\t\tdefault:\t\t\tfmt.Print(\"I'm here\\n\")\t\t\ttime.Sleep(2 * time.Second)\t\t\tfmt.Printf(\"Printing until cancel, number = %d \\n\", count)\t\t\tcount += 1\t\t}\t}}Context - WithTimeoutpackage mainimport (\t\"context\"\t\"fmt\"\t\"sync\"\t\"time\")func main() {\tctx, cancel := context.WithTimeout(\t\tcontext.Background(),\t\t5*time.Second,\t)\t// defer cancel()\t// printUntilCancel(ctx)\tvar wg sync.WaitGroup\twg.Add(1)\tgo printUntilCancel(ctx, &amp;wg)\ttime.Sleep(3 * time.Second)\tcancel()\twg.Wait()}func printUntilCancel(ctx context.Context, wg *sync.WaitGroup) {\tdefer wg.Done()\tcount := 0\tfor {\t\tselect {\t\tcase &lt;-ctx.Done():\t\t\tfmt.Println(\"Cancel signal received, exiting\")\t\t\treturn\t\tdefault:\t\t\ttime.Sleep(1 * time.Second)\t\t\tfmt.Printf(\"Printing until cancel, number = %d \\n\", count)\t\t\tcount += 1\t\t}\t}}Context - WithValuepackage mainimport (\t\"context\"\t\"fmt\")func main() {\tctx := context.WithValue(\t\tcontext.Background(),\t\t\"testKey\",\t\t\"testValue\",\t)\tprintUntilCancel(ctx)}func printUntilCancel(ctx context.Context) {\tctx2 := context.WithValue(ctx, \"testKey\", \"palmeiras\")\tfmt.Println(ctx2.Value(\"testKey\"))\tfmt.Println(ctx.Value(\"testKey\"))}Referências  https://github.com/HunCoding/golang-basics/tree/main/context",
            "content_html": "<h2 id=\"context\">Context</h2><p>Em Go (ou Golang), o contexto (context) é uma poderosa ferramenta que permite controlar a execução de operações concorrentes e paralelas. Ele é comumente usado para lidar com prazos, cancelamento de operações e valores associados com uma determinada goroutine (uma unidade leve de execução em Go). O contexto é especialmente útil em situações onde várias goroutines estão sendo executadas e você precisa coordenar ou gerenciar seu comportamento. Contextos basicamente utilizam channels por debaixo dos panos, nos quais, os processos que os utilizam precisam ficar ouvindo os sinais que recebem deste contexto em questao.</p><h3 id=\"onde-usar-\">Onde usar ?</h3><ul>  <li>Context de tracing</li>  <li>Context do request</li>  <li>Context em query SQL</li></ul><h3 id=\"3-tipos-de-contexto-em-go\">3 tipos de contexto em Go</h3><p><strong>Deadlines</strong>: tempo maximo para o codigo terminar de ser executado(definir o ponto final)</p><ul>  <li>WithDeadline: passa o horario final para terminar(horario maximo)</li>  <li>WithTimeout: daqui a quanto tempo vai terminar</li></ul><p><strong>Cancellation Signals</strong>: todos que estiverem escutando o contexto sao cancelados</p><ul>  <li>WithCancel</li></ul><p><strong>Request-scoped values</strong></p><ul>  <li>WithValue: definir e mapear valores(em memoria)</li></ul><h3 id=\"1-controlando-prazos-timeouts\">1. Controlando Prazos (Timeouts):</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>    <span class=\"s\">\"context\"</span>    <span class=\"s\">\"fmt\"</span>    <span class=\"s\">\"time\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">cancel</span> <span class=\"o\">:=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">WithTimeout</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Background</span><span class=\"p\">(),</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"o\">*</span><span class=\"m\">2</span><span class=\"p\">)</span>    <span class=\"k\">defer</span> <span class=\"n\">cancel</span><span class=\"p\">()</span>    <span class=\"k\">select</span> <span class=\"p\">{</span>    <span class=\"k\">case</span> <span class=\"o\">&lt;-</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">After</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span> <span class=\"o\">*</span> <span class=\"m\">3</span><span class=\"p\">)</span><span class=\"o\">:</span>        <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Operação demorou muito!\"</span><span class=\"p\">)</span>    <span class=\"k\">case</span> <span class=\"o\">&lt;-</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">Done</span><span class=\"p\">()</span><span class=\"o\">:</span>        <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Operação cancelada devido ao prazo expirado.\"</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"2-cancelamento-de-operações\">2. Cancelamento de Operações:\\</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>    <span class=\"s\">\"context\"</span>    <span class=\"s\">\"fmt\"</span>    <span class=\"s\">\"time\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"n\">ctx</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">for</span> <span class=\"p\">{</span>        <span class=\"k\">select</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"o\">&lt;-</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">Done</span><span class=\"p\">()</span><span class=\"o\">:</span>            <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Goroutine cancelada.\"</span><span class=\"p\">)</span>            <span class=\"k\">return</span>        <span class=\"k\">default</span><span class=\"o\">:</span>            <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Trabalhando...\"</span><span class=\"p\">)</span>            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">cancel</span> <span class=\"o\">:=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">WithCancel</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Background</span><span class=\"p\">())</span>    <span class=\"k\">go</span> <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span>    <span class=\"c\">// Aguarde por algum tempo e então cancele a operação</span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span> <span class=\"o\">*</span> <span class=\"m\">3</span><span class=\"p\">)</span>    <span class=\"n\">cancel</span><span class=\"p\">()</span>    <span class=\"c\">// Aguarde um pouco para ver a saída</span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"3-comunicação-de-valores-entre-goroutines\">3. Comunicação de Valores entre Goroutines:</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>    <span class=\"s\">\"context\"</span>    <span class=\"s\">\"fmt\"</span>    <span class=\"s\">\"sync\"</span><span class=\"p\">)</span><span class=\"k\">type</span> <span class=\"n\">key</span> <span class=\"kt\">string</span><span class=\"k\">func</span> <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"n\">ctx</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"n\">wg</span> <span class=\"o\">*</span><span class=\"n\">sync</span><span class=\"o\">.</span><span class=\"n\">WaitGroup</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">defer</span> <span class=\"n\">wg</span><span class=\"o\">.</span><span class=\"n\">Done</span><span class=\"p\">()</span>    <span class=\"c\">// Recupera o valor associado à chave do contexto</span>    <span class=\"n\">userID</span> <span class=\"o\">:=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s\">\"userID\"</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">)</span>    <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Goroutine recebeu UserID:\"</span><span class=\"p\">,</span> <span class=\"n\">userID</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c\">// Crie um contexto com um valor associado à chave \"userID\"</span>    <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">WithValue</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Background</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s\">\"userID\"</span><span class=\"p\">),</span> <span class=\"s\">\"12345\"</span><span class=\"p\">)</span>    <span class=\"k\">var</span> <span class=\"n\">wg</span> <span class=\"n\">sync</span><span class=\"o\">.</span><span class=\"n\">WaitGroup</span>    <span class=\"c\">// Inicie duas goroutines que compartilham o mesmo contexto</span>    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"m\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>        <span class=\"n\">wg</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span>        <span class=\"k\">go</span> <span class=\"n\">worker</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">wg</span><span class=\"p\">)</span>    <span class=\"p\">}</span>    <span class=\"c\">// Aguarde até que todas as goroutines terminem</span>    <span class=\"n\">wg</span><span class=\"o\">.</span><span class=\"n\">Wait</span><span class=\"p\">()</span><span class=\"p\">}</span></code></pre></div></div><p>Logo a seguir estao alguns tipos de contexts..</p><h3 id=\"context---withcancel\">Context - WithCancel</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"context\"</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"time\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">cancel</span> <span class=\"o\">:=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">WithCancel</span><span class=\"p\">(</span>\t\t<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Background</span><span class=\"p\">(),</span>\t<span class=\"p\">)</span>\t<span class=\"k\">go</span> <span class=\"n\">printUntilCancel</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span>\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"m\">3</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span>\t<span class=\"n\">cancel</span><span class=\"p\">()</span>\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"m\">10</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">printUntilCancel</span><span class=\"p\">(</span><span class=\"n\">ctx</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"p\">{</span>\t\t<span class=\"k\">select</span> <span class=\"p\">{</span>\t\t<span class=\"k\">case</span> <span class=\"o\">&lt;-</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">Done</span><span class=\"p\">()</span><span class=\"o\">:</span>\t\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Cancel signal received, exiting\"</span><span class=\"p\">)</span>\t\t\t<span class=\"k\">return</span>\t\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"I'm here</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\t\t\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"m\">1</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span>\t\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Printing until cancel, number = %d </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)</span>\t\t\t<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"m\">1</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"context---withdeadline\">Context - WithDeadline</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"context\"</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"time\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c\">// time.Sleep(10 * time.Second)</span>\t<span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">cancel</span> <span class=\"o\">:=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">WithDeadline</span><span class=\"p\">(</span>\t\t<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Background</span><span class=\"p\">(),</span>\t\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"m\">20</span><span class=\"o\">*</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">),</span>\t<span class=\"p\">)</span>\t<span class=\"k\">defer</span> <span class=\"n\">cancel</span><span class=\"p\">()</span>\t<span class=\"n\">printUntilCancel</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span>\t<span class=\"c\">// go printUntilCancel(ctx)</span>\t<span class=\"c\">// time.Sleep(5 * time.Second)</span>\t<span class=\"c\">// cancel()</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">printUntilCancel</span><span class=\"p\">(</span><span class=\"n\">ctx</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"p\">{</span>\t\t<span class=\"k\">select</span> <span class=\"p\">{</span>\t\t<span class=\"k\">case</span> <span class=\"o\">&lt;-</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">Done</span><span class=\"p\">()</span><span class=\"o\">:</span>\t\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Cancel signal received, exiting\"</span><span class=\"p\">)</span>\t\t\t<span class=\"k\">return</span>\t\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Print</span><span class=\"p\">(</span><span class=\"s\">\"I'm here</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\t\t\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"m\">2</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span>\t\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Printing until cancel, number = %d </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)</span>\t\t\t<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"m\">1</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"context---withtimeout\">Context - WithTimeout</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"context\"</span>\t<span class=\"s\">\"fmt\"</span>\t<span class=\"s\">\"sync\"</span>\t<span class=\"s\">\"time\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">cancel</span> <span class=\"o\">:=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">WithTimeout</span><span class=\"p\">(</span>\t\t<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Background</span><span class=\"p\">(),</span>\t\t<span class=\"m\">5</span><span class=\"o\">*</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">,</span>\t<span class=\"p\">)</span>\t<span class=\"c\">// defer cancel()</span>\t<span class=\"c\">// printUntilCancel(ctx)</span>\t<span class=\"k\">var</span> <span class=\"n\">wg</span> <span class=\"n\">sync</span><span class=\"o\">.</span><span class=\"n\">WaitGroup</span>\t<span class=\"n\">wg</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span>\t<span class=\"k\">go</span> <span class=\"n\">printUntilCancel</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">wg</span><span class=\"p\">)</span>\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"m\">3</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span>\t<span class=\"n\">cancel</span><span class=\"p\">()</span>\t<span class=\"n\">wg</span><span class=\"o\">.</span><span class=\"n\">Wait</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">printUntilCancel</span><span class=\"p\">(</span><span class=\"n\">ctx</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"n\">wg</span> <span class=\"o\">*</span><span class=\"n\">sync</span><span class=\"o\">.</span><span class=\"n\">WaitGroup</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">defer</span> <span class=\"n\">wg</span><span class=\"o\">.</span><span class=\"n\">Done</span><span class=\"p\">()</span>\t<span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"p\">{</span>\t\t<span class=\"k\">select</span> <span class=\"p\">{</span>\t\t<span class=\"k\">case</span> <span class=\"o\">&lt;-</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">Done</span><span class=\"p\">()</span><span class=\"o\">:</span>\t\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Cancel signal received, exiting\"</span><span class=\"p\">)</span>\t\t\t<span class=\"k\">return</span>\t\t<span class=\"k\">default</span><span class=\"o\">:</span>\t\t\t<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"m\">1</span> <span class=\"o\">*</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Second</span><span class=\"p\">)</span>\t\t\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Printing until cancel, number = %d </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)</span>\t\t\t<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"m\">1</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"context---withvalue\">Context - WithValue</h3><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span><span class=\"k\">import</span> <span class=\"p\">(</span>\t<span class=\"s\">\"context\"</span>\t<span class=\"s\">\"fmt\"</span><span class=\"p\">)</span><span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">WithValue</span><span class=\"p\">(</span>\t\t<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Background</span><span class=\"p\">(),</span>\t\t<span class=\"s\">\"testKey\"</span><span class=\"p\">,</span>\t\t<span class=\"s\">\"testValue\"</span><span class=\"p\">,</span>\t<span class=\"p\">)</span>\t<span class=\"n\">printUntilCancel</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">printUntilCancel</span><span class=\"p\">(</span><span class=\"n\">ctx</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">ctx2</span> <span class=\"o\">:=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">WithValue</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"s\">\"testKey\"</span><span class=\"p\">,</span> <span class=\"s\">\"palmeiras\"</span><span class=\"p\">)</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">ctx2</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s\">\"testKey\"</span><span class=\"p\">))</span>\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s\">\"testKey\"</span><span class=\"p\">))</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"referências\">Referências</h2><ul>  <li>https://github.com/HunCoding/golang-basics/tree/main/context</li></ul>",
            "url": "/2023/10/24/context.html",
            
            
            
            "tags": ["go","golang","context","dev"],
            
            "date_published": "2023-10-24T00:00:00+00:00",
            "date_modified": "2023-10-24T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2023/10/24/firewalld.html",
            "title": "cheatsheet/firewalld",
            "summary": "Cheatsheet firewalld",
            "content_text": "Cheatsheet firewalldFirewalld, introduced in Fedora 15, serves as a dynamic firewall solution for Linux, supplanting iptables and gaining widespread adoption in distributions like CentOS and RHEL. It brings several key features to the table.Dynamic Configuration: Firewalld allows for runtime changes without disrupting active connections, a departure from the static nature of iptables.Zone-Based Configuration: The firewall organizes connections into zones such as public and internal, simplifying rule management based on the desired security levels for different network environments.Rich Rule Sets: Firewalld supports rich rule sets, providing a more flexible approach to rule definitions compared to its predecessor iptables.Application Layer Filtering: By integrating with D-Bus, Firewalld enables application layer filtering, allowing applications to define and manage their own firewall rules.In terms of use cases, Firewalld finds its primary application in enhancing system security by controlling incoming and outgoing network traffic, safeguarding against unauthorized access. Its zone-based approach allows for tailored security measures on different network interfaces. Service level filtering simplifies rule management by allowing rule definitions based on services. The dynamic adaptability of Firewalld makes it suitable for environments with frequently changing network configurations. Additionally, its D-Bus integration facilitates application-specific firewall rule management, meeting the specific network requirements of various applications.In summary, Firewalld stands as a versatile and dynamic firewall solution for Linux, offering enhanced security, flexibility in rule management, and application integration capabilities in dynamic network environments.# Habilitar o Firewalldsudo systemctl start firewalldsudo systemctl enable firewalld# Desabilitar o Firewalldsudo systemctl stop firewalldsudo systemctl disable firewalld# Verificar o Status do Firewalldsudo systemctl status firewalld# Listar as Zonas Disponíveissudo firewall-cmd --get-zones# Definir uma Zona Padrão (substitua 'public' pelo nome da zona desejada)sudo firewall-cmd --set-default-zone=public# Adicionar uma Regra de Permissão de Porta (por exemplo, porta 80/tcp)sudo firewall-cmd --add-port=80/tcp --permanent# Recarregar o Firewalld para Aplicar Alterações Permanentessudo firewall-cmd --reload# Adicionar uma Regra de Serviço (por exemplo, SSH)sudo firewall-cmd --add-service=ssh --permanent# Remover uma Regra de Serviço (por exemplo, SSH)sudo firewall-cmd --remove-service=ssh --permanent# Habilitar ou Desabilitar o Logging (substitua 'yes' ou 'no' conforme necessário)sudo firewall-cmd --set-log-denied=yes --permanentsudo firewall-cmd --set-log-denied=no --permanent# Ativar ou Desativar o Firewalldsudo systemctl start firewalldsudo systemctl stop firewalld",
            "content_html": "<h2 id=\"cheatsheet-firewalld\">Cheatsheet firewalld</h2><p>Firewalld, introduced in Fedora 15, serves as a dynamic firewall solution for Linux, supplanting iptables and gaining widespread adoption in distributions like CentOS and RHEL. It brings several key features to the table.</p><p><strong>Dynamic Configuration</strong>: Firewalld allows for runtime changes without disrupting active connections, a departure from the static nature of iptables.</p><p><strong>Zone-Based Configuration</strong>: The firewall organizes connections into zones such as public and internal, simplifying rule management based on the desired security levels for different network environments.</p><p><strong>Rich Rule Sets</strong>: Firewalld supports rich rule sets, providing a more flexible approach to rule definitions compared to its predecessor iptables.</p><p><strong>Application Layer Filtering</strong>: By integrating with D-Bus, Firewalld enables application layer filtering, allowing applications to define and manage their own firewall rules.</p><p>In terms of use cases, Firewalld finds its primary application in enhancing system security by controlling incoming and outgoing network traffic, safeguarding against unauthorized access. Its zone-based approach allows for tailored security measures on different network interfaces. Service level filtering simplifies rule management by allowing rule definitions based on services. The dynamic adaptability of Firewalld makes it suitable for environments with frequently changing network configurations. Additionally, its D-Bus integration facilitates application-specific firewall rule management, meeting the specific network requirements of various applications.</p><p>In summary, Firewalld stands as a versatile and dynamic firewall solution for Linux, offering enhanced security, flexibility in rule management, and application integration capabilities in dynamic network environments.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Habilitar o Firewalldsudo systemctl start firewalldsudo systemctl enable firewalld# Desabilitar o Firewalldsudo systemctl stop firewalldsudo systemctl disable firewalld# Verificar o Status do Firewalldsudo systemctl status firewalld# Listar as Zonas Disponíveissudo firewall-cmd --get-zones# Definir uma Zona Padrão (substitua 'public' pelo nome da zona desejada)sudo firewall-cmd --set-default-zone=public# Adicionar uma Regra de Permissão de Porta (por exemplo, porta 80/tcp)sudo firewall-cmd --add-port=80/tcp --permanent# Recarregar o Firewalld para Aplicar Alterações Permanentessudo firewall-cmd --reload# Adicionar uma Regra de Serviço (por exemplo, SSH)sudo firewall-cmd --add-service=ssh --permanent# Remover uma Regra de Serviço (por exemplo, SSH)sudo firewall-cmd --remove-service=ssh --permanent# Habilitar ou Desabilitar o Logging (substitua 'yes' ou 'no' conforme necessário)sudo firewall-cmd --set-log-denied=yes --permanentsudo firewall-cmd --set-log-denied=no --permanent# Ativar ou Desativar o Firewalldsudo systemctl start firewalldsudo systemctl stop firewalld</code></pre></div></div>",
            "url": "/2023/10/24/firewalld.html",
            
            
            
            "tags": ["firewalld","linux","firewall"],
            
            "date_published": "2023-10-24T00:00:00+00:00",
            "date_modified": "2023-10-24T00:00:00+00:00",
            
                "author": 
                ""
                
            
        }
    
    ]
}